{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Discover Babylon","text":"<p>Welcome to the End User Documentation of Babylon</p> <p>This documentation will guide you on your learning adventure with Babylon.</p>"},{"location":"#what-is-babylon","title":"What is Babylon ?","text":"<p>Babylon is a CLI<sup>1</sup> principally targeted at Devops users of the Cosmo Tech Platform. It allows the user to interact with the multiple systems used in the platform, performing multiple operations in a simple and streamlined fashion.</p> <p>Instead of requiring the user to learn how to use numerous software to interact with the systems, Babylon allows you to learn a single format.</p>"},{"location":"#why-babylon","title":"Why Babylon ?","text":"<p>Babylon was developed to help users getting around the difficulty of juggling around with multiple softwares to interact with the multiple systems composing the Cosmo Tech Platform.</p> <p>By using Babylon you only need one single software to work on your multiple needs.</p> <p>The team behind Babylon is closely tied to the one working on the Cosmo Tech Platform, and new features of the platform can quickly be added to Babylon allowing users to get fast access to the newest content.</p>"},{"location":"#im-still-not-convinced","title":"I'm still not convinced","text":"<p>Well, Babylon comes as a full framework allowing its developers to make simpler commands for you. While you get access to low level commands that directly interact with a single system, you also get high level commands allowing you a full automation of processes and thus reducing the risk of errors between elements.</p> <p>Such commands are called <code>Macro Commands</code><sup>2</sup> and allow a full automation of possibly complex processes.</p> <ol> <li> <p>Command Line Interface: A software used in a terminal console, allowing to run commands.\u00a0\u21a9</p> </li> <li> <p>Macro Commands: A combination of low level commands allowing to do complex operation in a high level manner.\u00a0\u21a9</p> </li> </ol>"},{"location":"discover/","title":"Discover Babylon","text":""},{"location":"discover/#what-is-babylon","title":"What is Babylon ?","text":"<p>Babylon is a CLI<sup>1</sup> principally targeted at Devops users of the Cosmo Tech Platform. It allows the user to interact with the multiple systems used in the platform, performing multiple operations in a simple and streamlined fashion.</p> <p>Instead of requiring the user to learn how to use numerous software to interact with the systems, Babylon allows you to learn a single format.</p>"},{"location":"discover/#why-babylon","title":"Why Babylon ?","text":"<p>Babylon was developed to help users getting around the difficulty of juggling around with multiple softwares to interact with the multiple systems composing the Cosmo Tech Platform.</p> <p>By using Babylon you only need one single software to work on your multiple needs.</p> <p>The team behind Babylon is closely tied to the one working on the Cosmo Tech Platform, and new features of the platform can quickly be added to Babylon allowing users to get fast access to the newest content.</p>"},{"location":"discover/#im-still-not-convinced","title":"I'm still not convinced","text":"<p>Well, Babylon comes as a full framework allowing its developers to make simpler commands for you. While you get access to low level commands that directly interact with a single system, you also get high level commands allowing you a full automation of processes and thus reducing the risk of errors between elements.</p> <p>Such commands are called <code>Macro Commands</code><sup>2</sup> and allow a full automation of possibly complex processes.</p> <ol> <li> <p>Command Line Interface: A software used in a terminal console, allowing to run commands.\u00a0\u21a9</p> </li> <li> <p>Macro Commands: A combination of low level commands allowing to do complex operation in a high level manner.\u00a0\u21a9</p> </li> </ol>"},{"location":"commands/powerbi_deploy_workspace/","title":"Power BI Deploy Workspace","text":""},{"location":"commands/powerbi_deploy_workspace/#description","title":"Description","text":"<p>This macro command will deploy a PowerBI workspace and populate it with reports. If the given workspace name already exists, the reports will be published in the existing workspace.</p> <p>This includes:</p> <ul> <li>Creating a PowerBI workspace if it does not exists</li> <li>Add user to PowerBI workspace</li> <li>Uploading all reports from a folder</li> <li>Updating dataset parameters</li> <li>Updating dataset azure credentials</li> </ul>"},{"location":"commands/powerbi_deploy_workspace/#configuration","title":"Configuration","text":"<p>Requirements</p> <p>By default this macro command requires a folder called <code>powerbi</code> containing two sub-folders  both with your <code>.pbix</code> files in respectively directory.</p> <pre><code>\u251c\u2500\u2500 powerbi\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_1.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_2.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_3.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_4.pbix\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 scenario\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 scenario.pbix\n</code></pre> <p>Note</p> <p>You can setup your <code>email</code> and your <code>user principal id</code> (Azure Directory) in your config files to deploy powerbi workspace with your credentials.</p> <pre><code>babylon config set azure email &lt;CHANGEME&gt; -c &lt;context_id&gt; -p &lt;platform_id&gt; \n</code></pre> <pre><code>babylon config set azure user_principal_id &lt;USER_PRINCIPAL_ID&gt; -c &lt;context_id&gt; -p &lt;platform_id&gt; \n</code></pre> <p>Then, make sure you have the required rights. <pre><code>babylon azure adx permission set -c &lt;context_id&gt; -p &lt;platform_id&gt; --type User --role Admin %azure%user_principal_id \n</code></pre></p> <p>Finally, you have to retrieve your access token powerbi <pre><code>babylon azure token store -c &lt;context_id&gt; -p &lt;platform_id&gt; --scope powerbi \n</code></pre></p> <p>Important</p> <p>The last command will give you a secret. <pre><code>export BABYLON_ENCODING_KEY=&lt;your_secret&gt;\n</code></pre></p>"},{"location":"commands/powerbi_deploy_workspace/#macro-command","title":"Macro command","text":"<p>Macro</p> <pre><code>babylon powerbi workspace deploy &lt;WORKSPACE_NAME&gt; -c &lt;context_id&gt; -p &lt;platform_id&gt; \\\n    --folder &lt;FOLDER_NAME&gt;/&lt;scenario | dashboard&gt; \\\n    --type &lt;scenario_view | dashboard_view&gt; \n</code></pre> <p>Usage</p> <pre><code># Usage: babylon powerbi workspace deploy [OPTIONS] WORKSPACE_NAME \n# \n#   Macro command allowing full deployment of a powerBI workspace\n#   Requires a local folder named `powerbi` and will initialize a full workspace with the\n#   given reports. Won't run powerbi workspace creation if it's already existing\n# \n# Options:\n#   --folder DIRECTORY          Override folder containing your .pbix files\n#                                   [required]\n#   --parameter &lt;QUERYSTRING QUERYSTRING&gt;...\n#                                   Add a combination &lt;Key Value&gt; that will be\n#                                   sent as parameter to all your datasets\n#   --override                      override reports in case of name conflict ?\n#   --type [scenario_view|dashboard_view]\n#                                   [required]\n#   --help                          Show this message and exit.\n</code></pre>"},{"location":"guides/","title":"Guides","text":"<p>Getting started</p> <p>You'll learn how to install, run, and experiment with Babylon.</p> <p>Getting started</p> <p>Deploy a solution</p> <p>This guide will help you to deploy a new solution or update an existing one.</p> <p>Solution deploy</p> <p>Deploy a solution with existing organization</p> <p>This guide will help you deploy a new solution within an existing organization or a new workspace within an existing organization and solution.</p> <p>Solution deploy</p> <p>Destroy a solution</p> <p>This guide will help you to delete all resources of an existing solution</p> <p>WebApp deploy</p>"},{"location":"guides/az_requirements/","title":"Az requirements","text":""},{"location":"guides/az_requirements/#azure-requirements","title":"Azure requirements","text":"<p>Requirements</p> <p>The following elements are required before you can use Babylon on an Azure subscription</p> <ul> <li> <p>Fully set up Cosmo Tech Platform installed on your Azure Tenant</p> </li> <li> <p>App registration for Babylon</p> </li> </ul> <p>Babylon uses a Service Principal to interact with the API and other resources. To do so, Babylon needs to be registered as an application in the Azure Active Directory.</p> <p>This App Registration will be used to authenticate and get the required tokens to connect to your Platform. Rights on the App Registration depends on the type of connection you want to make. </p> <p>We recommend defining this app registration as a mobile and desktop application in Azure configuration with redirection URL (mostly for authenticating against Azure services.</p> <p>See official documentation :</p> <pre><code>* https://learn.microsoft.com/en-us/entra/identity-platform/v2-oauth2-auth-code-flow\n* https://learn.microsoft.com/en-us/entra/identity-platform/msal-client-application-configuration\n* https://learn.microsoft.com/en-us/onedrive/developer/rest-api/getting-started/msa-oauth?view=odsp-graph-online\n</code></pre> <p>The App registration needs the following API permissions:</p> <ul> <li> <p>Microsoft Graph</p> <ul> <li>Application.ReadWrite.All (Application)</li> <li>Application.ReadWrite.OwnedBy (Application)</li> <li>Group.ReadWrite.All (Application)</li> </ul> </li> <li> <p>Platform Api</p> <ul> <li>Platform.Admin (Application)</li> </ul> </li> </ul> <p>For those concerned with specifics Azure policies, all Microsoft Graph's permissions can be deleted excepted User.Read.All (Application), but this implies that some operations would be handled manually. The platform API permission is mandatory.</p> <p>Important</p> <p>Babylon App registration needs at least Contributor role on Cosmo Tech Platform Resource Group.</p>"},{"location":"guides/brewery/","title":"Brewery","text":"<p>You can perform the following commands to deploy a new solution</p> <p>Remember</p> <p>You have to choose the platform and project you want to work. Contact your babylon admin to know more about your options.</p> <p>In this example, we will use</p> <ul> <li>context_id: <code>brewery</code></li> <li>platform_id: <code>staging</code></li> </ul> <p></p> <ul> <li> <p>** Container Registry **  <pre><code># retrieve configuration to work with dev platform\nbabylon config -c brewery -p dev select\n# retrieve configuration to work with staging platform\nbabylon config -c brewery -p staging select\n\n#\u00a0tranfer image from `dev` to `staging` platform\nbabylon azure -c brewery -p dev     acr pull -i &lt;image_docker:tag&gt;\nbabylon azure -c brewery -p staging acr push -i &lt;image_docker:tag&gt;\n</code></pre></p> </li> <li> <p>** Setting variables **  <pre><code># set some required variables\nbabylon config -c brewery -p staging set azure email &lt;changeme&gt;\nbabylon config -c brewery -p staging set azure user_principal_id &lt;user_principal_id&gt; \nbabylon config -c brewery -p staging set api workspace_key &lt;workspace_key&gt; \nbabylon config -c brewery -p staging set adx cluster_uri &lt;uri_kusto_cluster&gt; \nbabylon config -c brewery -p staging set powerbi dashboard_view \nbabylon config -c brewery -p staging set powerbi scenario_view \nbabylon config -c brewery -p staging set azure team_id &lt;team_id&gt; \n</code></pre></p> </li> </ul> <p>In this point, you can create a new organization or retrieve an organization</p> <ul> <li> <p>** Create organization **  <pre><code>babylon config -c brewery -p staging set api workspace_key &lt;changeme&gt;\nbabylon api    -c brewery -p staging organizations payload create\nbabylon api    -c brewery -p staging organizations create &lt;organization_name&gt; -e &lt;email&gt; -r Admin\nbabylon azure  -c brewery -p staging storage container create &lt;organization_id&gt;\nbabylon azure  -c brewery -p staging iam set -rt Microsoft.Storage/storageAccounts \\\n    -ri %azure%storage_blob_reader \\\n    -pi %azure%team_id \\\n    -pt Group \\\n    -rn %azure%storage_account_name\n</code></pre></p> </li> <li> <p>** Retrieve organization **  <pre><code>babylon api   -c brewery -p staging organizations get &lt;organization_id&gt;\nbabylon azure -c brewery -p staging iam set -rt Microsoft.Storage/storageAccounts \\\n    -ri %azure%storage_blob_reader \\\n    -pi %azure%team_id \\\n    -pt Group \\\n    -rn %azure%storage_account_name\n</code></pre></p> </li> </ul> <p>In this point, you can create a new ADT Instance or retrieve an ADT Instance</p> <ul> <li> <p>** Create ADT instance ** <pre><code># by default the name is &lt;organization_id&gt;-&lt;workspace_key&gt;\nbabylon azure -c brewery -p staging adt instance create\n</code></pre></p> </li> <li> <p>** Retrieve ADT instance ** <pre><code>babylon config -c brewery -p staging set adt digital_twins_url &lt;digital_twins_url&gt;\nbabylon azure  -c brewery -p staging iam set \\\n    -rt Microsoft.DigitalTwins/digitalTwinsInstances \\\n    -ri %adt%built_owner_id\nbabylon azure  -c brewery -p staging iam set \\\n    -rt Microsoft.DigitalTwins/digitalTwinsInstances \\\n    -ri %adt%built_reader_id\nbabylon azure  -c brewery -p staging iam set \\\n    -pi %azure%team_id \\\n    -pt Group \\\n    -rt Microsoft.DigitalTwins/digitalTwinsInstances \\\n    -ri %adt%built_owner_id\nbabylon azure  -c brewery -p staging iam set \\\n    -pi %azure%team_id \\\n    -pt Group \\\n    -rt Microsoft.DigitalTwins/digitalTwinsInstances \\\n    -ri %adt%built_reader_id\nbabylon azure  -c brewery -p staging adt model upload dtdl/\n</code></pre></p> </li> <li> <p>** Azure Data Explorer database ** </p> <p>Configuration </p> <p>Requirements</p> <p>By default this command requires a folder called <code>adx</code> containing scripts *.kql </p> <pre><code>\u251c\u2500\u2500 adx\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 script.kql\n</code></pre> <pre><code>#\u00a0by default the name is &lt;organization_id&gt;-&lt;workspace_key&gt;\nbabylon azure -c brewery -p staging adx database create\nbabylon azure -c brewery -p staging adx permission set -t User -r Admin %azure%user_principal_id\nbabylon azure -c brewery -p staging adx permission set -t Group -r Admin %azure%team_id\nbabylon azure -c brewery -p staging adx permission set -t App -r Admin %platform%principal_id\nbabylon azure -c brewery -p staging adx script run-folder adx/\n</code></pre> </li> <li> <p>** Create Eventhub namespace**  <pre><code>babylon azure -c brewery -p staging arm run -f %templates%/arm/eventhub_deploy.json\nbabylon azure -c brewery -p staging iam set \\\n    -rt Microsoft.EventHub/Namespaces \\\n    -ri %azure%eventhub_built_data_receiver \\\n    -pi %adx%cluster_principal_id\n\nbabylon azure -c brewery -p staging iam set \\\n    -rt Microsoft.EventHub/Namespaces \\\n    -ri %azure%eventhub_built_data_sender \\\n    -pi %babylon%principal_id\n\nbabylon azure -c brewery -p staging iam set \\\n    -rt Microsoft.EventHub/Namespaces \\\n    -ri %azure%eventhub_built_data_sender \\\n    -pi %babylon%principal_id\n\nbabylon azure -c brewery -p staging iam set \\\n    -pi %azure%team_id \\\n    -pt Group \\\n    -rt Microsoft.EventHub/Namespaces \\\n    -ri %azure%eventhub_built_contributor_id\n</code></pre></p> </li> <li> <p>** Eventhub consumer group and connectors ADX database**  <pre><code>#\u00a0create consumer groups\nbabylon azure -c brewery -p staging adx consumer add \"adx\" \"ProbesMeasures\"\nbabylon azure -c brewery -p staging adx consumer add \"adx\" \"ScenarioMetaData\"\nbabylon azure -c brewery -p staging adx consumer add \"adx\" \"ScenarioRun\"\nbabylon azure -c brewery -p staging adx consumer add \"adx\" \"ScenarioRunMetaData\"\n\n#\u00a0create connections\nbabylon azure -c brewery -p staging adx connections create ProbesMeasures %adx%database_name \\\n    -df JSON \\\n    -tn ProbesMeasures \\\n    -cp GZip \\\n    -cg adx \\\n    -mp ProbesMeasuresMapping\nbabylon azure -c brewery -p staging adx connections create ScenarioMetaData %adx%database_name \\\n    -df CSV \\\n    -tn ScenarioMetadata \\\n    -cg adx \\\n    -mp ScenarioMetadataMapping\nbabylon azure -c brewery -p staging adx connections create ScenarioRun %adx%database_name \\\n    -df JSON \\\n    -tn SimulationTotalFacts \\\n    -cg adx \\\n    -mp SimulationTotalFactsMapping\n babylon azure -c brewery -p staging adx connections create ScenarioRunMetaData %adx%database_name \\\n    -df CSV \\\n    -tn ScenarioRunMetadata \\\n    -cg adx \\\n    -mp ScenarioRunMetadataMapping\n</code></pre></p> </li> <li> <p>** Retrieve eventhub key ** </p> <p>Requirements</p> <p>Azure CLI</p> <pre><code>eventkey=$(az eventhubs namespace authorization-rule keys list \\\n    -g &lt;your_resource_group&gt; \\\n    --namespace-name &lt;organization_id&gt;-&lt;workspace_key&gt; \\\n    --name RootManageSharedAccessKey \\\n    --query primaryKey)\n\nbabylon hvac -c &lt;context_id&gt; -p &lt;platfom_id&gt; set project eventhub $eventkey\n</code></pre> </li> <li> <p>** Deploy PowerBI ** </p> <p>Requirements</p> <p>By default this macro command requires a folder called <code>powerbi</code> containing two sub-folders (<code>dashboard</code> and <code>scenario</code>) with your <code>.pbix</code> files. </p> <pre><code>\u251c\u2500\u2500 powerbi\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_1.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 scenario\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 scenario.pbix\n</code></pre> <p>Note</p> <p>You can setup your <code>email</code> and your <code>user principal id</code> (Azure Directory) in azure section to deploy powerbi workspace with your credentials</p> <pre><code>babylon azure -c &lt;context_id&gt; -p &lt;platform_id&gt; config set azure email &lt;changeme&gt;\nbabylon azure -c &lt;context_id&gt; -p &lt;platform_id&gt; config set azure user_principal_id &lt;user_principal_id&gt;\nbabylon azure -c &lt;context_id&gt; -p &lt;platform_id&gt; adx permission set -t User -r Admin %azure%user_principal_id\nbabylon azure -c &lt;context_id&gt; -p &lt;platform_id&gt; token store --scope powerbi\n</code></pre> <p>Warning</p> <p>The last command <code>babylon azure -c &lt;context_id&gt; -p &lt;platform_id&gt; token store --scope powerbi</code> will give you a secret to set in your environment variables <pre><code>export BABYLON_ENCODING_KEY=&lt;your_secret&gt;\n</code></pre></p> <p>Macro</p> <pre><code>babylon powerbi -c &lt;context_id&gt; -p &lt;platform_id&gt; workspace deploy\n</code></pre> <p>Get additional information about command </p> </li> </ul> <p></p> <ul> <li> <p>** Deploy Webapp ** </p> <p>Requirements</p> <p>This macro requires a github access token set in vault service.</p> <p>Please generate github access token using classic tokens Github access Tokens and perform the following command: <pre><code>babylon hvac set global github token [github_pat_token]\n</code></pre></p> <p>This macro requires a github repository with the destination branch already created  </p> <ol> <li>create a new repository in Github  </li> <li>configure your branch <code>&lt;BRANCH&gt;</code> with the source code. (example: https://github.com/Cosmo-Tech/azure-sample-webapp.git) <pre><code>git init\necho \"# empty_webapp\" &gt;&gt; README.md\ngit add README.md\ngit commit -m \"add readme\"\ngit branch -M main\ngit remote add origin git@github.com:&lt;YOUR_GITHUB_REPOSITORY&gt;.git\ngit remote add upstream https://github.com/Cosmo-Tech/azure-sample-webapp.git\ngit remote set-url upstream --push \"NO\"\ngit fetch --all --prune\ngit checkout -B &lt;BRANCH&gt; &lt;SOURCE_TAG&gt;\nrm -r .github/\ngit add .; git commit -m 'first commit'\ngit push origin &lt;BRANCH&gt; -f\n</code></pre></li> </ol> <p>Now, setup the webapp configuration</p> <p><pre><code>babylon -c brewery -p staging config set azure function_artifact_url &lt;uri_artifact_zip&gt; \nbabylon -c brewery -p staging config set webapp deployment_name &lt;changeme&gt;\nbabylon -c brewery -p staging config set webapp location &lt;changeme&gt;\nbabylon -c brewery -p staging config set github branch &lt;changeme&gt;\nbabylon -c brewery -p staging config set github organization &lt;changeme&gt;\nbabylon -c brewery -p staging config set github repository &lt;changeme&gt;\nbabylon -c brewery -p staging webapp deploy\n\nbabylon -c brewery -p staging powerbi workspace user add %app%principal_id App Admin\n</code></pre> Get additional information about command </p> </li> </ul> <p></p> <ul> <li> <p>** Retrieve azure function key ** </p> <p>Requirements</p> <p>Azure CLI</p> <pre><code>azf_key=$(az functionapp keys list \\ \n    -g &lt;yout\u00e7resource_group&gt; \\\n    -n &lt;organization_id&gt;-&lt;workspace_key&gt; --query masterKey)\n\nbabylon hvac -c &lt;context_id&gt; -p &lt;platfom_id&gt; set project func $azf_key\n</code></pre> </li> </ul> <p>In this point, you can create a new solution or retrieve a solution already created</p> <ul> <li> <p>** Create solution **  <pre><code>babylon api -c brewery -p staging solutions payload create\nbabylon api -c brewery -p staging solutions create &lt;solution_name&gt;\n</code></pre></p> </li> <li> <p>** Retrieve solution **  <pre><code>babylon api -c brewery -p staging solutions get &lt;solution_id&gt;\n</code></pre></p> </li> <li> <p>** Create new Workspace **  <pre><code>babylon config -c brewery -p staging set api run_templates \\\n    -i \"1\" \\\n    -i \"2\" \\\n    -i \"3\"\n\nbabylon api -c brewery -p staging workspaces payload create\nbabylon api -c brewery -p staging workspaces create &lt;changeme&gt;\n\n\n# register the key into workspace \nbabylon api -c brewery -p staging workspaces send-key\n</code></pre></p> </li> </ul>"},{"location":"guides/create_update_solution/","title":"Solution deployment","text":"<p>Remember</p> <p>You have to choose the platform and project you want to work. Contact your babylon admin to know more about your options.</p> <p>In this example, we will use</p> <ul> <li>context_id: <code>test</code></li> <li>platform_id: <code>dev</code></li> <li>state_id: <code>teststate</code></li> </ul> <p>To deploy a complete Cosmo Tech solution, you can declare its configuration in yaml files corresponding to specific deployment type. Each file contains general information about the deployment:</p> <pre><code>kind: Organization\nremote: true   # false by default\nnamespace:\n  state_id: \"{{state_id}}\"\n  context: demo\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\n</code></pre> <p>The <code>kind</code> key must be one of these: Organization, Solution, Workspace, WebApp, Dataset - it decides which resource will be deployed with specification listed below. Note that the type of resource must always start with capital letter. <code>namespace</code> key gives information that identifies the deployment: state, context and platform.</p> <p><code>remote</code> key, it's a boolean variable to indicate if you want to store the state only locally or locally and in the cloud as well. By default is false (local state).</p> <p>Then, each file declares resource configuration under <code>spec</code> key, specifically in the <code>payload</code> section, e.g., in organization deployment file:</p> <pre><code>kind: Organization\nremote: true   # false by default\nnamespace:\n  state_id: \"{{state_id}}\"\n  context: demo\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nspec:\n  payload:\n    name: My new Organization\n    security: {{security}}\n</code></pre> <p>All keys in this file can be templated with <code>{{}}</code> syntax for objects and <code>\"{{}}\"</code> for strings, as <code>security</code> section of this file. Corresponding values must be stored in variables.yaml file at the same level that your project:</p> <pre><code>security:\n  default: viewer\n  accessControlList:\n    - id: user@email.com\n      role: admin\n    - id: user2@email.com\n      role: editor\n</code></pre> <p>This is how the solution deployment file is structured:</p> <p><pre><code>kind: Solution\nremote: true   # false by default\nnamespace:\n  state_id: \"{{state_id}}\"\n  context: demo\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"{{workspace_key}}\"\nspec:\n  sidecars:\n    azure:\n      run_templates:\n        - id: run_template_id\n          handlers:\n            preRun: true\n  payload:\n    key: \"demosolution\"\n    name: \"My Solution Name\"\n    description: \"My solution description\"\n    repository: brewery_for_continuous\n    version: latest\n    tags:\n      - brewery\n    runTemplates:\n      - id: \"run_id\"\n        name: \"Standard simulation\"\n        csmSimulation: AzureWebApp/AzureWebApp_Simulation\n        run: true\n        preRun: true\n    parameterGroups:\n    security:\n      default: none\n      accessControlList:\n        - id: e-mail@cosmotech.com\n          role: admin\n</code></pre> The <code>metadata</code> section contains data specific to each deployment section. This section can be found in the following deployment files: <code>solution.yaml</code>, <code>workspace.yaml</code>, and <code>webapp.yaml</code>.</p> <p>The <code>workspace_key</code> parameter must be included in each metadata. If <code>workspace_key</code> parameter is empty, the deployment will fail.</p> <p>Run templates are enumerated under <code>sidecars</code> key which lists every side resources needed for the correct functioning of the solution. Run templates scripts must be placed in run_templates folder of your project with the following path: run_templates/run_template_id/handler_id/script_file</p> <p>Workspace configuration contains keys needed to deploy a powerBI workspaces, an event hub and an adx database. These keys are stored in <code>sidecars</code> section, under <code>azure</code> key.</p> <pre><code>kind: Workspace\nremote: true   # false by default\nnamespace:\n  state_id: \"{{state_id}}\"\n  context: demo\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"{{workspace_key}}\"\nspec:\n  sidecars:\n    azure:\n      powerbi:\n        workspace:\n          name: \"My workspace Powerbi Name\"\n          reports:\n            - name: Report Name A\n              type: dashboard\n              path: \"powerbi/myreportA.pbix\"\n              tag: \"myReportATag\"\n              parameters:\n                - id: \"ADX_Cluster\"\n                  value: \"https://{{services['adx.cluster_name']}}.westeurope.kusto.windows.net\"\n                - id: \"ADX_Database\"\n                  value: \"{{services['api.organization_id']}}-{{key}}\"\n          permissions:\n            - identifier: \"e-mail@cosmotech.com\"\n              rights: Admin\n              type: User\n            - identifier: \"&lt;guid&gt;\"\n              description: \"Object Id of Service Principal WebApp\"\n              rights: Admin\n              type: App\n      adx:\n        database:\n          uri: https://&lt;name&gt;.&lt;location&gt;.kusto.windows.net  # URI Azure Data Explorer Cluster\n          create: true\n          retention: 365\n          permissions:\n            - type: User\n              email: e-mail@cosmotech.com\n              principal_id: \"412f3fad-3ce3-410a-994c-2a36bccaa0b2\"\n              role: Admin\n            - type: App\n              description: \"Cosmo Tech Platform &lt;some-platform&gt; For &lt;some-tenant&gt;\"\n              principal_id: \"&lt;guid&gt;\"\n              role: Admin\n          scripts:\n            - id: \"demoscript\"\n              name: Create.kql\n              path: \"adx/scripts\"\n      eventhub:\n        consumers:\n          - displayName: adx\n            entity: ProbesMeasures\n          - displayName: adx\n            entity: ScenarioMetadata\n          - displayName: adx\n            entity: ScenarioRun\n          - displayName: adx\n            entity: ScenarioRunMetadata\n        connectors:\n          - table_name: ProbesMeasures\n            consumer_group: adx\n            connection_name: ProbesMeasures\n            database_target: \"{{services['api.organization_id']}}-{{key}}\"\n            format: JSON\n            compression: Gzip\n            mapping: ProbesMeasuresMapping\n          - table_name: ScenarioMetadata\n            consumer_group: adx\n            connection_name: ScenarioMetadata\n            database_target: \"{{services['api.organization_id']}}-{{key}}\"\n            format: CSV\n            compression: None\n            mapping: ScenarioMetadataMapping\n          - table_name: SimulationTotalFacts\n            consumer_group: adx\n            connection_name: ScenarioRun\n            database_target: \"{{services['api.organization_id']}}-{{key}}\"\n            format: JSON\n            compression: None\n            mapping: SimulationTotalFactsMapping\n          - table_name: ScenarioRunMetadata\n            consumer_group: adx\n            connection_name: ScenarioRunMetadata\n            database_target: \"{{services['api.organization_id']}}-{{key}}\"\n            format: CSV\n            compression: None\n            mapping: ScenarioRunMetadataMapping\n  payload:\n    key: \"{{key}}\"\n    name: \"My Workspace Name\"\n    description: \"Workspace for solution\"\n    solution:\n      solutionId: \"{{services['api.solution_id']}}\"\n    useDedicatedEventHubNamespace: true\n    sendScenarioMetadataToEventHub: true\n    sendInputToDataWarehouse: true\n    sendScenarioRunToEventHub: true\n    security:\n      default: none\n      accessControlList:\n        - id: e-mail@cosmotech.com\n          role: admin\n</code></pre> <p>Path to existing powerBI reports could be declared in <code>powerBI</code> section of sidecars; </p> <p>NOTE : It's important to know that Babylon can now automatically retrieve the report IDs when deploying Power BI reports. It can reference these report IDs to DashboardViews and ScenarioViews section without requiring manual intervention as before.</p> <p>To do that, you need to integrate a unique identifier for the report, called a <code>tag</code>, into each imported PowerBI report, and use this tag to link the PowerBI report ID you wish to use in (dashboardsView and scenarioView) section. see example below :</p> <pre><code>#example\nkind: Workspace\nremote: true   # false by default\nnamespace:\n  state_id: \"{{state_id}}\"\n  context: demo\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"{{workspace_key}}\"\nspec:\n  sidecars:\n    azure:\n      powerbi:\n        workspace:\n          name: \"My workspace Powerbi Name\"\n          reports:\n            - name: Report Name A\n              type: dashboard\n              path: \"powerbi/myreportA.pbix\"\n              tag: \"myReportATag\" # Here, you should add the tag corresponding to this Power BI report\n              parameters:\n                - id: \"ADX_Cluster\"\n                  value: \"https://{{services['adx.cluster_name']}}.westeurope.kusto.windows.net\"\n                - id: \"ADX_Database\"\n                  value: \"{{services['api.organization_id']}}-{{key}}\"\n</code></pre> <p>This referencing will be accomplished using a second variable called <code>reportTag</code> in your dashboardsView and scenarioView sections, as illustrated in the example below. This variable should correspond to the Power BI report tag you intend to use. Therefore, Babylon will handle everything automatically.</p> <pre><code>#example\nkind: Workspace\n#......etc\n  charts:\n    workspaceId: \"{{services['powerbi.workspace.id']}}\"\n    logInWithUserCredentials: false\n    scenarioViewIframeDisplayRatio: 3.2\n    dashboardsViewIframeDisplayRatio: 1.8285714285714283\n    dashboardsView:\n      - title:\n          en: Scorecard\n          fr: Tableau de bord\n        reportTag: \"myReportATag\" # Here, you should use the tag corresponding to this Power BI report\n        settings:\n          navContentPaneEnabled: true\n          panes:\n            filters:\n              expanded: false\n              visible: false\n...\n</code></pre> <p>adx script must be in adx folder of your project.</p> <p>Remember</p> <p>Some operations could fail if Babylon doesn't have enough rights to create Azure resources.  To create automatically an adx database, an azure function or an event hub, Babylon must be at least on Contributor  level. Owner rights allow it to assign roles to resources. If you security policy doesn't grant such access to Babylon, these operations must be done manually. </p> <p>To deploy a webapp you can create a new app registration or use an existing one; it can be declared by <code>create</code> key of <code>sidecars.azure.app</code> section. If it is set to false, a <code>client_id</code> and a <code>name</code> of your app registration must be declared.</p> <p>Requirements</p> <p>Webapp deployment requires a GitHub repository with the destination branch. You can follow these steps to create it:</p> <ol> <li>create a new repository in Github</li> <li>configure your branch <code>&lt;BRANCH&gt;</code> with code source (e.g https://github.com/Cosmo-Tech/azure-sample-webapp.git)</li> </ol> <pre><code>    git init\n</code></pre> <pre><code>    echo \"# empty_webapp\" &gt;&gt; README.md\n</code></pre> <pre><code>    git add README.md\n</code></pre> <pre><code>    git commit -m \"first commit\"\n</code></pre> <pre><code>    git branch -M &lt;BRANCH&gt;\n</code></pre> <pre><code>    git remote add origin git@github.com:&lt;YOUR_GITHUB_REPOSITORY&gt;.git\n</code></pre> <pre><code>    git remote add upstream https://github.com/Cosmo-Tech/azure-sample-webapp.git\n</code></pre> <pre><code>    git remote set-url upstream --push \"NO\"\n</code></pre> <pre><code>    git fetch --all --tags --prune\n</code></pre> <pre><code>    git checkout -B &lt;BRANCH&gt; &lt;SOURCE_TAG&gt;\n</code></pre> <pre><code>    rm -r .github/\n</code></pre> <pre><code>    git add .; git commit -m 'first commit'\n</code></pre> <pre><code>    git push origin &lt;BRANCH&gt; -f\n</code></pre> <p>Then, you can use this repository to deploy a new webapp:</p> <pre><code>kind: WebApp\nremote: true   # false by default\nnamespace:\n  state_id: \"{{state_id}}\"\n  context: demo\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"{{workspace_key}}\"\nspec:\n  sidecars:\n    github:\n      organization_name: Cosmo-Tech\n      repository_name: azure-webapp-engineering-brewery-deployments\n      branch: brewery\n    powerbi:\n      group_id: changement\n      settings:\n        properties:\n          POWER_BI_SCOPE: \"https://analysis.windows.net/powerbi/api/.default\"\n          POWER_BI_AUTHORITY_URI: https://login.microsoftonline.com/common/v2.0\n          POWER_BI_WORKSPACE_ID: \"{{services['powerbi.workspace.id']}}\"\n          POWER_BI_CLIENT_ID: \"{{services['app.app_id']}}\"\n          POWER_BI_CLIENT_SECRET: \"{{secret_powerbi}}\"\n          POWER_BI_TENANT_ID: \"{{services['azure.tenant_id']}}\"\n    azure:\n      app:\n        create: false\n        use:\n          displayName: thisismyappforcontinuous\n          client_id: \"3d0531b1-d23b-4baf-98be-a764c0a42f00\"\n        principal_id: \"{{services['app.principal_id']}}\"\n        add_to_powerbi: true\n        payload:\n          displayName: thisismyappforcontinuous\n          signInAudience: AzureADMyOrg\n          spa:\n            redirectUris:\n              - http://localhost:3000/sign-in\n          requiredResourceAccess:\n            - resourceAppId: \"{{services['platform.app_id']}}\"\n              resourceAccess:\n                - id: \"{{services['platform.scope_id']}}\"\n                  type: Scope\n      function:\n        url_zip: \"https://github.com/Cosmo-Tech/supplychain-azure-function-dataset-download/releases/download/2.1.10/artifact.zip\"\n    config:\n      REACT_APP_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY: \"{{services['webapp.insights_instrumentation_key']}}\"\n      REACT_APP_ENABLE_APPLICATION_INSIGHTS: \"{{services['webapp.enable_insights']}}\"\n      REACT_APP_APP_REGISTRATION_CLIENT_ID: \"{{services['app.app_id']}}\"\n      REACT_APP_AZURE_TENANT_ID: \"{{services['azure.tenant_id']}}\"\n      REACT_APP_COSMOTECH_API_SCOPE: \"{{services['api.scope']}}\"\n      REACT_APP_DEFAULT_BASE_PATH: \"{{services['api.url']}}\"\n      REACT_APP_ORGANIZATION_ID: \"{{services['api.organization_id']}}\"\n      REACT_APP_WORKSPACES_IDS_FILTER: \"\"\n      REACT_APP_APP_VERSION: \"\"\n      REACT_APP_ORGANIZATION_URL: \"{{services['api.organization_url']}}\"\n      REACT_APP_DOCUMENTATION_URL: https://cosmotech.com\n      REACT_APP_SUPPORT_URL: https://support.cosmotech.com\n  payload:\n    name: \"my-webapp-for-continuous\"\n    location: westeurope\n    properties:\n      repositoryUrl: https://github.com/Cosmo-Tech/azure-webapp-engineering-brewery-deployments\n      branch: brewery\n      repositoryToken: \"{{github_secret}}\"\n      buildProperties:\n        appLocation: \"/\"\n        apiLocation: api\n        appArtifactLocation: build\n    sku:\n      name: Standard\n      tier: Standard\n</code></pre> <p>To deploy one or multiple datasets, one yaml file is needed by dataset. Four sourceType of datasets are available:</p> <ul> <li>ADT - creates dataset from ADT</li> <li>AzureStorage - creates dataset with Azure Storage</li> <li>File - creates dataset from a local file</li> <li>None - creates an empty dataset</li> </ul> <pre><code>kind: Dataset\nremote: true   # false by default\nnamespace:\n  state_id: \"{{state_id}}\"\n  context: demo\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nspec:\n  sidecars:\n    azure:\n      dataset:\n        storage:\n          local_path: # needed if you want to upload your local dataset to AzureStorage\n        file:\n          local_path: # needed for datasets with sourceType File\n  payload:\n    id: # mandatory if you want to launch an update, without id a new dataset will be created ; if you want a new dataset, leave this field empty\n    name: Apply dataset\n    description: Creating dataset with nothing but update\n    sourceType: None | AzureStorage | ADT | File\n    source:\n      path:# path to the folder in AzureStorage, mandatory if sourceType is AzureStorage\n        # and no local file is provided\n      location: # mandatory field if sourceType is ADT: path to dataset stored in ADT;\n        # if sourceType is AzureStorage, default value is set to organization\n        # container, you can edit this field if you want to use a dataset from\n        # another container\n      name: # field used for sourceType AzureStorage, by default is set to storage account\n        # name referenced in state; edit it if you want to use a dataset from another\n        # account\n    security:\n      default: viewer\n      accessControlList:\n        - id: e-mail@cosmotech.com\n          role: admin\n</code></pre> <p>Project folder must have this structure:</p> <pre><code> \u251c\u2500\u2500 my-deployment\n    \u251c\u2500\u2500 project\n        \u251c\u2500\u2500 organization.yaml\n        \u251c\u2500\u2500 solution.yaml\n        \u251c\u2500\u2500 workspace.yaml\n        \u251c\u2500\u2500 webapp.yaml\n        \u251c\u2500\u2500 dataset1.yaml\n        \u251c\u2500\u2500 dataset2.yaml\n        \u251c\u2500\u2500 run_templates\n            \u251c\u2500\u2500 run-template-id\n                \u251c\u2500\u2500 run\n            \u251c\u2500\u2500 adx\n                \u251c\u2500\u2500 scripts\n            \u251c\u2500\u2500 powerbi\n    \u251c\u2500\u2500 variables.yaml\n</code></pre> <p>After filling all deployment files, you can launch the following command:</p> <pre><code>babylon apply project/\n</code></pre> <p>Babylon will create and deploy all resources and save it in the state except for datasets. Keeping this information in the state simplifies modification of the resources as you can edit one of the project deployment files and relaunch <code>babylon apply</code> command. It will update existing resources or create missing ones, for example, in case when Babylon was granted more rights between two <code>apply</code> commands.</p> <p>You can also specify different variable files when launching the <code>babylon apply</code> command. To do this, use the <code>--var-file</code> option.</p> <pre><code>babylon apply project/ --var-file variable_file_1.yaml --var-file variable_file_2.yaml\n</code></pre> <p>NOTE : If you don't specify a variable file, Babylon will use the default variable file variables.yaml.</p>"},{"location":"guides/create_update_solution_with_existing_organization/","title":"Deployment with existing organization","text":"<p>Remember</p> <p>You have to choose the platform and project you want to work. Contact your babylon admin to know more about your options.</p> <p>In this example, we will use</p> <ul> <li>context_id: <code>demo</code></li> <li>platform_id: <code>dev</code></li> <li>state_id: <code>teststate</code></li> </ul>"},{"location":"guides/create_update_solution_with_existing_organization/#deploying-a-solution-with-an-existing-organization","title":"Deploying a solution with an existing organization","text":"<p>To deploy a new solution within an existing organization, you can declare its configuration in the YAML files corresponding to the solution. In this case, you need to add a new field, <code>metadata</code>, to the <code>solution.yaml</code> file.</p> <p>The <code>metadata</code> section contains data specific to each deployment. It can be found in the <code>solution.yaml</code>, <code>workspace.yaml</code>, and <code>webapp.yaml</code> files.</p> <p>The <code>workspace_key</code> parameter must be included in each metadata. If <code>workspace_key</code> parameter is empty, the deployment will fail. </p> <p><code>Note</code>: In the <code>metadata</code>, there is another section called <code>selector</code>. Here, we can add the important field <code>organization_id</code>, which allows us to deploy a solution within an existing organization. The user should specify and add <code>organization_id</code> to the <code>variables.yaml</code> file, and ensure that organization deployment is deactivated.</p> <pre><code>kind: Solution\nremote: true   # false by default\nnamespace:\n  state_id: \"{{state_id}}\"\n  context: demo\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"{{workspace_key}}\"\n  selector:\n    organization_id: \"{{organization_id}}\"\nspec:\n  sidecars:\n    azure:\n      run_templates:\n        - id: run_template_id\n          handlers:\n            preRun: true\n  payload:\n    key: \"demosolution\"\n    name: \"My Solution Name\"\n    description: \"My solution description\"\n    repository: brewery_for_continuous\n    version: latest\n    tags:\n      - brewery\n    runTemplates:\n      - id: \"run_id\"\n        name: \"Standard simulation\"\n        csmSimulation: AzureWebApp/AzureWebApp_Simulation\n        run: true\n        preRun: true\n    parameterGroups:\n    security:\n      default: none\n      accessControlList:\n        - id: e-mail@cosmotech.com\n          role: admin\n</code></pre>"},{"location":"guides/create_update_solution_with_existing_organization/#deploying-a-workspace-with-an-existing-solution-and-organization","title":"Deploying a workspace with an existing solution and organization","text":"<p>Similarly, if you want to deploy a new workspace within an existing organization and solution, it is now possible. You should add the <code>organization_id</code> and <code>solution_id</code> in <code>metadata.selector</code> and reference the <code>organization_id</code> and <code>solution_id</code> declared in <code>variables.yaml</code>, and ensure that organization and solution deployment is deactivated.</p> <p><pre><code>kind: Workspace\nremote: true   # false by default\nnamespace:\n  state_id: \"{{state_id}}\"\n  context: demo\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"{{workspace_key}}\"\n  selector:\n    organization_id: \"{{organization_id}}\"\n    solution_id: \"{{solution_id}}\"\nspec:\n  sidecars:\n    azure:\n      powerbi:\n        workspace:\n          name: \"My workspace Powerbi Name\"\n          reports:\n            - name: Report Name A\n              type: dashboard\n              path: \"powerbi/myreportA.pbix\"\n              parameters:\n                - id: \"ADX_Cluster\"\n                  value: \"https://{{services['adx.cluster_name']}}.westeurope.kusto.windows.net\"\n                - id: \"ADX_Database\"\n                  value: \"{{services['api.organization_id']}}-{{key}}\"\n          permissions:\n            - identifier: \"e-mail@cosmotech.com\"\n              rights: Admin\n              type: User\n            - identifier: \"&lt;guid&gt;\"\n              description: \"Object Id of Service Principal WebApp\"\n              rights: Admin\n              type: App\n      adx:\n        database:\n          uri: https://&lt;name&gt;.&lt;location&gt;.kusto.windows.net  # URI Azure Data Explorer Cluster\n          create: true\n          retention: 365\n          permissions:\n            - type: User\n              email: e-mail@cosmotech.com\n              principal_id: \"412f3fad-3ce3-410a-994c-2a36bccaa0b2\"\n              role: Admin\n            - type: App\n              description: \"Cosmo Tech Platform &lt;some-platform&gt; For &lt;some-tenant&gt;\"\n              principal_id: \"&lt;guid&gt;\"\n              role: Admin\n          scripts:\n            - id: \"demoscript\"\n              name: Create.kql\n              path: \"adx/scripts\"\n      eventhub:\n        consumers:\n          - displayName: adx\n            entity: ProbesMeasures\n          - displayName: adx\n            entity: ScenarioMetadata\n          - displayName: adx\n            entity: ScenarioRun\n          - displayName: adx\n            entity: ScenarioRunMetadata\n        connectors:\n          - table_name: ProbesMeasures\n            consumer_group: adx\n            connection_name: ProbesMeasures\n            database_target: \"{{services['api.organization_id']}}-{{key}}\"\n            format: JSON\n            compression: Gzip\n            mapping: ProbesMeasuresMapping\n          - table_name: ScenarioMetadata\n            consumer_group: adx\n            connection_name: ScenarioMetadata\n            database_target: \"{{services['api.organization_id']}}-{{key}}\"\n            format: CSV\n            compression: None\n            mapping: ScenarioMetadataMapping\n          - table_name: SimulationTotalFacts\n            consumer_group: adx\n            connection_name: ScenarioRun\n            database_target: \"{{services['api.organization_id']}}-{{key}}\"\n            format: JSON\n            compression: None\n            mapping: SimulationTotalFactsMapping\n          - table_name: ScenarioRunMetadata\n            consumer_group: adx\n            connection_name: ScenarioRunMetadata\n            database_target: \"{{services['api.organization_id']}}-{{key}}\"\n            format: CSV\n            compression: None\n            mapping: ScenarioRunMetadataMapping\n  payload:\n    key: \"{{key}}\"\n    name: \"My Workspace Name\"\n    description: \"Workspace for solution\"\n    solution:\n      solutionId: \"{{services['api.solution_id']}}\"\n    useDedicatedEventHubNamespace: true\n    sendScenarioMetadataToEventHub: true\n    sendInputToDataWarehouse: true\n    sendScenarioRunToEventHub: true\n    security:\n      default: none\n      accessControlList:\n        - id: e-mail@cosmotech.com\n          role: admin\n</code></pre> Note : Make sure you have already add those variable in <code>variables.yaml</code> file : </p> <pre><code># example\nstate_id: \u2018\u2019\nworkspace_key: \u2018\u2019\nsolution_key: \u2018\u2019\nsimulator: \u2018\u2019\nsimulator_version: \u2018\u2019\norganization_id: o-djwr88wl60go\nsolution_id: sol-g1d93qee34yx\n</code></pre>"},{"location":"guides/create_update_solution_with_existing_organization/#standard-deployment-including-organization-and-solution-creation","title":"Standard deployment including organization and solution creation","text":"<p>If you want to perform a standard deployment from scratch, including creating an organization and solution, ensure that in the <code>solution.yaml</code> and <code>workspace.yaml</code> files, within the <code>metadata.selector</code> section, point directly to the <code>state</code> instead of referencing <code>variables.yaml</code>, as follows:</p> <pre><code>kind: Solution\nremote: true   # false by default\nnamespace:\n  state_id: \"{{state_id}}\"\n  context: demo\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"{{workspace_key}}\"\n  selector:\n    organization_id: \"{{services['api.organization_id']}}\"\nspec:\n  sidecars:\n    azure:\n      run_templates:\n        - id: run_template_id\n          handlers:\n            preRun: true\n            .............................\n</code></pre> <p>The same action for <code>workspace.yaml</code> :</p> <pre><code>kind: Workspace\nremote: true   # false by default\nnamespace:\n  state_id: \"{{state_id}}\"\n  context: demo\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"{{workspace_key}}\"\n  selector:\n    organization_id: \"{{services['api.organization_id']}}\"\n    solution_id: \"{{services['api.solution_id']}}\"\nspec:\n  sidecars:\n    azure:\n      powerbi:\n        workspace:\n          name: \"My workspace Powerbi Name\"\n          reports:\n            - name: Report Name A\n              type: dashboard\n              path: \"powerbi/myreportA.pbix\"\n              parameters:\n                - id: \"ADX_Cluster\"\n                  value: \"https://{{services['adx.cluster_name']}}.westeurope.kusto.windows.net\"\n                - id: \"ADX_Database\"\n                  value: \"{{services['api.organization_id']}}-{{key}}\"\n          permissions:\n            - identifier: \"e-mail@cosmotech.com\"\n              rights: Admin\n              type: User\n            - identifier: \"&lt;guid&gt;\"\n              description: \"Object Id of Service Principal WebApp\"\n              rights: Admin\n              type: App\n              ....................................\n</code></pre>"},{"location":"guides/destroy_solution/","title":"Destroy a solution","text":"<p>If you don't need a Cosmo Tech solution anymore, you can destroy it with all resources using  <code>babylon destroy</code> command. It will automatically delete following resources: - scenarios and scenarioruns - datasets - adx database - event hub - azure function - webapp - powerbi workspace - workspace - run templates - solution</p> <p>By default, it will destroy resources referenced in state saved in namespace file, but you can define a specific state as option:</p> <pre><code>babylon destroy -s &lt;state_id&gt;\n</code></pre>"},{"location":"guides/getting_started/","title":"Getting started with Babylon","text":"<p>This is a guide to getting started with Babylon. You'll learn how to install, run, and experiment with the Babylon.</p>"},{"location":"guides/getting_started/#azure-requirements","title":"Azure requirements","text":"<p>Requirements</p> <p>The following elements are required before you can use Babylon on an Azure subscription</p> <ul> <li> <p>Fully set up Cosmo Tech Platform installed on your Azure Tenant</p> </li> <li> <p>App registration for Babylon</p> </li> </ul> <p>Babylon uses a Service Principal to interact with the API and other resources. To do so, Babylon needs to be registered as an application in the Azure Active Directory.</p> <p>This App Registration will be used to authenticate and get the required tokens to connect to your Platform. Rights on the App Registration depends on the type of connection you want to make. </p> <p>We recommend defining this app registration as a mobile and desktop application in Azure configuration with redirection URL (mostly for authenticating against Azure services.</p> <p>See official documentation :</p> <pre><code>* https://learn.microsoft.com/en-us/entra/identity-platform/v2-oauth2-auth-code-flow\n* https://learn.microsoft.com/en-us/entra/identity-platform/msal-client-application-configuration\n* https://learn.microsoft.com/en-us/onedrive/developer/rest-api/getting-started/msa-oauth?view=odsp-graph-online\n</code></pre> <p>The App registration needs the following API permissions:</p> <ul> <li> <p>Microsoft Graph</p> <ul> <li>Application.ReadWrite.All (Application)</li> <li>Application.ReadWrite.OwnedBy (Application)</li> <li>Group.ReadWrite.All (Application)</li> </ul> </li> <li> <p>Platform Api</p> <ul> <li>Platform.Admin (Application)</li> </ul> </li> </ul> <p>For those concerned with specifics Azure policies, all Microsoft Graph's permissions can be deleted excepted User.Read.All (Application), but this implies that some operations would be handled manually. The platform API permission is mandatory.</p> <p>Important</p> <p>Babylon App registration needs at least Contributor role on Cosmo Tech Platform Resource Group.</p>"},{"location":"guides/getting_started/#get-babylon-from-source","title":"Get Babylon from source","text":"<p>Requirements</p> <ul> <li>Python 3.10+</li> <li>Pip 22.2+</li> <li>Git (latest version)</li> </ul> <p>We will go through the process of getting a version of Babylon before the installation.</p> <p>Get sources from git</p> <p>You can download the latest version of Babylon using git clone command</p> <p><pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git babylon\n</code></pre> <pre><code>cd babylon\n</code></pre></p> <p>Get the specific version from git</p> <p>If you want a specific version of Babylon (3.0.0 for example)</p> <pre><code>git clone -b 3.0.0 git@github.com:Cosmo-Tech/Babylon.git babylon\n</code></pre> <pre><code>cd babylon\n</code></pre>"},{"location":"guides/getting_started/#install-babylon","title":"Install Babylon","text":"<p>You can install babylon globally in your system</p> <pre><code>pip install .\n</code></pre> <p>Now that you have a fully functional installation of Babylon, you can check the next steps to learn how to start running commands.</p>"},{"location":"guides/getting_started/#setup-babylon","title":"Setup Babylon","text":"<p>Babylon use a Vault service and provides a group of commands that can be used.</p> <p>The first thing to do in order to check if Babylon is working properly: <pre><code>babylon --help\n</code></pre></p>"},{"location":"guides/getting_started/#setup-environment-variables","title":"Setup environment variables","text":"<p>The vault service is required to work with babylon cli. Contact your babylon admin to get your URI service and your userpass.</p> <ul> <li>Set URI vault service.   <pre><code>export BABYLON_SERVICE=&lt;uri_babylon_vault_server&gt;\n</code></pre></li> </ul> <p>Now, you will need set some environment variables before interacting with Babylon cli.   To do so, perform the login command.</p> <ul> <li> <p>Login and get an access token. <pre><code>babylon hvac login\n</code></pre>   questions:    <pre><code>[?] Username: &lt;username&gt;\n[?] Password: ****\n[?] Organization: &lt;organization_name&gt;\n</code></pre>   Copy the response and paste it in your environment.</p> </li> <li> <p>If entries does not exist, you may need to create it (e.g. for a newly deployed platform):   We provide a tool for this, you can find it here   This needs an initial Terraform deployment as it uses the Terraform state to parse and populate the Vault.   Useful information can be found in the Readme of this repository !</p> </li> </ul>"},{"location":"guides/getting_started/#configuration","title":"Configuration","text":"<p>At this point, you will need three variables to perform Babylon commands.</p> <ul> <li><code>context_id</code> : project name</li> <li><code>platform_id</code> : platform name</li> <li><code>state_id</code>: state name</li> </ul> <p><code>context_id</code> and <code>state_id</code> can be strings of your choice, but they cannot contain special characters. <code>platform_id</code> represents the id of the platform, such as dev, staging, etc. To initialize it, perform this command:   <pre><code>babylon namespace use -c &lt;context_id&gt; -p &lt;platform_id&gt; -s &lt;state_id&gt;\n</code></pre></p> <p>It will be saved in a local file /home/.config/cosmotech/babylon/namespace.yaml</p> <p>You can now test Babylon by performing a simple command, e.g.:   <pre><code>babylon api organizations get-all\n</code></pre> Initial configuration will be retrieved from vault and saved in Azure Storage and in local file <code>/home/.config/cosmotech/babylon/state_id.yaml</code></p>"},{"location":"guides/getting_started/#state-file-specification","title":"State file specification","text":"<p>If state file doesn't exist, the first babylon command you launch will create one and store it in Azure Storage and in <code>/home/.config/cosmotech/babylon/&lt;state_id&gt;.yaml</code> file in local.</p> <p>You will find three main sections: <pre><code>files: []\nid: teststate\nservices:\n</code></pre> The last one contains following keys with some information already prefilled with data from vault:</p> <p>Azure Container Registry </p> <pre><code>  acr:\n    login_server: \n    simulator_repository: \n    simulator_version: \n</code></pre> <p>Azure Digital Twins </p> <pre><code>  adt:\n    built_owner_id: \n    built_reader_id: \n    digital_twin_url:  \n</code></pre> <p>Azure Explorer Database</p> <pre><code>  adx:\n    built_contributor_id: \n    built_owner_id: \n    cluster_name: \n    cluster_principal_id: \n    cluster_uri: \n    database_name: \n</code></pre> <p>Cosmotech API </p> <pre><code>  api:\n    connector.adt_id: \n    connector.adt_version: \n    connector.storage_id: \n    connector.storage_version: \n    connector.twin_id: \n    connector.twin_version: \n    dataset.adt_id: \n    dataset.storage_id: \n    dataset.twin_id: \n    organization_id: \n    organization_url: \n    run_templates: \n    scope: \n    send_scenario_metadata_to_event_hub: \n    solution_id: \n    url: \n    use_dedicated_event_hub_namespace: \n    workspace_id: \n    workspace_key: \n</code></pre> <p>Azure App Registration</p> <pre><code>  app:\n    app_id: \n    name: \n    object_id: \n    principal_id: \n</code></pre> <p>Azure </p> <pre><code>    azure:\n      cli_client_id:\n      email: \n      eventhub_built_contributor_id:\n      eventhub_built_data_receiver:\n      eventhub_built_data_sender:\n      function_artifact_url: \n      resource_group_name: \n      resource_location: \n      storage_account_name: \n      storage_blob_reader: \n      subscription_id:\n      team_id:\n      user_principal_id: \n</code></pre> <p>Azure Babylon App Registration </p> <pre><code>    babylon:\n      client_id: \n      principal_id: \n</code></pre> <p>Github </p> <pre><code>    github:\n      branch: \n      organization: \n      repository: \n      run_url: \n      workflow_path: \n</code></pre> <p>Cosmotech Platform </p> <pre><code>    platform:\n      app_id: \n      principal_id: \n      scope_id: \n</code></pre> <p>PowerBI</p> <pre><code>    powerbi:\n      dashboard_view: \n      scenario_view: \n      scope: \n      workspace.id:\n      workspace.name:\n</code></pre> <p>WebApp </p> <pre><code>    webapp:\n      deployment_name: \n      enable_insights: \n      hostname: \n      insights_instrumentation_key: \n      location: \n      static_domain: \n</code></pre>"},{"location":"guides/powerbi_report_config/","title":"Configuring PowerBI reports","text":"<p>Info</p> <p>To follow this guide you should be familiar with PowerBI</p> <p>In order to facilitate the creation of Power BI reports and the migration of reports between environments, a few guidelines should be followed.</p> <p>This guidelines will also ensure that your PowerBI report is compatible with Babylon.</p> <p>The whole process is automated along with PowerBI workspace creation in PowerBI deploy-workspace</p>"},{"location":"guides/powerbi_report_config/#create-power-bi-reports-in-power-bi-desktop","title":"Create Power BI reports in Power BI desktop","text":"<p>Within PowerBI Desktop</p> <ol> <li>Create a new Power BI report</li> <li>Go to section Transform Data for managing data sources. </li> <li>Create parameters in the report <ol> <li>Create parameter ADX_cluster: URL of the ADX cluster (e.g.: phoenixdev.westeurope.kusto.windows.net)</li> <li>Create parameter ADX_database: Name of the ADX database (e.g.: o-xxxxxxxx-brewerydemo) </li> </ol> </li> <li>Create a new Data Source of type Azure &gt; Azure Data Explorer (Kusto). </li> <li>Enter the exact value for ADX Cluster, ADX Database and ADX Table (e.g. ScenarioMetadata).</li> <li>Select DirectQuery as the Data Connectivity Mode. </li> <li>In the query formula, replace ADX cluster and database with the parameter value. </li> <li>Rename the Query (in the query list on the left) after the table name.</li> <li>Perform data transformation as needed.</li> <li>Create and tune your Power BI Dashboards.</li> </ol>"},{"location":"guides/powerbi_report_config/#publish-report-to-power-bi-web-portal","title":"Publish report to Power BI web portal","text":"<p>Once your Power BI report is ready, publish it to the Power BI Web Portal.</p> With Babylon <ol> <li>Get your workspace id babylon powerbi workspace get-all -c <code>&lt;project_id&gt;</code> -p <code>&lt;platform_id&gt;</code></li> <li>Upload your report <code>babylon powerbi report upload -c &lt;project_id&gt; -p &lt;platform_id&gt; --workspace [workspace_id] [myfile.pbix]</code> babylon powerbi report upload -c <code>&lt;project_id&gt;</code> -p <code>&lt;platform_id&gt;</code> </li> </ol> With PowerBI Web Portal <p></p>"},{"location":"guides/powerbi_report_config/#move-report-to-a-new-environment","title":"Move report to a new environment","text":"<p>If you want to plug your Power BI report to a new environment you can do it easily by changing its parameters in the PowerBI Web Portal (app.powerbi.com) or with Babylon.</p> With Babylon <ol> <li>Get your workspace id babylon powerbi workspace get-all -c <code>&lt;project_id&gt;</code> -p <code>&lt;platform_id&gt;</code> </li> <li>Get your dataset id babylon powerbi dataset get-all -c <code>&lt;project_id&gt;</code> -p <code>&lt;platform_id&gt;</code> </li> <li>Update parameters babylon powerbi dataset parameters update -c <code>&lt;project_id&gt;</code> -p <code>&lt;platform_id&gt;</code> </li> <li>Update dataset credentials babylon powerbi dataset update-credentials -c  -p  --workspace workspace_id <li>The data sources will automatically be updated to read the new environment's data. </li> With PowerBI web portal <ol> <li>Go to the Power BI workspace and access the settings of your report\u2019s Dataset. </li> <li>Update the parameters values (ADX_cluster and ADX_database) with your target environment data.  </li> <li>The data sources will automatically be updated to read the new environment's data. </li> </ol>"},{"location":"guides/resource_file/","title":"Resource file","text":"<p>If state file doesn't exist, the first babylon command you launch will create one and store it in Azure Storage and in <code>/home/.config/cosmotech/babylon/&lt;state_id&gt;.yaml</code> file in local.</p> <p>You will find three main sections: <pre><code>files: []\nid: teststate\nservices:\n</code></pre> The last one contains following keys with some information already prefilled with data from vault:</p> <p>Azure Container Registry </p> <pre><code>  acr:\n    login_server: \n    simulator_repository: \n    simulator_version: \n</code></pre> <p>Azure Digital Twins </p> <pre><code>  adt:\n    built_owner_id: \n    built_reader_id: \n    digital_twin_url:  \n</code></pre> <p>Azure Explorer Database</p> <pre><code>  adx:\n    built_contributor_id: \n    built_owner_id: \n    cluster_name: \n    cluster_principal_id: \n    cluster_uri: \n    database_name: \n</code></pre> <p>Cosmotech API </p> <pre><code>  api:\n    connector.adt_id: \n    connector.adt_version: \n    connector.storage_id: \n    connector.storage_version: \n    connector.twin_id: \n    connector.twin_version: \n    dataset.adt_id: \n    dataset.storage_id: \n    dataset.twin_id: \n    organization_id: \n    organization_url: \n    run_templates: \n    scope: \n    send_scenario_metadata_to_event_hub: \n    solution_id: \n    url: \n    use_dedicated_event_hub_namespace: \n    workspace_id: \n    workspace_key: \n</code></pre> <p>Azure App Registration</p> <pre><code>  app:\n    app_id: \n    name: \n    object_id: \n    principal_id: \n</code></pre> <p>Azure </p> <pre><code>    azure:\n      cli_client_id:\n      email: \n      eventhub_built_contributor_id:\n      eventhub_built_data_receiver:\n      eventhub_built_data_sender:\n      function_artifact_url: \n      resource_group_name: \n      resource_location: \n      storage_account_name: \n      storage_blob_reader: \n      subscription_id:\n      team_id:\n      user_principal_id: \n</code></pre> <p>Azure Babylon App Registration </p> <pre><code>    babylon:\n      client_id: \n      principal_id: \n</code></pre> <p>Github </p> <pre><code>    github:\n      branch: \n      organization: \n      repository: \n      run_url: \n      workflow_path: \n</code></pre> <p>Cosmotech Platform </p> <pre><code>    platform:\n      app_id: \n      principal_id: \n      scope_id: \n</code></pre> <p>PowerBI</p> <pre><code>    powerbi:\n      dashboard_view: \n      scenario_view: \n      scope: \n      workspace.id:\n      workspace.name:\n</code></pre> <p>WebApp </p> <pre><code>    webapp:\n      deployment_name: \n      enable_insights: \n      hostname: \n      insights_instrumentation_key: \n      location: \n      static_domain: \n</code></pre>"},{"location":"guides/tfc_requirements/","title":"Terraform Cloud Requirements","text":"Requirements <p>The following elements are required before you can use Babylon on Terraform Cloud  - A Terraform Cloud organization token, for workspace creation or configuration  - A Terraform Cloud user token, for workspace configuration or execution</p>"},{"location":"guides/tfc_requirements/#allow-access-to-terraform-cloud","title":"Allow access to Terraform Cloud","text":"<p>Babylon uses the Terraform Cloud tokens to authenticate users and allow them to interact with the API. For operation on workspaces you will need to add a oauth token to terraform-cloud in the webapp. Once this oauth token you will add its id to your workspace configuration with babylon. - babylon terraform-cloud workspace create</p> <p>You can use the following commands to setup your token secrets in your <code>.secrets.yaml.encrypt</code> file for <code>Babylon</code> to use it directly !   - babylon terraform-cloud login   - babylon terraform-cloud logout </p>"},{"location":"guides/vault_requirements/","title":"Vault service","text":"<p>Requirements</p> <p>The following elements are required before you can use Babylon on an Azure subscription</p> Vault requirements <p>You need a Vault Service on your Azure Tenant.</p> <p>link to github for deployment</p>"},{"location":"partials/azure/az_aad_api_rights/","title":"Az aad api rights","text":"<p>To be able to connect to the API, a user requires to have rights to it in Azure Active Directory.</p> <p>To check the user rights for your API, you can access the Enterprise Application page for your API in the Azure Portal, and check the section <code>Users and groups</code></p> <p>On this page you will see all the authorizations for your users and will be able to give roles to Users, Services Principals and Groups.</p> <p>You just need to make sure that your user has permissions to access your API from here.</p> <p>The list of roles and their description can be found in the App Registration of your platform under the <code>App roles</code> section</p>"},{"location":"partials/azure/az_api_registration/","title":"Az api registration","text":"<p>AZ CLI being a Microsoft software comes with its own Application ID</p> <ul> <li>List of commonly used Microsoft applications ID</li> </ul> <p>So in this case we can easily find the required id and add it to our API  </p> Azure CLI application ID <pre><code>04b07795-8ddb-461a-bbee-02f9e1bf7b46\n</code></pre> <p>You can then go to the App Registration of your API on your Azure Tenant and go on the <code>Expose an API</code> page.</p> <p>There you can see a button <code>Add a client application</code> which will allow you to add the AZ CLI application ID as an authorized client for your api</p> Correctly set up App Registration <p></p> <p>Now the API will allow connections from the AZ CLI</p>"},{"location":"partials/azure/vault/","title":"Vault","text":"<p>You need a Vault Service on your Azure Tenant.</p> <p>link to github for deployment</p>"},{"location":"partials/installation/from_docker/","title":"From docker","text":""},{"location":"partials/installation/from_docker/#get-babylon-from-docker","title":"Get Babylon from docker","text":"Prerequisites Requirement Docker <p>Choosing the version of Babylon you want to use you can run the following command</p> Download docker image <pre><code>docker pull ghcr.io/cosmo-tech/babylon:latest\ndocker tag ghcr.io/cosmo-tech/babylon:latest babylon\n</code></pre> <p>It will download for you the required docker image, and rename it to <code>babylon</code></p> Start Babylon docker image <p>Using the following command you get in a working Babylon environment, allowing you to run any command you will like <pre><code>docker run -ti --rm babylon\n</code></pre></p> <p>Warning</p> <p>In this environment your changes to the files won't be persisted when you leave it. The following tips will help you set up persitance for your config, but will use knowledge of Babylon explained in future guides.</p> Persist configurations and use local content as a working dir Info <p>This tip concern some principle of Babylon explained is other guides, you can skip it for now if you want to understand those principles before running commands using them.</p> <p>To persist configuration we will use the <code>--mount</code> option of Docker to persist our data across runs</p> Persist configuration <pre><code>mkdir babylon_config\ndocker run -ti --rm --mount type=bind,source=\"$(pwd)\"/babylon_config,target=/opt/babylon babylon\n</code></pre> <p>This command will persist your Babylon configuration in a local <code>/babylon_config</code> folder allowing you to keep it across runs (in the same folder)</p> <p>Now if you want to use your local files as a working directory for your commands you can do the following</p> Use local folder as working dir <pre><code>docker run -ti --rm --mount type=bind,source=\"$(pwd)\",target=/etc/babylon/workingdir babylon\n</code></pre> <p>This command will use your current folder as a working directory for your babylon commands</p> <p>Combining both options allows for a persistent content and config across runs</p> Combine both for persitence <pre><code>docker run -ti --rm --mount type=bind,source=\"$(pwd)\"/babylon_config,target=/opt/babylon --mount type=bind,source=\"$(pwd)\",target=/etc/babylon/workingdir babylon\n</code></pre> Use aliases to make a babylon command using docker <p>Info</p> <ul> <li>Only work on system having the <code>alias</code> command</li> <li>Won't allow you to use auto-completion</li> </ul> <p>The following command will create a command <code>babylon</code> having the same use as the one you would get by installing the sources but by using docker.</p> <code>babylon</code> alias command <pre><code>alias babylon=\"docker run -ti --rm --mount type=bind,source=$(pwd)/babylon_config,target=/opt/babylon --mount type=bind,source=$(pwd),target=/etc/babylon/workingdir --entrypoint babylon babylon\"\n</code></pre>"},{"location":"partials/installation/from_git/","title":"From git","text":"<p>Get sources from git</p> <p>You can download the latest version of Babylon using git clone command</p> <p><pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git babylon\n</code></pre> <pre><code>cd babylon\n</code></pre></p> <p>Get the specific version from git</p> <p>If you want a specific version of Babylon (3.0.0 for example)</p> <pre><code>git clone -b 3.0.0 git@github.com:Cosmo-Tech/Babylon.git babylon\n</code></pre> <pre><code>cd babylon\n</code></pre>"},{"location":"partials/installation/from_source/","title":"From source","text":""},{"location":"partials/installation/from_source/#get-babylon-from-source","title":"Get Babylon from source","text":"<p>Requirements</p> <ul> <li>Python 3.10+</li> <li>Pip 22.2+</li> <li>Git (latest version)</li> </ul> <p>We will go through the process of getting a version of Babylon before the installation.</p> <p>Get sources from git</p> <p>You can download the latest version of Babylon using git clone command</p> <p><pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git babylon\n</code></pre> <pre><code>cd babylon\n</code></pre></p> <p>Get the specific version from git</p> <p>If you want a specific version of Babylon (3.0.0 for example)</p> <pre><code>git clone -b 3.0.0 git@github.com:Cosmo-Tech/Babylon.git babylon\n</code></pre> <pre><code>cd babylon\n</code></pre>"},{"location":"partials/installation/from_source/#install-babylon","title":"Install Babylon","text":"<p>You can install babylon globally in your system</p> <pre><code>pip install .\n</code></pre>"},{"location":"partials/installation/prerequisites/","title":"Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>Pip 22.2+</li> <li>Git (latest version)</li> </ul>"},{"location":"partials/installation/release/","title":"Release","text":"<p>If you choose to use releases, get one of the releases on the following page: </p> <p>Then select the type of compressed folder you want (<code>.zip</code> or <code>.tar.gz</code>) and download the file.</p> Download a release <p></p> <p>Decompress the file you downloaded.</p> Decompress a file ziptar.gz <pre><code>unzip Babylon-2.1.0.zip\n</code></pre> <pre><code>tar -xf Babylon-2.1.0.tar.gz\n</code></pre> <p>After run you now have a new folder named <code>Babylon-2.1.0</code> which we will refer to as \"Babylon Installation Folder\" for the rest of the guide</p>"}]}