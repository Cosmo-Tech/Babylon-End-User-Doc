{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Babylon","text":"<p>Welcome to the End User Documentation of Babylon</p> <p>This documentation will guide you on your learning adventure with Babylon.</p>"},{"location":"DiscoverBabylon/","title":"Discover Babylon","text":"","tags":["Discover"]},{"location":"DiscoverBabylon/#what-is-babylon","title":"What is Babylon ?","text":"<p>Babylon is a CLI1 principally targeted at Devops users of the Cosmotech Platform. It allows user to interact with the multiple systems used in the platform, performing multiple operations in a simple and streamlined fashion.</p> <p>Instead of requiring the user to learn how to use numerous software to interact with the systems, Babylon allow you to learn a single format.</p>","tags":["Discover"]},{"location":"DiscoverBabylon/#why-babylon","title":"Why Babylon ?","text":"<p>Babylon was developed to help users getting around the difficulty of juggling around with multiple software to interact with the multiple systems composing the Cosmotech Platform.</p> <p>By using Babylon you only need one single software to work on your multiple needs.</p> <p>The team behind Babylon is closely tied to the one working on the Cosmotech Platform, and new features of the platform can quickly be added to Babylon allowing users to get fast access to the newest content.</p>","tags":["Discover"]},{"location":"DiscoverBabylon/#im-still-not-convinced","title":"I'm still not convinced","text":"<p>Well, Babylon comes as a full framework allowing its developers to make simpler commands for you. While you get access to low level commands that directly interact with a single system, you also get high level commands allowing you a full automation of processes and such reducing the risk of errors between elements.</p> <p>Such commands are called <code>Macro Commands</code>2 and allow a full automation of possibly complex processes.</p> <ol> <li> <p>Command Line Interface: A software used in a terminal console, allowing to run commands.\u00a0\u21a9</p> </li> <li> <p>Macro Commands: A combination of low level commands allowing to do complex operation in a high level manner.\u00a0\u21a9</p> </li> </ol>","tags":["Discover"]},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#discover","title":"Discover","text":"<ul> <li>Discover Babylon</li> </ul>"},{"location":"tags/#guides","title":"Guides","text":"<ul> <li>Installation</li> </ul>"},{"location":"tags/#installation","title":"Installation","text":"<ul> <li>Installation</li> </ul>"},{"location":"guides/installation/","title":"Installation of Babylon","text":"<p>Great ! You chose to use Babylon, I'm sure you won't regret it.</p> <p>Now we will guide you through the installation process so you can get your hands on Babylon as fast as possible.</p> <p>So the installation is a fairly simple process which can be separated in 2 parts : get a version of Babylon, and install this version.</p> Install Babylon from sourcesInstall Babylon using Docker","tags":["Guides","Installation"]},{"location":"guides/installation/#get-babylon-sources","title":"Get Babylon sources","text":"<p>We will go through the process of getting a version of Babylon before the installation.</p> <p>You can make your choice on how you may want to process :</p> Get official releasesUse latest version from git <p>So you choose to use releases, very well,  go on the following page to get one of the releases </p> <p>Then you can select a type of compressed folder you want (<code>.zip</code> or <code>.tar.gz</code>) and download the file.</p> Download a release <p></p> <p>Now you can decompress the file you downloaded.</p> Decompress a file ziptar.gz <pre><code>unzip Babylon-1.2.0.zip\n</code></pre> <pre><code>tar -xf Babylon-1.2.0.tar.gz\n</code></pre> <p>After run you now have a folder named <code>Babylon-1.2.0</code> which we will refer to as \"Babylon Installation Folder\" for the rest of the guide</p> <p>You can download the latest version of Babylon using git with the following command</p> Get sources from git <pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git Babylon-Sources\n</code></pre> <p>You now have a folder called <code>Babylon-Sources</code> which we will refer to as \"Babylon Installation Folder\" for the rest of the guide</p> <p>If you want a specific version of Babylon you can check which version number you want (for example <code>1.2.0</code>) and to the following</p> Change the source version from git <pre><code>cd Babylon-Source\ngit checkout 1.2.0\n</code></pre> <p>Now your installation folder will have the code of the version <code>1.2.0</code> ready to be used</p>","tags":["Guides","Installation"]},{"location":"guides/installation/#get-babylon-from-docker","title":"Get Babylon from docker","text":"Prerequisites <p>You need to set-up a fully functionnal docker : Docker setup guide</p> <p>Choosing the version of Babylon you want to use you can run the following command (here for version <code>1.2.0</code>) </p> Download docker image <pre><code>docker pull ghcr.io/cosmo-tech/babylon:1.2.0\ndocker tag ghcr.io/cosmo-tech/babylon:1.2.0 babylon\n</code></pre> <p>It will download for you the required docker image, and rename it to <code>babylon</code></p> Start Babylon docker image <p>Using the following command you get in a working Babylon environment, allowing you to run any command you will like <pre><code>docker run -ti --rm babylon\n</code></pre></p> <p>Danger</p> <p>In this environment your changes to the files won't be persisted when you leave it.</p> Persist configurations and use local content as a working dir Info <p>This tip concern some principle of Babylon explained is other guides, you can skip it for now if you want to understand those principles before running commands using them.</p> <p>To persist configuration we will use the <code>--mount</code> option of Docker to persist our data across runs</p> <p><pre><code>mkdir babylon_config\ndocker run -ti --rm --mount type=bind,source=\"$(pwd)\"/babylon_config,target=/opt/babylon babylon\n</code></pre> This command will persist your babylon configuration in a local <code>/babylon_config</code> folder allowing you to keep it across runs (in the same folder)</p> <p>Now if you want to use your local files as a working directory for your commands you can do the following</p> <p><pre><code>docker run -ti --rm --mount type=bind,source=\"$(pwd)\",target=/etc/babylon/workingdir babylon\n</code></pre> This command will use your current folder as a working directory for your babylon commands</p> <p>Combining both options allows for a persistent content and config across runs</p> <pre><code>docker run -ti --rm --mount type=bind,source=\"$(pwd)\"/babylon_config,target=/opt/babylon --mount type=bind,source=\"$(pwd)\",target=/etc/babylon/workingdir babylon\n</code></pre> Use aliases to make a babylon command using docker <p>Info</p> <ul> <li>Only work on system having the <code>alias</code> command</li> <li>Won't allow you to use auto-completion</li> </ul> <p>The following command will create a command <code>babylon</code> having the same use as the one you would get by installing the sources but by using docker. <pre><code>alias babylon=\"docker run -ti --rm --mount type=bind,source=$(pwd)/babylon_config,target=/opt/babylon --mount type=bind,source=$(pwd),target=/etc/babylon/workingdir --entrypoint babylon babylon\"\n</code></pre></p>","tags":["Guides","Installation"]},{"location":"partials/Installation/GetLatestFromGit/","title":"GetLatestFromGit","text":"<p>You can download the latest version of Babylon using git with the following command</p> Get sources from git <pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git Babylon-Sources\n</code></pre> <p>You now have a folder called <code>Babylon-Sources</code> which we will refer to as \"Babylon Installation Folder\" for the rest of the guide</p> <p>If you want a specific version of Babylon you can check which version number you want (for example <code>1.2.0</code>) and to the following</p> Change the source version from git <pre><code>cd Babylon-Source\ngit checkout 1.2.0\n</code></pre> <p>Now your installation folder will have the code of the version <code>1.2.0</code> ready to be used</p>"},{"location":"partials/Installation/GetOfficialRelease/","title":"GetOfficialRelease","text":"<p>So you choose to use releases, very well,  go on the following page to get one of the releases </p> <p>Then you can select a type of compressed folder you want (<code>.zip</code> or <code>.tar.gz</code>) and download the file.</p> Download a release <p></p> <p>Now you can decompress the file you downloaded.</p> Decompress a file ziptar.gz <pre><code>unzip Babylon-1.2.0.zip\n</code></pre> <pre><code>tar -xf Babylon-1.2.0.tar.gz\n</code></pre> <p>After run you now have a folder named <code>Babylon-1.2.0</code> which we will refer to as \"Babylon Installation Folder\" for the rest of the guide</p>"},{"location":"partials/Installation/InstallFromDocker/","title":"InstallFromDocker","text":""},{"location":"partials/Installation/InstallFromDocker/#get-babylon-from-docker","title":"Get Babylon from docker","text":"Prerequisites <p>You need to set-up a fully functionnal docker : Docker setup guide</p> <p>Choosing the version of Babylon you want to use you can run the following command (here for version <code>1.2.0</code>) </p> Download docker image <pre><code>docker pull ghcr.io/cosmo-tech/babylon:1.2.0\ndocker tag ghcr.io/cosmo-tech/babylon:1.2.0 babylon\n</code></pre> <p>It will download for you the required docker image, and rename it to <code>babylon</code></p> Start Babylon docker image <p>Using the following command you get in a working Babylon environment, allowing you to run any command you will like <pre><code>docker run -ti --rm babylon\n</code></pre></p> <p>Danger</p> <p>In this environment your changes to the files won't be persisted when you leave it.</p> Persist configurations and use local content as a working dir Info <p>This tip concern some principle of Babylon explained is other guides, you can skip it for now if you want to understand those principles before running commands using them.</p> <p>To persist configuration we will use the <code>--mount</code> option of Docker to persist our data across runs</p> <p><pre><code>mkdir babylon_config\ndocker run -ti --rm --mount type=bind,source=\"$(pwd)\"/babylon_config,target=/opt/babylon babylon\n</code></pre> This command will persist your babylon configuration in a local <code>/babylon_config</code> folder allowing you to keep it across runs (in the same folder)</p> <p>Now if you want to use your local files as a working directory for your commands you can do the following</p> <p><pre><code>docker run -ti --rm --mount type=bind,source=\"$(pwd)\",target=/etc/babylon/workingdir babylon\n</code></pre> This command will use your current folder as a working directory for your babylon commands</p> <p>Combining both options allows for a persistent content and config across runs</p> <pre><code>docker run -ti --rm --mount type=bind,source=\"$(pwd)\"/babylon_config,target=/opt/babylon --mount type=bind,source=\"$(pwd)\",target=/etc/babylon/workingdir babylon\n</code></pre> Use aliases to make a babylon command using docker <p>Info</p> <ul> <li>Only work on system having the <code>alias</code> command</li> <li>Won't allow you to use auto-completion</li> </ul> <p>The following command will create a command <code>babylon</code> having the same use as the one you would get by installing the sources but by using docker. <pre><code>alias babylon=\"docker run -ti --rm --mount type=bind,source=$(pwd)/babylon_config,target=/opt/babylon --mount type=bind,source=$(pwd),target=/etc/babylon/workingdir --entrypoint babylon babylon\"\n</code></pre></p>"},{"location":"partials/Installation/InstallFromSources/","title":"InstallFromSources","text":""},{"location":"partials/Installation/InstallFromSources/#get-babylon-sources","title":"Get Babylon sources","text":"<p>We will go through the process of getting a version of Babylon before the installation.</p> <p>You can make your choice on how you may want to process :</p> Get official releasesUse latest version from git <p>So you choose to use releases, very well,  go on the following page to get one of the releases </p> <p>Then you can select a type of compressed folder you want (<code>.zip</code> or <code>.tar.gz</code>) and download the file.</p> Download a release <p></p> <p>Now you can decompress the file you downloaded.</p> Decompress a file ziptar.gz <pre><code>unzip Babylon-1.2.0.zip\n</code></pre> <pre><code>tar -xf Babylon-1.2.0.tar.gz\n</code></pre> <p>After run you now have a folder named <code>Babylon-1.2.0</code> which we will refer to as \"Babylon Installation Folder\" for the rest of the guide</p> <p>You can download the latest version of Babylon using git with the following command</p> Get sources from git <pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git Babylon-Sources\n</code></pre> <p>You now have a folder called <code>Babylon-Sources</code> which we will refer to as \"Babylon Installation Folder\" for the rest of the guide</p> <p>If you want a specific version of Babylon you can check which version number you want (for example <code>1.2.0</code>) and to the following</p> Change the source version from git <pre><code>cd Babylon-Source\ngit checkout 1.2.0\n</code></pre> <p>Now your installation folder will have the code of the version <code>1.2.0</code> ready to be used</p>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#discover","title":"Discover","text":"<ul> <li>Discover Babylon</li> </ul>"},{"location":"tags/#guides","title":"Guides","text":"<ul> <li>Installation</li> </ul>"},{"location":"tags/#installation","title":"Installation","text":"<ul> <li>Installation</li> </ul>"}]}