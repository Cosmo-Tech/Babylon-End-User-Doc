{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Babylon","text":"<p>Welcome to the End User Documentation of Babylon</p> <p>This documentation will guide you on your learning adventure with Babylon.</p>"},{"location":"DiscoverBabylon/","title":"Discover Babylon","text":""},{"location":"DiscoverBabylon/#what-is-babylon","title":"What is Babylon ?","text":"<p>Babylon is a CLI1 principally targeted at Devops users of the Cosmotech Platform. It allows user to interact with the multiple systems used in the platform, performing multiple operations in a simple and streamlined fashion.</p> <p>Instead of requiring the user to learn how to use numerous software to interact with the systems, Babylon allow you to learn a single format.</p>"},{"location":"DiscoverBabylon/#why-babylon","title":"Why Babylon ?","text":"<p>Babylon was developed to help users getting around the difficulty of juggling around with multiple software to interact with the multiple systems composing the Cosmotech Platform.</p> <p>By using Babylon you only need one single software to work on your multiple needs.</p> <p>The team behind Babylon is closely tied to the one working on the Cosmotech Platform, and new features of the platform can quickly be added to Babylon allowing users to get fast access to the newest content.</p>"},{"location":"DiscoverBabylon/#im-still-not-convinced","title":"I'm still not convinced","text":"<p>Well, Babylon comes as a full framework allowing its developers to make simpler commands for you. While you get access to low level commands that directly interact with a single system, you also get high level commands allowing you a full automation of processes and such reducing the risk of errors between elements.</p> <p>Such commands are called <code>Macro Commands</code>2 and allow a full automation of possibly complex processes.</p> <ol> <li> <p>Command Line Interface: A software used in a terminal console, allowing to run commands.\u00a0\u21a9</p> </li> <li> <p>Macro Commands: A combination of low level commands allowing to do complex operation in a high level manner.\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/","title":"Guides","text":"<p> Install Babylon</p> <p>Learn how to install <code>babylon</code> like a pro</p> <p> Getting started</p> <p> Configuration</p> <p>This guide will help you configure your new installation of Babylon</p> <p> Configuration</p> <p> Deployment values</p> <p>This guide will explain all the deployment values to you, and how to get them.</p> <p> Deployment</p> <p> Platform values</p> <p>This guide will explain all the platform values to you, and how to get them.</p> <p> Platform</p>"},{"location":"guides/configuration/","title":"Configuration","text":"<p>Now that you have installed Babylon we can learn about how it works.  </p> <p>Let's begin by running a few commands to see some elements.</p> First commands <p>You can start by looking around some of the first commands you could run in Babylon</p> Simple commands <pre><code># You can start by looking at the basic help\nbabylon --help\n# Next you can take a look at the version of babylon you installed\nbabylon --version\n# Now you can look at the state of your configuration\nbabylon config display\n</code></pre> <p>As you can see in the final command, your current configuration has a lot of keys defined but most of them are empty.</p> <p>Now that your ran a few working commands lets try one that require some configuration</p> Run command without configuration <p><pre><code>babylon azure storage container get-all\n</code></pre> </p> <p>Without configuration this command will fail and you should see an error message telling you why.</p> Error message description <p>The message can be separated in 3 parts</p> The Logs <pre><code>2023/01/20 - 14:59:09 ERROR    Key storage_account_name can not be found in platform config file\n2023/01/20 - 14:59:09 ERROR    storage won't run without it.\n</code></pre> The Trace <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /home/afossart/git_repos/Babylon/.venv/bin/babylon:11 in &lt;module&gt;                                    \u2502\n\u2502                                                                                                      \u2502\n\u2502    8 if __name__ == '__main__':                                                                      \u2502\n\u2502    9 \u2502   sys.argv[0] = re.sub(r'(-script\\.pyw?|\\.exe)?$', '', sys.argv[0])                           \u2502\n\u2502   10 \u2502   sys.exit(                                                                                   \u2502\n\u2502 \u2771 11 \u2502   \u2502   load_entry_point('Babylon', 'console_scripts', 'babylon')()                             \u2502\n\u2502   12 \u2502   )                                                                                           \u2502\n\u2502   13                                                                                                 \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/core.py:1130 in __call__    \u2502\n\u2502                                                                                                      \u2502\n\u2502   1127 \u2502                                                                                             \u2502\n\u2502   1128 \u2502   def __call__(self, *args: t.Any, **kwargs: t.Any) -&gt; t.Any:                               \u2502\n\u2502   1129 \u2502   \u2502   \"\"\"Alias for :meth:`main`.\"\"\"                                                         \u2502\n\u2502 \u2771 1130 \u2502   \u2502   return self.main(*args, **kwargs)                                                     \u2502\n\u2502   1131                                                                                               \u2502\n\u2502   1132                                                                                               \u2502\n\u2502   1133 class Command(BaseCommand):                                                                   \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/core.py:1055 in main        \u2502\n\u2502                                                                                                      \u2502\n\u2502   1052 \u2502   \u2502   try:                                                                                  \u2502\n\u2502   1053 \u2502   \u2502   \u2502   try:                                                                              \u2502\n\u2502   1054 \u2502   \u2502   \u2502   \u2502   with self.make_context(prog_name, args, **extra) as ctx:                      \u2502\n\u2502 \u2771 1055 \u2502   \u2502   \u2502   \u2502   \u2502   rv = self.invoke(ctx)                                                     \u2502\n\u2502   1056 \u2502   \u2502   \u2502   \u2502   \u2502   if not standalone_mode:                                                   \u2502\n\u2502   1057 \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   return rv                                                             \u2502\n\u2502   1058 \u2502   \u2502   \u2502   \u2502   \u2502   # it's not safe to `ctx.exit(rv)` here!                                   \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/core.py:1657 in invoke      \u2502\n\u2502                                                                                                      \u2502\n\u2502   1654 \u2502   \u2502   \u2502   \u2502   super().invoke(ctx)                                                           \u2502\n\u2502   1655 \u2502   \u2502   \u2502   \u2502   sub_ctx = cmd.make_context(cmd_name, args, parent=ctx)                        \u2502\n\u2502   1656 \u2502   \u2502   \u2502   \u2502   with sub_ctx:                                                                 \u2502\n\u2502 \u2771 1657 \u2502   \u2502   \u2502   \u2502   \u2502   return _process_result(sub_ctx.command.invoke(sub_ctx))                   \u2502\n\u2502   1658 \u2502   \u2502                                                                                         \u2502\n\u2502   1659 \u2502   \u2502   # In chain mode we create the contexts step by step, but after the                    \u2502\n\u2502   1660 \u2502   \u2502   # base command has been invoked.  Because at that point we do not                     \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/core.py:1657 in invoke      \u2502\n\u2502                                                                                                      \u2502\n\u2502   1654 \u2502   \u2502   \u2502   \u2502   super().invoke(ctx)                                                           \u2502\n\u2502   1655 \u2502   \u2502   \u2502   \u2502   sub_ctx = cmd.make_context(cmd_name, args, parent=ctx)                        \u2502\n\u2502   1656 \u2502   \u2502   \u2502   \u2502   with sub_ctx:                                                                 \u2502\n\u2502 \u2771 1657 \u2502   \u2502   \u2502   \u2502   \u2502   return _process_result(sub_ctx.command.invoke(sub_ctx))                   \u2502\n\u2502   1658 \u2502   \u2502                                                                                         \u2502\n\u2502   1659 \u2502   \u2502   # In chain mode we create the contexts step by step, but after the                    \u2502\n\u2502   1660 \u2502   \u2502   # base command has been invoked.  Because at that point we do not                     \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/core.py:1654 in invoke      \u2502\n\u2502                                                                                                      \u2502\n\u2502   1651 \u2502   \u2502   \u2502   \u2502   cmd_name, cmd, args = self.resolve_command(ctx, args)                         \u2502\n\u2502   1652 \u2502   \u2502   \u2502   \u2502   assert cmd is not None                                                        \u2502\n\u2502   1653 \u2502   \u2502   \u2502   \u2502   ctx.invoked_subcommand = cmd_name                                             \u2502\n\u2502 \u2771 1654 \u2502   \u2502   \u2502   \u2502   super().invoke(ctx)                                                           \u2502\n\u2502   1655 \u2502   \u2502   \u2502   \u2502   sub_ctx = cmd.make_context(cmd_name, args, parent=ctx)                        \u2502\n\u2502   1656 \u2502   \u2502   \u2502   \u2502   with sub_ctx:                                                                 \u2502\n\u2502   1657 \u2502   \u2502   \u2502   \u2502   \u2502   return _process_result(sub_ctx.command.invoke(sub_ctx))                   \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/core.py:1404 in invoke      \u2502\n\u2502                                                                                                      \u2502\n\u2502   1401 \u2502   \u2502   \u2502   echo(style(message, fg=\"red\"), err=True)                                          \u2502\n\u2502   1402 \u2502   \u2502                                                                                         \u2502\n\u2502   1403 \u2502   \u2502   if self.callback is not None:                                                         \u2502\n\u2502 \u2771 1404 \u2502   \u2502   \u2502   return ctx.invoke(self.callback, **ctx.params)                                    \u2502\n\u2502   1405 \u2502                                                                                             \u2502\n\u2502   1406 \u2502   def shell_complete(self, ctx: Context, incomplete: str) -&gt; t.List[\"CompletionItem\"]:      \u2502\n\u2502   1407 \u2502   \u2502   \"\"\"Return a list of completions for the incomplete value. Looks                       \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/core.py:760 in invoke       \u2502\n\u2502                                                                                                      \u2502\n\u2502    757 \u2502   \u2502                                                                                         \u2502\n\u2502    758 \u2502   \u2502   with augment_usage_errors(__self):                                                    \u2502\n\u2502    759 \u2502   \u2502   \u2502   with ctx:                                                                         \u2502\n\u2502 \u2771  760 \u2502   \u2502   \u2502   \u2502   return __callback(*args, **kwargs)                                            \u2502\n\u2502    761 \u2502                                                                                             \u2502\n\u2502    762 \u2502   def forward(                                                                              \u2502\n\u2502    763 \u2502   \u2502   __self, __cmd: \"Command\", *args: t.Any, **kwargs: t.Any  # noqa: B902                 \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/decorators.py:26 in new_func\u2502\n\u2502                                                                                                      \u2502\n\u2502    23 \u2502   \"\"\"                                                                                        \u2502\n\u2502    24 \u2502                                                                                              \u2502\n\u2502    25 \u2502   def new_func(*args, **kwargs):  # type: ignore                                             \u2502\n\u2502 \u2771  26 \u2502   \u2502   return f(get_current_context(), *args, **kwargs)                                       \u2502\n\u2502    27 \u2502                                                                                              \u2502\n\u2502    28 \u2502   return update_wrapper(t.cast(F, new_func), f)                                              \u2502\n\u2502    29                                                                                                \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/Babylon/utils/decorators.py:209 in wrapper                          \u2502\n\u2502                                                                                                      \u2502\n\u2502   206 \u2502   \u2502   \u2502   \u2502   if value in [None, \"\"] and required:                                           \u2502\n\u2502   207 \u2502   \u2502   \u2502   \u2502   \u2502   logger.error(f\"Key {yaml_key} can not be found in {getter.__doc__}\")       \u2502\n\u2502   208 \u2502   \u2502   \u2502   \u2502   \u2502   logger.error(f\"{click.get_current_context().command.name} won't run        \u2502\n\u2502 \u2771 209 \u2502   \u2502   \u2502   \u2502   \u2502   raise KeyError(f\"Key {yaml_key} can not be found in {getter.__doc__}       \u2502\n\u2502   210 \u2502   \u2502   \u2502   \u2502   return func(*args, **kwargs)                                                   \u2502\n\u2502   211 \u2502   \u2502   \u2502                                                                                      \u2502\n\u2502   212 \u2502   \u2502   \u2502   if not required:                                                                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> The Error <pre><code>KeyError: 'Key storage_account_name can not be found in platform config file'\n</code></pre> <p>In most of the case you can focus on the logs at the beginning of the message,  if this is a known error it should give you enough information on how to solve it. Here we can see that the key <code>storage_account_name</code> is not found in the <code>platform config file</code> and that the command won't run without it.</p> <p>In case the logs are not enough you can look at the error, which should help you, and if neither helps you can start an issue on the Babylon repository by sending the command you ran and the trace.</p> <p>Now we know that we need to set up some configuration to use our commands.</p>"},{"location":"guides/configuration/#different-type-of-configuration-files","title":"Different type of configuration files","text":"<p>Two main configuration files exists on Babylon: platform and deployment</p>"},{"location":"guides/configuration/#platform-configuration-file","title":"<code>Platform</code> configuration file","text":"<p>This file contains the variables necessary to connect to a cosmotech platform deployed on a given cloud.</p>"},{"location":"guides/configuration/#deployment-configuration-file","title":"<code>Deployment</code> configuration file","text":"<p>A Deployment is a single application made available on a platform.</p> <p>Using terms of the cosmotech api, a deployment is equivalent to a <code>Workspace</code></p>"},{"location":"guides/configuration/#set-configuration-values","title":"Set configuration values","text":"<p>3 main ways exists to work on configuration values. In the following part we will only work on <code>platform</code>, but those 3 ways are identical for <code>platform</code> and <code>deployment</code> </p> Use <code>set-variable</code> commandUse <code>edit</code> commandUse a file editor <p>The following command exists : <code>babylon config platform set-variable</code></p> Help of the command <pre><code>babylon config platform set-variable --help\n# Usage: babylon config platform set-variable [OPTIONS] VARIABLE_KEY\n#                                             VARIABLE_VALUE\n#\n#   Set a platform variable with a new value\n#  \n# Options:\n#   -h, --help  Show this message and exit.\n</code></pre> <p>2 positional parameters are required : <code>VARIABLE_KEY</code> and <code>VARIABLE_VALUE</code></p> Set a first variable <pre><code>babylon config platform set-variable VARIABLE_KEY VARIABLE_VALUE\n# Now our variable \"VARIABLE_KEY\" will have the value \"VARIABLE_VALUE\" in our config file, we can check it by displaying the config\nbabylon config display\n</code></pre> <p>The following command exists : <code>babylon config platform edit</code></p> <p>It will allow you to open your configuration file directly in a file editor.</p> Help of the command <pre><code>babylon config platform edit --help\n# &lt;Usage: babylon config platform edit [OPTIONS] [PLATFORM]\n#\n# Open editor to edit variables in given platform\n#\n# will open default platform if no argument is passed\n#  \n# Options:\n#   -h, --help  Show this message and exit.\n</code></pre> <p>1 positional parameter is optional : <code>PLATFORM</code></p> <p><code>PLATFORM</code> can be replace by the path to a platform file to open, if not present your current platform file will be opened.</p> Set a first variable <p>Running the command will open a text editor of the file you can then add the values you want to each keys <pre><code>babylon config platform edit\n</code></pre> </p> <p>By running the following command you can see a lot of information</p> Config display <pre><code>babylon --bare config display\n# Configuration:\n#   dir: /home/user/.config/babylon\n#   deployment: /home/user/.config/babylon/deployments/deploy.yaml\n#       ...\n#  platform: /home/user/.config/babylon/platforms/platform.yaml\n#       ...\n#  plugins: \n</code></pre> <p>Here we will focus on one line : <code>platform: /home/user/.config/babylon/platforms/platform.yaml</code></p> <p>This is the path to your local config file for your platform. You can just open it using you favorite text editor to be able to update your configuration values.</p> <p>Now you know how to set a specific configuration variable.</p>"},{"location":"guides/configuration/#switch-configuration","title":"Switch configuration","text":"<p>Now that we can set the configuration variables we want to be able to switch between configuration. Some systems exist inside babylon to simplify those switch.</p> Use <code>create</code> and <code>select</code> commandsUse environment variables to override the configuration <p>Just like the <code>edit</code> and <code>set-variable</code> commands you can use the <code>create</code> and <code>select</code> commands to switch between platform/deployment configuration.</p> <code>create</code> command <p><pre><code>babylon config platform create NewPlatform\n</code></pre> This command will create a new platform file called NewPlatform in your configuration folder</p> Use of the <code>select</code> command <p></p> <p>you can see that we selected the platform <code>NewPlatform</code> and after the select the correct one was selected</p> <p>You can use the following environment variable to replace your default configuration folder by a custom one : <code>BABYLON_CONFIG_DIRECTORY</code></p> <p>By setting that value to an absolute path you will access it wherever you are in your system,  but if you want to keep a simple configuration change depending on the folder you are,  you can instead set it to a relative path,  which will allow you to change your configuration everytime you move to another folder.</p> use <code>direnv</code> <p>You can use tools like  to set alternate values for your envvar and easily switch while moving around folders</p>"},{"location":"guides/deployment/","title":"Deployment configuration values","text":""},{"location":"guides/deployment/#organization_id","title":"<code>organization_id</code>Organization ID","text":"What is this value ? The id of the organization in the cosmotech API How to get a value to set here ? Can be found using <code>babylon api organization get-all</code> <p><code>O-XXXXXXXXXX</code></p>"},{"location":"guides/deployment/#solution_id","title":"<code>solution_id</code>Solution ID","text":"What is this value ? The id of the solution in the cosmotech API How to get a value to set here ? Can be found using <code>babylon api solution get-all</code> <p><code>Sol-XXXXXXXXXX</code></p>"},{"location":"guides/deployment/#workspace_id","title":"<code>workspace_id</code>Workspace ID","text":"What is this value ? the id of the workspace on the API How to get a value to set here ? Can be found using <code>babylon api workspace get-all</code> <p><code>W-XXXXXXXXXX</code></p>"},{"location":"guides/deployment/#workspace_key","title":"<code>workspace_key</code>Workspace Key","text":"What is this value ? the key of the workspace on the API shared with Terraform configuration How to get a value to set here ? Can be found using <code>babylon api workspace get</code> <p><code>workspacekey</code></p>"},{"location":"guides/deployment/#api_url","title":"<code>api_url</code>Cosmotech API URL","text":"What is this value ? the url of the API (used for validation) How to get a value to set here ? In the azure portal, navigate to your app registration for your api. Then look at the value in <code>Application ID URI</code> <p><code>https://dev.api.cosmotech.com</code></p>"},{"location":"guides/deployment/#resource_group_name","title":"<code>resource_group_name</code>Resource Group Name","text":"What is this value ? The name fo the resource group used for users deployment (function apps, webapp) How to get a value to set here ? Can be found in your azure portal in the resource group category   <p><code>azure_ressource_group</code></p>"},{"location":"guides/deployment/#resources_location","title":"<code>resources_location</code>Resources Location","text":"What is this value ? The azure resource location for users deployment How to get a value to set here ? You could use the same resource location as your api In case you want a full list of the available locations you can use the <code>az</code> cli and run the following command <pre><code>az account list-locations\n</code></pre> <p><code>westeurope</code></p>"},{"location":"guides/deployment/#adx_database_name","title":"<code>adx_database_name</code>Azure Data Explorer Database Name","text":"What is this value ? The name of the database used in Azure Data Explorer How to get a value to set here ? Can be found in your azure portal in you Azure Data Explorer Clusters. Inside the cluster configuration you can check in <code>Databases</code> to find the name of the one you want to use   <p><code>o-xxxxxxxxxx-workspacename</code></p>"},{"location":"guides/deployment/#digital_twin_url","title":"<code>digital_twin_url</code>Digital Twin URL","text":"What is this value ? URL of the Azure Digital Twin instance to use How to get a value to set here ? Can be found in the Azure portal of your ADT instance next to <code>Host name</code> <p><code>https://mydigitaltwin.api.weu.digitaltwins.azure.net</code></p>"},{"location":"guides/deployment/#csm_simulator_repository","title":"<code>csm_simulator_repository</code>Cosmo Simulator Repository","text":"What is this value ? The solution simulator docker origin repository How to get a value to set here ? This is the name of the solution source repository for its docker image, it is given by the solution integration team   <p><code>solution_simulator</code></p>"},{"location":"guides/deployment/#simulator_repository","title":"<code>simulator_repository</code>Simulator Repository","text":"What is this value ? The solution simulator docker target repository (repository value in Solution.yaml) How to get a value to set here ? This is the name of the solution target repository for its docker image, it should be the same as in your Solution.yaml   <p><code>solution_simulator</code></p>"},{"location":"guides/deployment/#simulator_version","title":"<code>simulator_version</code>Simulator Version","text":"What is this value ? the solution simulator version (version value in Solution.yaml) How to get a value to set here ? The version of the simulator you want to use, as communicated by the solution developpers.   <p><code>1.0.0</code></p>"},{"location":"guides/deployment/#send_scenario_metadata_to_event_hub","title":"<code>send_scenario_metadata_to_event_hub</code>Send scenario metadata to Event Hub","text":"What is this value ? Set this property to false to not send scenario metada to Azure Event Hub Namespace for this Workspace. How to get a value to set here ? Boolean property allowing to send metadata of the scenario runs to the event hub. <ul> <li>The Event Hub Namespace must be named <code>&lt;organization_id&gt;-&lt;workspace_id&gt;</code> (in lower case).</li> <li>This Namespace must also contain two Event Hubs named <code>probesmeasures</code> and <code>scenariorun</code>.  </li> </ul> <p><code>true</code></p>"},{"location":"guides/deployment/#use_dedicated_event_hub_namespace","title":"<code>use_dedicated_event_hub_namespace</code>Use dedicated Event Hub Namespace","text":"What is this value ? Set this property to false to not to use a dedicated Azure Event Hub Namespace for this Workspace. How to get a value to set here ? Boolean property allowing to use dedicated event hub namespace. <ul> <li>The Event Hub Namespace must be named <code>&lt;organization_id&gt;-&lt;workspace_id&gt;</code> (in lower case).</li> <li>This Namespace must also contain two Event Hubs named <code>probesmeasures</code> and <code>scenariorun</code>.  </li> </ul> <p><code>true</code></p>"},{"location":"guides/deployment/#powerbi_workspace_id","title":"<code>powerbi_workspace_id</code>Power BI workspace ID","text":"What is this value ? ID of the power BI workspace to keep dashboard for this deployment How to get a value to set here ? You can find the id of the workspace in the wep app of powerbi <p><code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code></p>"},{"location":"guides/installation/","title":"Installation of Babylon","text":"<p>Great ! You chose to use Babylon, I'm sure you won't regret it.</p> <p>Now we will guide you through the installation process so you can get your hands on Babylon as fast as possible.</p> <p>So the installation is a fairly simple process which can be separated in 2 parts : get a version of Babylon, and install this version.</p> Install Babylon from sourcesInstall Babylon using Docker <p>And now you have a fully functional installation of Babylon, you can now check other guides to learn how to configure it and start running commands.</p>"},{"location":"guides/installation/#get-babylon-sources","title":"Get Babylon sources","text":"Prerequisites Requirement Python 3.9+ Pip 22.2+ Git required for latest version <p>We will go through the process of getting a version of Babylon before the installation.</p> <p>You can make your choice on how you may want to process :</p> Get official releasesUse latest version from git <p>So you choose to use releases, very well,  go on the following page to get one of the releases </p> <p>Then you can select a type of compressed folder you want (<code>.zip</code> or <code>.tar.gz</code>) and download the file.</p> Download a release <p></p> <p>Now you can decompress the file you downloaded.</p> Decompress a file ziptar.gz <pre><code>unzip Babylon-1.2.0.zip\n</code></pre> <pre><code>tar -xf Babylon-1.2.0.tar.gz\n</code></pre> <p>After run you now have a folder named <code>Babylon-1.2.0</code> which we will refer to as \"Babylon Installation Folder\" for the rest of the guide</p> <p>You can download the latest version of Babylon using git with the following command</p> Get sources from git <pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git Babylon-Sources\n</code></pre> <p>You now have a folder called <code>Babylon-Sources</code> which we will refer to as \"Babylon Installation Folder\" for the rest of the guide</p> <p>If you want a specific version of Babylon you can check which version number you want (for example <code>1.2.0</code>) and to the following</p> Change the source version from git <pre><code>cd Babylon-Source\ngit checkout 1.2.0\n</code></pre> <p>Now your installation folder will have the code of the version <code>1.2.0</code> ready to be used</p>"},{"location":"guides/installation/#install-babylon","title":"Install Babylon","text":"<p>Now that you have a \"Babylon Installation Folder\" ready we can move to the installation process</p> Use a <code>venv</code> <p>If you want you can set up a virtual environment in python using the library <code>venv</code> to keep your babylon dependencies in a single location.</p> Set up a <code>venv</code> <pre><code># Make sure you have the library venv installed\npip install --user venv\n# Create a venv in the folder `.venv`\npython -m venv .venv\n</code></pre> <p>Now you can activate your venv (created in the folder <code>.venv</code>) and follow the rest of this tutorial.</p> Activate on unix systemsActivate on windows (<code>cmd.exe</code>)Activate on windows (<code>PowerShell</code>) <pre><code>source .venv/bin/activate\n</code></pre> <pre><code>.venv\\Scripts\\activate.bat\n</code></pre> <pre><code>.venv\\Scripts\\Activate.ps1\n</code></pre> <p>Warning</p> <p>Once you install babylon in a venv you will need to activate this venv every time you want to use babylon.</p> <p>The setup is fairy direct, the following command will allow a full install of Babylon</p> <p>Setup babylon</p> <pre><code>pip install &lt;Babylon Installation Folder&gt;\n</code></pre> Enable autocompletion <p>On some systems autocompletion can be enabled for babylon, more information on autocompletion can be found on the click documentation (since babylon is basd on <code>click</code>)</p> Example of click autocompletion command for <code>bash</code> <pre><code>echo 'eval \"$(_BABYLON_COMPLETE=bash_source babylon)\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"guides/installation/#get-babylon-from-docker","title":"Get Babylon from docker","text":"Prerequisites Requirement Docker <p>Choosing the version of Babylon you want to use you can run the following command (here for version <code>1.2.0</code>) </p> Download docker image <pre><code>docker pull ghcr.io/cosmo-tech/babylon:1.2.0\ndocker tag ghcr.io/cosmo-tech/babylon:1.2.0 babylon\n</code></pre> <p>It will download for you the required docker image, and rename it to <code>babylon</code></p> Start Babylon docker image <p>Using the following command you get in a working Babylon environment, allowing you to run any command you will like <pre><code>docker run -ti --rm babylon\n</code></pre></p> <p>Warning</p> <p>In this environment your changes to the files won't be persisted when you leave it. The following tips will help you set up persitance for your config, but will use knowledge of Babylon explained in future guides.</p> Persist configurations and use local content as a working dir Info <p>This tip concern some principle of Babylon explained is other guides, you can skip it for now if you want to understand those principles before running commands using them.</p> <p>To persist configuration we will use the <code>--mount</code> option of Docker to persist our data across runs</p> Persist configuration <pre><code>mkdir babylon_config\ndocker run -ti --rm --mount type=bind,source=\"$(pwd)\"/babylon_config,target=/opt/babylon babylon\n</code></pre> <p>This command will persist your babylon configuration in a local <code>/babylon_config</code> folder allowing you to keep it across runs (in the same folder)</p> <p>Now if you want to use your local files as a working directory for your commands you can do the following</p> Use local folder as working dir <pre><code>docker run -ti --rm --mount type=bind,source=\"$(pwd)\",target=/etc/babylon/workingdir babylon\n</code></pre> <p>This command will use your current folder as a working directory for your babylon commands</p> <p>Combining both options allows for a persistent content and config across runs</p> Combine both for persitence <pre><code>docker run -ti --rm --mount type=bind,source=\"$(pwd)\"/babylon_config,target=/opt/babylon --mount type=bind,source=\"$(pwd)\",target=/etc/babylon/workingdir babylon\n</code></pre> Use aliases to make a babylon command using docker <p>Info</p> <ul> <li>Only work on system having the <code>alias</code> command</li> <li>Won't allow you to use auto-completion</li> </ul> <p>The following command will create a command <code>babylon</code> having the same use as the one you would get by installing the sources but by using docker.</p> <code>babylon</code> alias command <pre><code>alias babylon=\"docker run -ti --rm --mount type=bind,source=$(pwd)/babylon_config,target=/opt/babylon --mount type=bind,source=$(pwd),target=/etc/babylon/workingdir --entrypoint babylon babylon\"\n</code></pre>"},{"location":"guides/platform/","title":"Platform configuration values","text":""},{"location":"guides/platform/#api_url","title":"<code>api_url</code>Cosmotech API URL","text":"What is this value ? The url of the cosmotech API How to get a value to set here ? In the azure portal, navigate to your app registration for your api. Then look at the value in <code>Application ID URI</code> <p><code>https://dev.api.cosmotech.com</code></p>"},{"location":"guides/platform/#api_scope","title":"<code>api_scope</code>Cosmotech API Scope","text":"What is this value ? The scope used to authenticate to the cosmotech API How to get a value to set here ? Depending on your authentication to azure, the format of the scope can change  Using <code>az cli</code>Using an app registration <p>Your scope should finish in <code>/.default</code> like in the example</p> <p>You need to use the scope defined in your Azure Portal, under <code>App registrations &gt; &lt;your api registration&gt; &gt; Expose an API</code> </p> <p><code>https://dev.api.cosmotech.com/.default</code></p>"},{"location":"guides/platform/#azure_subscription","title":"<code>azure_subscription</code>Azure Subscription ID","text":"What is this value ? The id of the azure subscription used to contain the platform How to get a value to set here ? Can be found in your azure portal, under Subscriptions   <p><code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code></p>"},{"location":"guides/platform/#adx_cluster_name","title":"<code>adx_cluster_name</code>Azure Data Explorer Cluster Name","text":"What is this value ? The name of the Azure Data Explorer Cluster of your platform How to get a value to set here ? Can be found in your azure portal, under Azure Data Explorer Clusters   <p><code>platformcluster</code></p>"},{"location":"guides/platform/#resource_group_name","title":"<code>resource_group_name</code>Resource Group Name","text":"What is this value ? The name fo the resource group used on the platform How to get a value to set here ? Can be found in your azure portal, under Resource Groups   <p><code>Platform Resource Group</code></p>"},{"location":"guides/platform/#csm_acr_registry_name","title":"<code>csm_acr_registry_name</code>Cosmo ACR Registery Name","text":"What is this value ? ACR registry name used as source for your containers How to get a value to set here ? Can be found in your Azure Portal under Container Registeries &gt; <code>&lt;your registery&gt;</code> &gt; Login server   <p><code>source_registry.azurecr.io</code></p>"},{"location":"guides/platform/#acr_registry_name","title":"<code>acr_registry_name</code>ACR Registery Name","text":"What is this value ? ACR registry name used as target for your containers How to get a value to set here ? Can be found in your Azure Portal under Container Registeries &gt; <code>&lt;your registery&gt;</code> &gt; Login server   <p><code>dest_registry.azurecr.io</code></p>"},{"location":"guides/platform/#resources_location","title":"<code>resources_location</code>Resources Location","text":"What is this value ? azure resource location used on the platform How to get a value to set here ? You could use the same resource location as your api In case you want a full list of the available locations you can use the <code>az</code> cli and run the following command <pre><code>az account list-locations\n</code></pre> <p><code>westeurope</code></p>"},{"location":"guides/platform/#storage_account_name","title":"<code>storage_account_name</code>Storage Account Name","text":"What is this value ? Name of the main storage account tied to your platform How to get a value to set here ? Can be found in your Azure Portal under Storage Accounts   <p><code>mystorageaccount</code></p>"},{"location":"guides/platform/#powerbi_api_scope","title":"<code>powerbi_api_scope</code>Power BI API Scope","text":"What is this value ? Api scope to identify to PowerBI How to get a value to set here ? Unless you use specific versions of Power BI you can use the default value that is set as example here   <p><code>https://analysis.windows.net/powerbi/api/.default</code></p>"},{"location":"partials/Configuration/1-Edit/","title":"1 Edit","text":"<p>The following command exists : <code>babylon config platform edit</code></p> <p>It will allow you to open your configuration file directly in a file editor.</p> Help of the command <pre><code>babylon config platform edit --help\n# &lt;Usage: babylon config platform edit [OPTIONS] [PLATFORM]\n#\n# Open editor to edit variables in given platform\n#\n# will open default platform if no argument is passed\n#  \n# Options:\n#   -h, --help  Show this message and exit.\n</code></pre> <p>1 positional parameter is optional : <code>PLATFORM</code></p> <p><code>PLATFORM</code> can be replace by the path to a platform file to open, if not present your current platform file will be opened.</p> Set a first variable <p>Running the command will open a text editor of the file you can then add the values you want to each keys <pre><code>babylon config platform edit\n</code></pre> </p>"},{"location":"partials/Configuration/1-SetVariable/","title":"1 SetVariable","text":"<p>The following command exists : <code>babylon config platform set-variable</code></p> Help of the command <pre><code>babylon config platform set-variable --help\n# Usage: babylon config platform set-variable [OPTIONS] VARIABLE_KEY\n#                                             VARIABLE_VALUE\n#\n#   Set a platform variable with a new value\n#  \n# Options:\n#   -h, --help  Show this message and exit.\n</code></pre> <p>2 positional parameters are required : <code>VARIABLE_KEY</code> and <code>VARIABLE_VALUE</code></p> Set a first variable <pre><code>babylon config platform set-variable VARIABLE_KEY VARIABLE_VALUE\n# Now our variable \"VARIABLE_KEY\" will have the value \"VARIABLE_VALUE\" in our config file, we can check it by displaying the config\nbabylon config display\n</code></pre>"},{"location":"partials/Configuration/1-UseEditor/","title":"1 UseEditor","text":"<p>By running the following command you can see a lot of information</p> Config display <pre><code>babylon --bare config display\n# Configuration:\n#   dir: /home/user/.config/babylon\n#   deployment: /home/user/.config/babylon/deployments/deploy.yaml\n#       ...\n#  platform: /home/user/.config/babylon/platforms/platform.yaml\n#       ...\n#  plugins: \n</code></pre> <p>Here we will focus on one line : <code>platform: /home/user/.config/babylon/platforms/platform.yaml</code></p> <p>This is the path to your local config file for your platform. You can just open it using you favorite text editor to be able to update your configuration values.</p>"},{"location":"partials/Configuration/2-Commands/","title":"2 Commands","text":"<p>Just like the <code>edit</code> and <code>set-variable</code> commands you can use the <code>create</code> and <code>select</code> commands to switch between platform/deployment configuration.</p> <code>create</code> command <p><pre><code>babylon config platform create NewPlatform\n</code></pre> This command will create a new platform file called NewPlatform in your configuration folder</p> Use of the <code>select</code> command <p></p> <p>you can see that we selected the platform <code>NewPlatform</code> and after the select the correct one was selected</p>"},{"location":"partials/Configuration/2-EnvVars/","title":"2 EnvVars","text":"<p>You can use the following environment variable to replace your default configuration folder by a custom one : <code>BABYLON_CONFIG_DIRECTORY</code></p> <p>By setting that value to an absolute path you will access it wherever you are in your system,  but if you want to keep a simple configuration change depending on the folder you are,  you can instead set it to a relative path,  which will allow you to change your configuration everytime you move to another folder.</p> use <code>direnv</code> <p>You can use tools like  to set alternate values for your envvar and easily switch while moving around folders</p>"},{"location":"partials/Configuration/ErrorMessageDescription/","title":"ErrorMessageDescription","text":"<p>The message can be separated in 3 parts</p> The Logs <pre><code>2023/01/20 - 14:59:09 ERROR    Key storage_account_name can not be found in platform config file\n2023/01/20 - 14:59:09 ERROR    storage won't run without it.\n</code></pre> The Trace <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /home/afossart/git_repos/Babylon/.venv/bin/babylon:11 in &lt;module&gt;                                    \u2502\n\u2502                                                                                                      \u2502\n\u2502    8 if __name__ == '__main__':                                                                      \u2502\n\u2502    9 \u2502   sys.argv[0] = re.sub(r'(-script\\.pyw?|\\.exe)?$', '', sys.argv[0])                           \u2502\n\u2502   10 \u2502   sys.exit(                                                                                   \u2502\n\u2502 \u2771 11 \u2502   \u2502   load_entry_point('Babylon', 'console_scripts', 'babylon')()                             \u2502\n\u2502   12 \u2502   )                                                                                           \u2502\n\u2502   13                                                                                                 \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/core.py:1130 in __call__    \u2502\n\u2502                                                                                                      \u2502\n\u2502   1127 \u2502                                                                                             \u2502\n\u2502   1128 \u2502   def __call__(self, *args: t.Any, **kwargs: t.Any) -&gt; t.Any:                               \u2502\n\u2502   1129 \u2502   \u2502   \"\"\"Alias for :meth:`main`.\"\"\"                                                         \u2502\n\u2502 \u2771 1130 \u2502   \u2502   return self.main(*args, **kwargs)                                                     \u2502\n\u2502   1131                                                                                               \u2502\n\u2502   1132                                                                                               \u2502\n\u2502   1133 class Command(BaseCommand):                                                                   \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/core.py:1055 in main        \u2502\n\u2502                                                                                                      \u2502\n\u2502   1052 \u2502   \u2502   try:                                                                                  \u2502\n\u2502   1053 \u2502   \u2502   \u2502   try:                                                                              \u2502\n\u2502   1054 \u2502   \u2502   \u2502   \u2502   with self.make_context(prog_name, args, **extra) as ctx:                      \u2502\n\u2502 \u2771 1055 \u2502   \u2502   \u2502   \u2502   \u2502   rv = self.invoke(ctx)                                                     \u2502\n\u2502   1056 \u2502   \u2502   \u2502   \u2502   \u2502   if not standalone_mode:                                                   \u2502\n\u2502   1057 \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   return rv                                                             \u2502\n\u2502   1058 \u2502   \u2502   \u2502   \u2502   \u2502   # it's not safe to `ctx.exit(rv)` here!                                   \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/core.py:1657 in invoke      \u2502\n\u2502                                                                                                      \u2502\n\u2502   1654 \u2502   \u2502   \u2502   \u2502   super().invoke(ctx)                                                           \u2502\n\u2502   1655 \u2502   \u2502   \u2502   \u2502   sub_ctx = cmd.make_context(cmd_name, args, parent=ctx)                        \u2502\n\u2502   1656 \u2502   \u2502   \u2502   \u2502   with sub_ctx:                                                                 \u2502\n\u2502 \u2771 1657 \u2502   \u2502   \u2502   \u2502   \u2502   return _process_result(sub_ctx.command.invoke(sub_ctx))                   \u2502\n\u2502   1658 \u2502   \u2502                                                                                         \u2502\n\u2502   1659 \u2502   \u2502   # In chain mode we create the contexts step by step, but after the                    \u2502\n\u2502   1660 \u2502   \u2502   # base command has been invoked.  Because at that point we do not                     \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/core.py:1657 in invoke      \u2502\n\u2502                                                                                                      \u2502\n\u2502   1654 \u2502   \u2502   \u2502   \u2502   super().invoke(ctx)                                                           \u2502\n\u2502   1655 \u2502   \u2502   \u2502   \u2502   sub_ctx = cmd.make_context(cmd_name, args, parent=ctx)                        \u2502\n\u2502   1656 \u2502   \u2502   \u2502   \u2502   with sub_ctx:                                                                 \u2502\n\u2502 \u2771 1657 \u2502   \u2502   \u2502   \u2502   \u2502   return _process_result(sub_ctx.command.invoke(sub_ctx))                   \u2502\n\u2502   1658 \u2502   \u2502                                                                                         \u2502\n\u2502   1659 \u2502   \u2502   # In chain mode we create the contexts step by step, but after the                    \u2502\n\u2502   1660 \u2502   \u2502   # base command has been invoked.  Because at that point we do not                     \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/core.py:1654 in invoke      \u2502\n\u2502                                                                                                      \u2502\n\u2502   1651 \u2502   \u2502   \u2502   \u2502   cmd_name, cmd, args = self.resolve_command(ctx, args)                         \u2502\n\u2502   1652 \u2502   \u2502   \u2502   \u2502   assert cmd is not None                                                        \u2502\n\u2502   1653 \u2502   \u2502   \u2502   \u2502   ctx.invoked_subcommand = cmd_name                                             \u2502\n\u2502 \u2771 1654 \u2502   \u2502   \u2502   \u2502   super().invoke(ctx)                                                           \u2502\n\u2502   1655 \u2502   \u2502   \u2502   \u2502   sub_ctx = cmd.make_context(cmd_name, args, parent=ctx)                        \u2502\n\u2502   1656 \u2502   \u2502   \u2502   \u2502   with sub_ctx:                                                                 \u2502\n\u2502   1657 \u2502   \u2502   \u2502   \u2502   \u2502   return _process_result(sub_ctx.command.invoke(sub_ctx))                   \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/core.py:1404 in invoke      \u2502\n\u2502                                                                                                      \u2502\n\u2502   1401 \u2502   \u2502   \u2502   echo(style(message, fg=\"red\"), err=True)                                          \u2502\n\u2502   1402 \u2502   \u2502                                                                                         \u2502\n\u2502   1403 \u2502   \u2502   if self.callback is not None:                                                         \u2502\n\u2502 \u2771 1404 \u2502   \u2502   \u2502   return ctx.invoke(self.callback, **ctx.params)                                    \u2502\n\u2502   1405 \u2502                                                                                             \u2502\n\u2502   1406 \u2502   def shell_complete(self, ctx: Context, incomplete: str) -&gt; t.List[\"CompletionItem\"]:      \u2502\n\u2502   1407 \u2502   \u2502   \"\"\"Return a list of completions for the incomplete value. Looks                       \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/core.py:760 in invoke       \u2502\n\u2502                                                                                                      \u2502\n\u2502    757 \u2502   \u2502                                                                                         \u2502\n\u2502    758 \u2502   \u2502   with augment_usage_errors(__self):                                                    \u2502\n\u2502    759 \u2502   \u2502   \u2502   with ctx:                                                                         \u2502\n\u2502 \u2771  760 \u2502   \u2502   \u2502   \u2502   return __callback(*args, **kwargs)                                            \u2502\n\u2502    761 \u2502                                                                                             \u2502\n\u2502    762 \u2502   def forward(                                                                              \u2502\n\u2502    763 \u2502   \u2502   __self, __cmd: \"Command\", *args: t.Any, **kwargs: t.Any  # noqa: B902                 \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/.venv/lib/python3.9/site-packages/click/decorators.py:26 in new_func\u2502\n\u2502                                                                                                      \u2502\n\u2502    23 \u2502   \"\"\"                                                                                        \u2502\n\u2502    24 \u2502                                                                                              \u2502\n\u2502    25 \u2502   def new_func(*args, **kwargs):  # type: ignore                                             \u2502\n\u2502 \u2771  26 \u2502   \u2502   return f(get_current_context(), *args, **kwargs)                                       \u2502\n\u2502    27 \u2502                                                                                              \u2502\n\u2502    28 \u2502   return update_wrapper(t.cast(F, new_func), f)                                              \u2502\n\u2502    29                                                                                                \u2502\n\u2502                                                                                                      \u2502\n\u2502 /home/afossart/git_repos/Babylon/Babylon/utils/decorators.py:209 in wrapper                          \u2502\n\u2502                                                                                                      \u2502\n\u2502   206 \u2502   \u2502   \u2502   \u2502   if value in [None, \"\"] and required:                                           \u2502\n\u2502   207 \u2502   \u2502   \u2502   \u2502   \u2502   logger.error(f\"Key {yaml_key} can not be found in {getter.__doc__}\")       \u2502\n\u2502   208 \u2502   \u2502   \u2502   \u2502   \u2502   logger.error(f\"{click.get_current_context().command.name} won't run        \u2502\n\u2502 \u2771 209 \u2502   \u2502   \u2502   \u2502   \u2502   raise KeyError(f\"Key {yaml_key} can not be found in {getter.__doc__}       \u2502\n\u2502   210 \u2502   \u2502   \u2502   \u2502   return func(*args, **kwargs)                                                   \u2502\n\u2502   211 \u2502   \u2502   \u2502                                                                                      \u2502\n\u2502   212 \u2502   \u2502   \u2502   if not required:                                                                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> The Error <pre><code>KeyError: 'Key storage_account_name can not be found in platform config file'\n</code></pre> <p>In most of the case you can focus on the logs at the beginning of the message,  if this is a known error it should give you enough information on how to solve it. Here we can see that the key <code>storage_account_name</code> is not found in the <code>platform config file</code> and that the command won't run without it.</p> <p>In case the logs are not enough you can look at the error, which should help you, and if neither helps you can start an issue on the Babylon repository by sending the command you ran and the trace.</p>"},{"location":"partials/Configuration/FirstCommands/","title":"FirstCommands","text":"<p>You can start by looking around some of the first commands you could run in Babylon</p> Simple commands <pre><code># You can start by looking at the basic help\nbabylon --help\n# Next you can take a look at the version of babylon you installed\nbabylon --version\n# Now you can look at the state of your configuration\nbabylon config display\n</code></pre> <p>As you can see in the final command, your current configuration has a lot of keys defined but most of them are empty.</p>"},{"location":"partials/Installation/GetLatestFromGit/","title":"GetLatestFromGit","text":"<p>You can download the latest version of Babylon using git with the following command</p> Get sources from git <pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git Babylon-Sources\n</code></pre> <p>You now have a folder called <code>Babylon-Sources</code> which we will refer to as \"Babylon Installation Folder\" for the rest of the guide</p> <p>If you want a specific version of Babylon you can check which version number you want (for example <code>1.2.0</code>) and to the following</p> Change the source version from git <pre><code>cd Babylon-Source\ngit checkout 1.2.0\n</code></pre> <p>Now your installation folder will have the code of the version <code>1.2.0</code> ready to be used</p>"},{"location":"partials/Installation/GetOfficialRelease/","title":"GetOfficialRelease","text":"<p>So you choose to use releases, very well,  go on the following page to get one of the releases </p> <p>Then you can select a type of compressed folder you want (<code>.zip</code> or <code>.tar.gz</code>) and download the file.</p> Download a release <p></p> <p>Now you can decompress the file you downloaded.</p> Decompress a file ziptar.gz <pre><code>unzip Babylon-1.2.0.zip\n</code></pre> <pre><code>tar -xf Babylon-1.2.0.tar.gz\n</code></pre> <p>After run you now have a folder named <code>Babylon-1.2.0</code> which we will refer to as \"Babylon Installation Folder\" for the rest of the guide</p>"},{"location":"partials/Installation/InstallFromDocker/","title":"InstallFromDocker","text":""},{"location":"partials/Installation/InstallFromDocker/#get-babylon-from-docker","title":"Get Babylon from docker","text":"Prerequisites Requirement Docker <p>Choosing the version of Babylon you want to use you can run the following command (here for version <code>1.2.0</code>) </p> Download docker image <pre><code>docker pull ghcr.io/cosmo-tech/babylon:1.2.0\ndocker tag ghcr.io/cosmo-tech/babylon:1.2.0 babylon\n</code></pre> <p>It will download for you the required docker image, and rename it to <code>babylon</code></p> Start Babylon docker image <p>Using the following command you get in a working Babylon environment, allowing you to run any command you will like <pre><code>docker run -ti --rm babylon\n</code></pre></p> <p>Warning</p> <p>In this environment your changes to the files won't be persisted when you leave it. The following tips will help you set up persitance for your config, but will use knowledge of Babylon explained in future guides.</p> Persist configurations and use local content as a working dir Info <p>This tip concern some principle of Babylon explained is other guides, you can skip it for now if you want to understand those principles before running commands using them.</p> <p>To persist configuration we will use the <code>--mount</code> option of Docker to persist our data across runs</p> Persist configuration <pre><code>mkdir babylon_config\ndocker run -ti --rm --mount type=bind,source=\"$(pwd)\"/babylon_config,target=/opt/babylon babylon\n</code></pre> <p>This command will persist your babylon configuration in a local <code>/babylon_config</code> folder allowing you to keep it across runs (in the same folder)</p> <p>Now if you want to use your local files as a working directory for your commands you can do the following</p> Use local folder as working dir <pre><code>docker run -ti --rm --mount type=bind,source=\"$(pwd)\",target=/etc/babylon/workingdir babylon\n</code></pre> <p>This command will use your current folder as a working directory for your babylon commands</p> <p>Combining both options allows for a persistent content and config across runs</p> Combine both for persitence <pre><code>docker run -ti --rm --mount type=bind,source=\"$(pwd)\"/babylon_config,target=/opt/babylon --mount type=bind,source=\"$(pwd)\",target=/etc/babylon/workingdir babylon\n</code></pre> Use aliases to make a babylon command using docker <p>Info</p> <ul> <li>Only work on system having the <code>alias</code> command</li> <li>Won't allow you to use auto-completion</li> </ul> <p>The following command will create a command <code>babylon</code> having the same use as the one you would get by installing the sources but by using docker.</p> <code>babylon</code> alias command <pre><code>alias babylon=\"docker run -ti --rm --mount type=bind,source=$(pwd)/babylon_config,target=/opt/babylon --mount type=bind,source=$(pwd),target=/etc/babylon/workingdir --entrypoint babylon babylon\"\n</code></pre>"},{"location":"partials/Installation/InstallFromSources/","title":"InstallFromSources","text":""},{"location":"partials/Installation/InstallFromSources/#get-babylon-sources","title":"Get Babylon sources","text":"Prerequisites Requirement Python 3.9+ Pip 22.2+ Git required for latest version <p>We will go through the process of getting a version of Babylon before the installation.</p> <p>You can make your choice on how you may want to process :</p> Get official releasesUse latest version from git <p>So you choose to use releases, very well,  go on the following page to get one of the releases </p> <p>Then you can select a type of compressed folder you want (<code>.zip</code> or <code>.tar.gz</code>) and download the file.</p> Download a release <p></p> <p>Now you can decompress the file you downloaded.</p> Decompress a file ziptar.gz <pre><code>unzip Babylon-1.2.0.zip\n</code></pre> <pre><code>tar -xf Babylon-1.2.0.tar.gz\n</code></pre> <p>After run you now have a folder named <code>Babylon-1.2.0</code> which we will refer to as \"Babylon Installation Folder\" for the rest of the guide</p> <p>You can download the latest version of Babylon using git with the following command</p> Get sources from git <pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git Babylon-Sources\n</code></pre> <p>You now have a folder called <code>Babylon-Sources</code> which we will refer to as \"Babylon Installation Folder\" for the rest of the guide</p> <p>If you want a specific version of Babylon you can check which version number you want (for example <code>1.2.0</code>) and to the following</p> Change the source version from git <pre><code>cd Babylon-Source\ngit checkout 1.2.0\n</code></pre> <p>Now your installation folder will have the code of the version <code>1.2.0</code> ready to be used</p>"},{"location":"partials/Installation/InstallFromSources/#install-babylon","title":"Install Babylon","text":"<p>Now that you have a \"Babylon Installation Folder\" ready we can move to the installation process</p> Use a <code>venv</code> <p>If you want you can set up a virtual environment in python using the library <code>venv</code> to keep your babylon dependencies in a single location.</p> Set up a <code>venv</code> <pre><code># Make sure you have the library venv installed\npip install --user venv\n# Create a venv in the folder `.venv`\npython -m venv .venv\n</code></pre> <p>Now you can activate your venv (created in the folder <code>.venv</code>) and follow the rest of this tutorial.</p> Activate on unix systemsActivate on windows (<code>cmd.exe</code>)Activate on windows (<code>PowerShell</code>) <pre><code>source .venv/bin/activate\n</code></pre> <pre><code>.venv\\Scripts\\activate.bat\n</code></pre> <pre><code>.venv\\Scripts\\Activate.ps1\n</code></pre> <p>Warning</p> <p>Once you install babylon in a venv you will need to activate this venv every time you want to use babylon.</p> <p>The setup is fairy direct, the following command will allow a full install of Babylon</p> <p>Setup babylon</p> <pre><code>pip install &lt;Babylon Installation Folder&gt;\n</code></pre> Enable autocompletion <p>On some systems autocompletion can be enabled for babylon, more information on autocompletion can be found on the click documentation (since babylon is basd on <code>click</code>)</p> Example of click autocompletion command for <code>bash</code> <pre><code>echo 'eval \"$(_BABYLON_COMPLETE=bash_source babylon)\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"partials/Installation/InstallPrerequisites/","title":"InstallPrerequisites","text":"Requirement Python 3.9+ Pip 22.2+ Git required for latest version"},{"location":"partials/Installation/VenvSetup/","title":"VenvSetup","text":"<p>If you want you can set up a virtual environment in python using the library <code>venv</code> to keep your babylon dependencies in a single location.</p> Set up a <code>venv</code> <pre><code># Make sure you have the library venv installed\npip install --user venv\n# Create a venv in the folder `.venv`\npython -m venv .venv\n</code></pre> <p>Now you can activate your venv (created in the folder <code>.venv</code>) and follow the rest of this tutorial.</p> Activate on unix systemsActivate on windows (<code>cmd.exe</code>)Activate on windows (<code>PowerShell</code>) <pre><code>source .venv/bin/activate\n</code></pre> <pre><code>.venv\\Scripts\\activate.bat\n</code></pre> <pre><code>.venv\\Scripts\\Activate.ps1\n</code></pre> <p>Warning</p> <p>Once you install babylon in a venv you will need to activate this venv every time you want to use babylon.</p>"}]}