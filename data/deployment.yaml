# In a yaml format "|-" means that the value is a block of text where:
#   - "|-" : every newline will be doubled : allowing to keep the format in markdown
#   - "-" : the trailing white spaces are striped
deployment_name:
  display_name: Deployment Name
  description: |-
    Name of the current deployment, used to identify resources at creation
  example: |-
    AssetDev  
    SupplyStaging
organization_id:
  display_name: Organization ID
  description: |-
    The ID of the organization in the Cosmo Tech API
  howto: |-
    Can be found using the following command
    ```bash
    babylon api organization get-all --filter "[?name==\`Cosmo Tech\`]"
    ```
    It can also be created and filled automatically by babylon
    ```bash
    babylon api organization create MyOrg --select
    ```
  example: |-
    o-XXXXXXXXXX
solution_id:
  display_name: Solution ID
  description: |-
    The ID of the solution in the Cosmo Tech API
  howto: |-
    Can be found using the following command
    ```bash
    babylon api solution get-all --filter "[*].{name:name,id:id}"  
    ``` 
    It can also be created and filled automatically by babylon  
    ```bash
    babylon api solution create MyOrg -i [solution_file.yml] --select  
    ```
  example: |-
    sol-XXXXXXXXXX  
workspace_id :
  display_name: Workspace ID
  description: |-
    The ID of the workspace on the API
  howto: |-
    Can be found using the following command
    ```bash
    babylon api workspace get-all --filter "[*].{name:name,id:id}"
    ```
    It can also be created and filled automatically by babylon
    ```bash
    babylon api workspace create MyWorkspace --select
    ```
  example: |-
    w-XXXXXXXXXX
workspace_key :
  display_name: Workspace Key
  description: |-
    The key of the workspace on the API shared with Terraform configuration
  howto: |-
    Can be found using the following command
    ```bash
    babylon api workspace get-all --filter "[*].{name:name,key:key}"
    ```  
  example: |-
    workspacekey
api_url :
  display_name: Cosmo Tech API URL
  description: |-
    The URL of the Cosmo Tech API
  howto: |-
    Your url is the following value, replacing the app registration name with the one used for your platform
    ```bash
    babylon azure ad app get-all --filter "[?displayName==\`phoenix core dev\`].identifierUris"
    ```  
  example: |-
    https://dev.api.cosmotech.com
resource_group_name :
  display_name: Resource Group Name
  description: |-
    The name fo the resource group used for users deployment (function apps, webapp)
  howto: |-
    Use the following commands
    ```bash
    az login -t [tenant_id]
    az group list --query [*].name
    ```
  example: |-
    azure_ressource_group
resources_location :
  display_name: Resources Location
  description: |-
    Azure resource location used on the platform
  howto: |-
    You could use the same resource location as your API  
    In case you want a full list of the available locations you can use the `az` CLI and run the following command  
    ```bash
    az account list-locations --query [*].name
    ```
  example: |-
    westeurope
adx_database_name :
  display_name: Azure Data Explorer Database Name
  description: |-
    The name of the database used in Azure Data Explorer
  howto: |-
    Use the following commands
    ```bash
    az extension add -n kusto
    az login -t [tenant_id]
    az kusto database list --resource-group [resource_group] --cluster-name [cluster_name]
    ```
  example: |-
    o-xxxxxxxxxx-workspacename
digital_twin_url :
  display_name: Digital Twin URL
  description: |-
    URL of the Azure Digital Twin instance to use
  howto: |-
    Use the following az cli command
    ```bash
    az login -t [tenant_id]
    az dt list --query [*].hostName
    ```
  example: |-
    https://mydigitaltwin.api.weu.digitaltwins.azure.net
csm_simulator_repository :
  display_name: Cosmo Simulator Repository
  description: |-
    The solution simulator docker origin repository
  howto: |-
    Use the following commands
    ```bash
    az login -t [tenant_id]
    babylon azure acr list --registry [my_registry.azurecr.io]
    ```
  example: |-
    solution_simulator
simulator_repository :
  display_name: Simulator Repository
  description: |-
    The solution simulator docker target repository (repository value in Solution.yaml)
  howto: |-
    Use the following commands
    ```bash
    az login -t [tenant_id]
    babylon azure acr list --registry [my_registry.azurecr.io]
    ```
  example: |-
    solution_simulator
simulator_version :
  display_name: Simulator Version
  description: |-
    the solution simulator version (version value in Solution.yaml)
  howto: |-
    The version of the simulator you want to use, as communicated by the solution developers.
  example: |-
    1.0.0
send_scenario_metadata_to_event_hub :
  display_name: Send scenario metadata to Event Hub
  description: |-
    Set this property to false to not send scenario metada to Azure Event Hub Namespace for this Workspace.
  howto: |-
    Boolean property allowing to send metadata of the scenario runs to the event hub.
    
    - The Event Hub Namespace must be named `<organization_id>-<workspace_id>` (in lower case).
    - This Namespace must also contain two Event Hubs named `probesmeasures` and `scenariorun`.
  example: |-
    true
use_dedicated_event_hub_namespace :
  display_name: Use dedicated Event Hub Namespace
  description: |-
    Set this property to false to not use a dedicated Azure Event Hub Namespace for this Workspace.
  howto: |-
    Boolean property allowing to use dedicated event hub namespace.
    
    - The Event Hub Namespace must be named `<organization_id>-<workspace_id>` (in lower case).
    - This Namespace must also contain two Event Hubs named `probesmeasures` and `scenariorun`.
  example: |-
    true
powerbi_workspace_id :
  display_name: Power BI workspace ID
  description: |-
    ID of the power BI workspace to keep the dashboards for this deployment.
  howto: |-
    Can be found using the following command
    ```bash
    babylon powerbi workspace get -n [workspace_name]"
    ```
    It can also be created and filled automatically by babylon
    ```bash
    babylon powerbi workspace create MyWorkspace --select
    ```
  example: |-
    xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
webapp_domain :
  display_name: WebApp URL domain
  description: |-
    URL of the custom domain used for the Web App
  howto: |-
    This url is created by creating a new [DNS Record for app.cosmotech.com](https://portal.azure.com/#blade/HubsExtension/BrowseResource/resourceType/Microsoft.Network%2FdnsZones)
  example: |-
    https://mycustomer.app.cosmotech.com
webapp_location :
  display_name: WebApp Azure location
  description: |-
    Azure Location at which the static web app resource will be created.
  howto: |-
    You can access a list of location names with the following command
    ```bash
    az account list-locations -o table
    ```
  example: |-
    westeurope
webapp_repository :
  display_name: WebApp Github repository url
  description: |-
    Github repository where the WebApp source code is stored
  howto: |-
    Create a [new github repository](https://github.com/new/import) and import Babylon Sample WebApp source code
  example: |-
    https://github.com/Cosmo-Tech/customer-webapp
webapp_repository_branch :
  display_name: WebApp Github branch
  description: |-
    Github branch used to store the Static Web App source code
  example: |-
    `main`
webapp_registration_id :
  display_name: WebApp App Registration ID
  description: |-
    Azure Active Directory App Registration ID used to give permissions to the Static Web App
  howto: |-
    Can be found using the following command
    ```bash
    babylon azure ad app get-all --filter "[*].{name:displayName,id:id}"
    ```
    It can also be created by babylon during `babylon webapp deploy` or manually with
    ```bash
    babylon azure ad app create [my_app] -o my_app.json
    babylon config set-variable deploy webapp_registration_id %workdir[my_app.json]%id
    ```
  example: |-
    xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
webapp_insights_instrumentation_key :
  display_name: WebApp Insights instrumentation key
  description: |-
    Azure Application Insights instrumentation key used to send logs from the Static Web App
  howto: |-
    Can be found using the following command
    ```bash
    babylon azure appinsight get-all --filter "[*].{name:name,key:properties.InstrumentationKey}"
    ```
    It will be set automatically during `babylon webapp deploy`
  example: |-
    xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
webapp_enable_insights : 
  display_name: WebApp Insights enabling
  description: |-
    Weither to enable Azure Application Insights for the static WebApp
  example: |-
    True
terraform_cloud_workspace_id :
  display_name: Terraform Cloud Workspace ID
  description: |-
    Terraform Cloud workspace used for terraform operations
  howto: |-
    Can be found using the following command
    ```bash
    babylon terraform-cloud workspace get-all
    ```
    It can also be created and set by babylon
    ```bash
    babylon terraform-cloud workspace create [my_workspace] --select
    ```
  example: |-
    xxxxxxxx
powerbi_api_scope :
  display_name: PowerBI API Scope
  description: |-
    Used to make api calls to PowerBI, keep the default value except for on-premise PowerBI install
  example: |-
    "https://analysis.windows.net/powerbi/api/.default"
