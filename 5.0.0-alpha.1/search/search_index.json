{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Discover Babylon","text":"<p>Welcome to the End User Documentation of Babylon</p> <p>This documentation will guide you on your learning adventure with Babylon.</p>"},{"location":"#what-is-babylon","title":"What is Babylon ?","text":"<p>Babylon is a <code>CLI[^1]</code> principally targeted at Devops users of the Cosmo Tech Platform. It allows the user to interact with the multiple systems used in the platform, performing multiple operations in a simple and streamlined fashion.</p> <p>Instead of requiring the user to learn how to use numerous software to interact with the systems, Babylon allows you to learn a single format.</p>"},{"location":"#why-babylon","title":"Why Babylon ?","text":"<p>Babylon was developed to help users getting around the difficulty of juggling around with multiple softwares to interact with the multiple systems composing the Cosmo Tech Platform.</p> <p>By using Babylon you only need one single software to work on your multiple needs.</p> <p>The team behind Babylon is closely tied to the one working on the Cosmo Tech Platform, and new features of the platform can quickly be added to Babylon allowing users to get fast access to the newest content.</p>"},{"location":"#still-not-convinced","title":"\ud83e\udd14 Still not convinced ?","text":"<p>Why should you care</p> <p>Babylon is more than a CLI it's a framework It not only gives you access to low-level commands (direct interaction with a single system), but also provides high-level commands that allow automation of entire processes.  </p> <p>This reduces the risk of human errors. This saves time when dealing with complex workflows.  </p>"},{"location":"#macro-commands","title":"\ud83d\udd11 Macro Commands","text":"<p>Automation made simple</p> <p>Babylon introduces <code>Macro Commands[^2]</code>: combinations of low-level commands bundled into one simple instruction.  </p> <p>\ud83d\udc49 With Macro Commands, you can automate complex operations in a safer and faster way.  </p> <ol> <li> <p>Command Line Interface (CLI): A software used in a terminal console, allowing to run commands.\u00a0\u21a9</p> </li> <li> <p>Macro Commands: A combination of low level commands allowing to do complex operation in a high level manner.\u00a0\u21a9</p> </li> </ol>"},{"location":"Licence/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2021\u20132025 Cosmo Tech</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction,including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>\u26a0\ufe0f Disclaimer  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE</p>"},{"location":"Examples/","title":"Examples","text":"<p>A collection of examples to get started with Babylon for deploying and updating workspaces</p> <p> Example: Deploying a Cosmo Tech Workspace</p> <p>This guide provides an example on how to deploy a workspace using Babylon.</p> <p> Deploy</p> <p> Example: Updating a Cosmo Tech Workspace</p> <p>This guide explains how to update a Cosmo Tech workspace.</p> <p> Udpate</p> <p> Example: Deploying a Cosmo Tech Workspace with v5</p> <p>This guide provides an example on how to deploy a workspace using Babylon 5.</p> <p> Deploy v5</p>"},{"location":"Examples/Example_Deploy_CosmoTech_workspace/","title":"Deploy Cosmo Tech workspace","text":"<p>Remember</p> <p>For deploying the workspace with Babylon, the project team should provide you with a delivery package containing all necessary files, including:  </p> <ul> <li>Manifest YAML files for deployment  </li> <li>ADX scripts  </li> <li>Power BI reports (for the solution)  </li> <li>Another delivery package for the web app, if needed  </li> </ul> <p>Example</p> <ul> <li>Workspace: https://github.com/Cosmo-Tech/delivery-project/tree/0.1.0 (project/ folder)  </li> <li>Webapp: https://github.com/Cosmo-Tech/webapp-project/tree/0.1.0</li> </ul>"},{"location":"Examples/Example_Deploy_CosmoTech_workspace/#preparation-github-repositors","title":"Preparation github repositors","text":"<p>we need to Create two GitHub repositories: one for the web app and another for the workspace. for best practice we can follow those naming format</p> <ul> <li>workspace repository : cluster_name-namespace_name-workspaces</li> <li>web app repository : cluster_name-namespace_name-webapps</li> </ul>"},{"location":"Examples/Example_Deploy_CosmoTech_workspace/#configuring-github-repositories","title":"Configuring GitHub Repositories","text":"<p>We start with the Web App repository by following these commands</p> <p>Commands to configure your web app branch</p> <p><pre><code>git clone git@github.com:Cosmo-Tech/cluster_name-namespace_name-webapps.git\n</code></pre> <pre><code>cd cluster_name-namespace_name-webapps\n</code></pre> <pre><code>git init\n</code></pre> <pre><code>echo \"# empty_webapp\" &gt;&gt; README.md\n</code></pre> <pre><code>git add README.md\n</code></pre> <pre><code>git commit -m \"first commit\"\n</code></pre> <pre><code>git remote add upstream git@github.com:Cosmo-Tech/azure-sample-webapp.git\n</code></pre> <pre><code>git remote set-url upstream --push \"NO\"\n</code></pre> <pre><code>git fetch --all --tags --prune\n</code></pre> <pre><code>git checkout -B &lt;BRANCH&gt; &lt;SOURCE_TAG&gt; # e.g main 0.1.0\n</code></pre> <pre><code>rm -rf .github/ .git-hooks .git/\n</code></pre> <pre><code>rm -r config.json   # \u26a0\ufe0f Remove if exists\n</code></pre> <pre><code>git init\n</code></pre> <pre><code>git config --global init.defaultBranch main\n</code></pre> <pre><code>git branch -m &lt;BRANCH&gt;   # e.g main \n</code></pre> <pre><code>git remote add origin git@github.com:&lt;YOUR_GITHUB_REPOSITORY&gt;.git\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"Deploy web app\"\n</code></pre> <pre><code>git push origin &lt;BRANCH&gt; -f # e.g main \n</code></pre></p> <p>Your web app GitHub repository is now initialized and contains the source code.</p> <p>Next, switch context to the Workspace repository and replicate the process by executing the following commands:</p> <p>Commands to configure your workspace branch</p> <p><pre><code>git clone --branch 0.1.0 --single-branch git@github.com:Cosmo-Tech/delivery-project.git\n</code></pre> <pre><code>mv delivery-project cluster_name-namespace_name-workspaces\n</code></pre> <pre><code>cd cluster_name-namespace_name-workspaces\n</code></pre> <pre><code>echo rm -rf .git/ .github/ \n</code></pre> <pre><code>git init\n</code></pre> <pre><code>git commit -m \"first commit\"\n</code></pre> <pre><code>git remote add origin git@github.com:Cosmo-Tech/cluster_name-namespace_name-workspaces.git\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"deploy workspace\"\n</code></pre> <pre><code>git push origin &lt;BRANCH&gt; -f  # e.g main \n</code></pre></p> <p>Note</p> <p>Before starting the deployment, check that all values in the manifest files (all <code>.yaml</code> files in your workspace repository) are correct. </p> <p>If anything is wrong, update them using the details from the customer\u2019s DevOps ticket.  </p> <p>Project folder must have the following structure:</p> <p>Tree</p> <pre><code>\u251c\u2500\u2500 variables.yaml\n\u251c\u2500\u2500 project\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 adx\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 scripts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 Create.kql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 connector_azure_storage.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 organization.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 powerbi\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 report1.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 report2.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 report3.pbix\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 solution.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 webapp.yaml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 workspace.yaml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"Examples/Example_Deploy_CosmoTech_workspace/#push-simulator-image-to-acr-target","title":"Push Simulator Image to ACR Target","text":"<p>In this step, you will push the simulator container image (as specified in the DevOps ticket) to the designated container registry.</p> <p>Pull and Push Simulator Image</p> <p><pre><code>az acr login -n &lt;source_acr_service_name&gt;.azurecr.io*\n</code></pre> <pre><code>docker pull &lt;source_acr_service_name&gt;.azurecr.io/&lt;image_name&gt;:&lt;image_version&gt;\n</code></pre> <pre><code>docker tag &lt;source_acr_service_name&gt;.azurecr.io/&lt;image_name&gt;:&lt;image_version&gt; &lt;destination_acr_service_name&gt;.azurecr.io/&lt;image_name&gt;:&lt;image_version&gt;\n</code></pre> <pre><code>az acr login -n &lt;destination_acr_service_name&gt;.azurecr.io\n</code></pre> <pre><code>docker push &lt;destination_acr_service_name&gt;.azurecr.io/&lt;image_name&gt;:&lt;image_version&gt;\n</code></pre></p>"},{"location":"Examples/Example_Deploy_CosmoTech_workspace/#start-deployment","title":"Start Deployment","text":"<p>Now, we can start running the Babylon command to deploy the workspace.</p> <p>Remember</p> <p>Don't forget to generate a new UUID before running this command and update <code>variables.yaml</code> \u2192 <code>state_id</code>. Also, fill up all variables with values depending on your project!</p> <p>Here is an example of <code>variables.yaml</code> with detailed explanations:</p> <p>variable.yam</p> <pre><code>state_id: to_fill                                                      # UUID to generate with command: uuidgen\ncontext_id: to_fill                                                    # Should be the name of your project\nplatform_id: to_fill                                                   # Kubernetes namespace (will be used for Vault)\nplatform:\n    id: to_fill                                                         # Kubernetes namespace (same value as ns_platform_id)\n    url: https://&lt;api_domain&gt;/&lt;namespace_name&gt;/&lt;api_version&gt;            # Example: https://cluster.api.example.com/namespace1/v3\nlocation: francecentral                                                 # Edit according to your location\n\n# Organization\norganization_name: to_fill                                              # Should be the name of the project like \"project1 organization\"\n\n# Workspace\nworkspace_name: to_fill                                                 # Should be the name of the project like \"project1 workspace\"\nworkspace_key: to_fill                                                  # Unique key to define according to your naming convention, for example: project1workspace1\nworkspace_description: to_fill                                          # Quick sentence to explain the purpose of the workspace\n\n# PowerBI\npowerbi_workspace_name: to_fill                                         # Should be the same value as workspace_name\npowerbi_group_id: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx                  # Manually create a PowerBi group on Azure EntraID and copy/paste its Object ID here\npowerbi_permissions:\n- identifier: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx                      # UUID of the Static WebApp App registration allowed to display PowerBi dashboards from the PowerBi workspace\n    description: to_fill                                                # Name of the Static WebApp App registration allowed to display PowerBi dashboards from the PowerBi workspace\n    rights: Admin                                                       # Level of permission for the group\n    type: App                                                           # Type of static app registration is \"App\"\n- identifier: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx                      # UUID of group allowed to display PowerBi dashboards from the PowerBi workspace\n    description: to_fill                                                # Name of group allowed to display PowerBi dashboards from the PowerBi workspace\n    rights: Admin                                                       # Level of permission for the group\n    type: Group                                                         # Type of group is \"Group\"\n\n# Solution\nsolution_name: to_fill                                                  # Should be the name of the project like \"project1 solution\"\nsolution_key: to_fill                                                   # Unique key to define according to your naming convention, for example: project1solution1\nsolution_description: to_fill                                           # Quick sentence to explain the purpose of the solution\nsimulator_repository: to_fill                                           # To fill according to your simulator name\nsimulator_version: to_fill                                              # To fill according to your simulator version\nazure_connector_id: to_create_manually_using_API                        # This connector has to be created only one time and will be reused for all solutions\nresource_opening_time_function_key: ''\ntransport_duration_function_key: ''\nscenario_download_function_key: ''\n\n# Webapp\nwebapp_name: WebApp-project1                                            # Name of the Static Webapp on Azure, to define according your naming convention\nwebapp_app_registration_display_name: App-project1                      # Name of the Webapp App registration on Azure, to define according your naming convention\nwebapp_repository_url: https://github.com/organization/project1_webapp1 # /!\\ Needs to be a Github repository /!\\ will store the webapp source code that will be used to deploy the webapp on the static web app\nwebapp_repository_name: project1_webapp1                                # Name of the Github repository\nwebapp_repository_branch: main                                          # Name of the Github repository branch\nwebapp_organization_name: to_fill                                       # Name of the Github organization\nwebapp_location: westeurope                                             # Edit according to your location\nwebapp_custom_domain: https://project1-webapp1.&lt;azure_dns_zone&gt;/sign-in # Custom domain to create on Azure, example: https://webapp1.app.example.com/sign-in\ndocumentation_link: provided_cosmotech_documentation_link               # Documentation link according to your Cosmo Tech product\n\n# ADX\nadx_permissions:\n- type: App                                                              # Platform App registration type is \"App\"\n    description: to_fill                                                 # Platform App registration name\n    principal_id: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx                   # Platform App registration principal ID\n    role: Admin                                                          # Platform App registration role, must be \"Admin\"\n- type: Group                                                            # Example of admin group on ADX \n    description: to_fill                                                 \n    principal_id: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx                   \n    role: Admin                                                        \n- type: User                                                             # Example of admin user on ADX \n    description: username@example.com                                    \n    principal_id: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx                   \n    role: Admin                                                          \n\n# Security\n# The list below will be used on all API objects.\n# If differents security list are needed for each API objects,\n# you can copy/paste this list, and edit {{security_&lt;object&gt;}}\n# in files organization.yaml, solution.yaml and workspace.yaml\nsecurity:                                                                   \n  default: none                                                            \n    accessControlList:                                                        \n    - id: admin.user@example.com                                             # Example of admin user\n        role: admin                                                          \n    - id: editor.user@example.com                                            # Example of editor user\n        role: editor                                                         \n    - id: viewer.user@example.com                                            # Example of viewer user\n        role: viewer                                                         \n</code></pre> <p>As a best practice, it is recommended to create a <code>.env</code> file at the same level as the <code>variable.yaml</code> file containing the deployment commands. This allows you to easily update the workspace in the future by reusing or modifying the commands without retyping them.</p> <p>Tree</p> <pre><code>\u251c\u2500\u2500 variables.yaml\n\u251c\u2500\u2500 .env         # &lt;--- \n\u251c\u2500\u2500 .gitignore   # add .env  babylon.*\n\u251c\u2500\u2500 project\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 adx\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 scripts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 Create.kql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 connector_azure_storage.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 organization.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 powerbi\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 report1.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 report2.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 report3.pbix\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 solution.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 webapp.yaml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 workspace.yaml\n\u2514\u2500\u2500 README.md\n</code></pre> <p>.env</p> <p><pre><code>export BABYLON_ORG_NAME=\"cosmotech\"\n</code></pre> <pre><code>export BABYLON_SERVICE=\"https://example.api.cosmotech.com\"\n</code></pre> <pre><code>export BABYLON_TOKEN=\"&lt;ROOT TOKEN&gt;\"\n</code></pre> <pre><code>source ~/babylonenv/bin/activate\n</code></pre> <pre><code>babylon namespace use -c test -p dev -s 73a90433-5067-4a16-86d1-b816de22f215\n</code></pre> <pre><code>babylon apply --organization --var-file variables.yaml project/\n</code></pre> <pre><code>babylon apply --solution --var-file variables.yaml project/\n</code></pre> <pre><code>babylon apply --webapp --var-file variables.yaml project/\n</code></pre> <pre><code>babylon apply --workspace --var-file variables.yaml project/\n</code></pre></p>"},{"location":"Examples/Example_Deploy_CosmoTech_workspace_v5/","title":"Deploy Cosmo Tech workspace","text":"<p>Important</p> <p>Babylon needs a configured Vault instance in order to work properly. Contact the DevOps team if you need to access one!</p> <p>After creating the Python virtual environment (<code>.venv</code>) to use Babylon, you can now get started. See \ud83d\udc49 Install Babylon</p> <p>Deploy with Babylon v5</p> <p>Export Vault variables <pre><code>export BABYLON_ORG_NAME=\"cosmotech\" # cosmotech\nexport BABYLON_TOKEN=\"vault_root_token\"  # hvs.CLxxxxxxxxxxxxxxx\nexport BABYLON_SERVICE=\"https://warp.api.cosmotech.com\"\n</code></pre> Run babylon namespace use command  <pre><code>uuidgen | cut -c1-8 # to generate uuid \n</code></pre> <pre><code>babylon namespace use -c test-v5 -p sphinx -s 220d04f0 \n</code></pre> Create a test folder, for example <pre><code>mkdir test-babylon &amp;&amp; cd test-babylon\n</code></pre> Run the init command to generate the project structure <pre><code>babylon init\n</code></pre> All the manifest files for a minimal deployment are now ready. Edit them as you need, and then start the deployment process: <pre><code>babylon apply --organization project/  \n</code></pre> <pre><code>babylon apply --solution project/\n</code></pre> <pre><code>babylon apply --workspace project/ \n</code></pre> <pre><code>babylon apply --runner project/\n</code></pre> You can also test individual Babylon commands: list resources, update security, etc. <pre><code>babylon api organizations security get-all\n</code></pre> <pre><code>babylon api solutions security get --email toto.tata@cosmotech.com \n</code></pre> <pre><code>babylon api workspaces security set-default --role admin\n</code></pre> <pre><code>babylon api runners get-all\n</code></pre></p>"},{"location":"Examples/Example_Update_CosmoTech_workspace/","title":"Update Cosmo Tech workspace","text":"<p>Remember</p> <p>we assumed that the workspace already deployed we need just to update some configuration so this guide we show beast practic to do this with all use cases!</p>"},{"location":"Examples/Example_Update_CosmoTech_workspace/#modifying-access-control-lists-in-api-objects","title":"Modifying Access Control Lists in API Objects","text":"<p>Assuming you need to add users to the access control lists for the Organization, Solution, and Workspace, here is how you can do it:</p> <p>Go to the workspace repository, open the project, and then edit the <code>variables.yaml</code> file. In this example, we add users <code>Alice.Alice.@email.com</code> and <code>Bob.Bob@email.com</code>.</p> <p>variables.yaml</p> <pre><code>organization_security:\n  default: none\n  accessControlList:\n    - id: admin.user@example.com\n      role: admin\n    - id: editor.user@example.com\n      role: editor\n    - id: viewer.user@example.com\n      role: viewer\n    - id: alice.alice.@email.com   # add Alice user as editor\n      role: editor\n    - id: bob.bob@email.com    # add Bob user as viewer\n      role: viewer\n\nsolution_security:\n  default: none\n  accessControlList:\n    - id: admin.user@example.com\n      role: admin\n    - id: editor.user@example.com\n      role: editor\n    - id: viewer.user@example.com\n      role: viewer\n    - id: alice.alice.@email.com   # add Alice user as editor\n      role: editor\n    - id: bob.bob@email.com    # add Bob user as viewer\n      role: viewer\n\nworkspace_security:\n  default: none\n  accessControlList:\n    - id: admin.user@example.com\n      role: admin\n    - id: editor.user@example.com\n      role: editor\n    - id: viewer.user@example.com\n      role: viewer\n    - id: alice.alice.@email.com   # add Alice user as editor\n      role: editor\n    - id: bob.bob@email.com   # add Bob user as viewer\n      role: viewer\n</code></pre>"},{"location":"Examples/Example_Update_CosmoTech_workspace/#applying-babylon-commands","title":"Applying Babylon Commands","text":"<p>After making the necessary modifications, you can now apply the changes using Babylon commands.</p> <p>Remember</p> <p>In the examples below, we use the <code>--payload-only</code> argument because there is no need to redeploy the Azure resources defined in <code>solution.yaml</code> and <code>workspace.yaml</code>. We only want to update the deployment payload.</p> <p>Important</p> <p>Be cautious when modifying <code>workspace.yaml</code>: Babylon deploys Power BI reports and retrieves their IDs, which are then referenced in the payload under the dashboardview and scenarioview sections. However, when using <code>--payload-only</code>, Babylon skips Azure Power BI report deployment. Therefore, you must manually add or update the Power BI report references in your <code>workspace.yaml</code>.  </p> <p>See the example below for how to properly configure this.</p> workspace.yaml <pre><code>kind: Workspace\nnamespace:\n  remote: true   # false by default\n  state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\n  context: test\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"Project1\"\n  selector:\n    organization_id: \"{{services['api.organization_id']}}\"\n    solution_id: \"{{services['api.solution_id']}}\"\nspec:\n  sidecars:\n    azure:\n      powerbi: # &lt;--- powerbi section\n        workspace:\n          name: \"My workspace Powerbi Name\"\n          reports:\n            - name: Report Name A\n              type: dashboard\n              path: \"powerbi/myreportA.pbix\"\n              tag: \"myReportATag\"\n              parameters:\n                - id: \"ADX_Cluster\"\n                  value: \"https://{{services['adx.cluster_name']}}.westeurope.kusto.windows.net\"\n                - id: \"ADX_Database\"\n                  value: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            - name: Report Name B\n              type: scenario\n              path: \"powerbi/myreportB.pbix\"\n              tag: \"myReportBTag\"\n              parameters:\n                - id: \"ADX_Cluster\"\n                  value: \"https://{{services['adx.cluster_name']}}.westeurope.kusto.windows.net\"\n                - id: \"ADX_Database\"\n                  value: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n          permissions:\n            - identifier: \"user1@email.com\"\n              rights: Admin\n              type: User\n            - identifier: \"user2@email.com\"\n              rights: Contributor\n              type: User\n            - identifier: \"user3@email.com\"\n              rights: Viewer\n              type: User\n            - identifier: \"&lt;guid&gt;\"\n              description: \"Object Id of Service Principal WebApp\"\n              rights: Admin\n              type: App\n      adx:                   # &lt;--- adx section\n        database:\n          uri: \"https://{{services['adx.cluster_name']}}.{{location}}.kusto.windows.net\"  # URI Azure Data Explorer Cluster\n          create: true\n          retention: 365\n          permissions:\n            - type: User\n              email: \"user1@email.com\"\n              principal_id: \"412f3fad-3ce3-588s-994c-2a36bccaa0b2\"\n              role: Admin\n            - type: User\n              email: \"user2@email.com\"\n              principal_id: \"987d3fad-3ce3-588s-994c-2f5s4de8ddd5\"\n              role: User\n            - type: App\n              description: \"Cosmo Tech Platform &lt;platform_name&gt; For &lt;tenant_name&gt;\"\n              principal_id: \"{{services['platform.principal_id']}}\" # Object ID of Platform Enterprise Application\n              role: Admin\n          scripts:\n            - id: \"demoscript\"\n              name: Create.kql\n              path: \"adx/scripts\"\n      eventhub:                    # &lt;--- Eventhub section\n        consumers:\n          - displayName: adx\n            entity: ProbesMeasures\n          - displayName: adx\n            entity: ScenarioMetadata\n          - displayName: adx\n            entity: ScenarioRun\n          - displayName: adx\n            entity: ScenarioRunMetadata\n        connectors:\n          - table_name: ProbesMeasures\n            consumer_group: adx\n            connection_name: ProbesMeasures\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: JSON\n            compression: Gzip\n            mapping: ProbesMeasuresMapping\n          - table_name: ScenarioMetadata\n            consumer_group: adx\n            connection_name: ScenarioMetadata\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: CSV\n            compression: None\n            mapping: ScenarioMetadataMapping\n          - table_name: SimulationTotalFacts\n            consumer_group: adx\n            connection_name: ScenarioRun\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: JSON\n            compression: None\n            mapping: SimulationTotalFactsMapping\n          - table_name: ScenarioRunMetadata\n            consumer_group: adx\n            connection_name: ScenarioRunMetadata\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: CSV\n            compression: None\n            mapping: ScenarioRunMetadataMapping\n  payload:\n    key: \"Project1\"\n    name: \"My Workspace Name\"\n    description: \"Workspace for solution\"\n    solution:\n      solutionId: \"{{services['api.solution_id']}}\"\n    useDedicatedEventHubNamespace: true\n    sendScenarioMetadataToEventHub: true\n    sendInputToDataWarehouse: true\n    sendScenarioRunToEventHub: true\n    webApp:\n      url: \"https://{{services['webapp.static_domain']}}\"\n      options:\n        disableOutOfSyncWarningBanner: true\n        charts:\n          workspaceId: \"{{services['powerbi.workspace.id']}}\"\n          dashboardsViewIframeDisplayRatio: 1.8686131386861313\n          scenarioViewIframeDisplayRatio: 3.2\n          logInWithUserCredentials: false\n          dashboardsView:\n            - dynamicFilters:\n                title:\n                en: Report Name A\n                fr: Report Name A\n              # report_tag: \"myReportATag\"\n              reportId: \"{{services['powerbi.dashboard_view.myReportATag']}}\" # Babylon retrieves the report ID from the deployment state\n          scenarioView:\n            - dynamicFilters:\n                title:\n                en: Report Name B\n                fr: Report Name B\n              # report_tag: \"myReportBTag\"  \n              reportId: \"{{services['powerbi.scenario_view.myReportBTag']}}\" # Babylon retrieves the report ID from the deployment state\n        instanceView:\n          dataContent: null\n          dataSource: null\n        datasetManager:\n        menu:\n    security: {{workspace_security}}\n</code></pre> <p>With this configuration, Babylon intelligently uses the deployment state where all previously deployed reports are stored with tags. This allows Babylon to reference existing reports directly without redeploying them again.</p> <p>Syntax</p> <p><pre><code>reportId: \"{{services['powerbi.dashboard_view.myReportATag']}}\"\n</code></pre> <pre><code>reportId: \"{{services['powerbi.scenario_view.myReportBTag']}}\"\n</code></pre></p> <p>The only case where you should avoid using <code>--payload-only</code> is when there are changes in the Azure resources section such as adding a new report or other Azure related modifications that require a full redeployment.</p> <p>So now you can run the Babylon apply command to apply those modifications.</p> <p>Babylon Apply</p> <p><pre><code>export BABYLON_ORG_NAME=\"cosmotech\"\n</code></pre> <pre><code>export BABYLON_SERVICE=\"https://example.api.cosmotech.com\"\n</code></pre> <pre><code>export BABYLON_TOKEN=\"&lt;ROOT TOKEN&gt;\"\n</code></pre> <pre><code>source ~/babylonenv/bin/activate\n</code></pre> <pre><code>babylon namespace use -c test -p dev -s 73a90433-5067-4a16-86d1-b816de22f215\n</code></pre> <pre><code>babylon apply --organization --var-file variables.yaml project/\n</code></pre> <pre><code>babylon apply --solution --var-file variables.yaml project/\n</code></pre> <pre><code>babylon apply --workspace --payload-only --var-file variables.yaml project/\n</code></pre></p>"},{"location":"commands/babylon_commands/","title":"Babylon Commands","text":""},{"location":"commands/babylon_commands/#help-command","title":"Help Command","text":"<p>Help command</p> <pre><code>&gt; babylon --help\nUsage: babylon [OPTIONS] COMMAND [ARGS]...\n\n   ____              __                 ___  \n  /\\  _`\\           /\\ \\               /\\_ \\  \n  \\ \\ \\L\\ \\     __  \\ \\ \\____   __  __ \\//\\ \\      ___     ___  \n   \\ \\  _ &lt;'  /'__`\\ \\ \\ '__`\\ /\\ \\/\\ \\  \\ \\ \\    / __`\\ /' _ `\\  \n    \\ \\ \\L\\ \\/\\ \\L\\.\\_\\ \\ \\L\\ \\\\ \\ \\_\\ \\  \\_\\ \\_ /\\ \\L\\ \\/\\ \\/\\ \\  \n     \\ \\____/\\ \\__/.\\_\\\\ \\_,__/ \\/`____ \\ /\\____\\\\ \\____/\\ \\_\\ \\_\\  \n      \\/___/  \\/__/\\/_/ \\/___/   `/___/&gt; \\\\/____/ \\/___/  \\/_/\\/_/  \n                                    /\\___/  \n                                    \\/__/  \n                                                             v4.2.3\n\n  CLI used for cloud interactions between CosmoTech and multiple cloud\n\n    environment\n\n    The following environment variables are required:\n\n    - BABYLON_SERVICE: Vault Service URI\n    - BABYLON_TOKEN: Access Token Vault Service\n    - BABYLON_ORG_NAME: Organization Name\n\n\n    Options:\n    -v, --verbosity LVL     Either CRITICAL, ERROR, WARNING, INFO or DEBUG\n    --bare, --raw, --tests  Enable test mode, this mode changes output\n                            formatting.\n    -n, --dry-run           Will run commands in dry-run mode.\n    --version               Print version number and return.\n    --help                  Show this message and exit.\n\n    Commands:\n    abba       Cosmotech ABBA\n    api        Cosmotech API\n    apply      Macro Apply\n    azure      Group allowing communication with Microsoft Azure Cloud\n    destroy    Macro Destroy\n    github     Group allowing communication with Github REST API\n    hvac       Group handling Vault Hashicorp\n    namespace  Babylon namespace\n    powerbi    Group handling communication with PowerBI API\n    webapp     Group handling Cosmo Sample WebApp configuration\n</code></pre>"},{"location":"commands/babylon_commands/#namespace-use-command","title":"Namespace Use Command","text":"<p>Namespace Use</p> <pre><code> &gt; babylon namespace use -c test -p dev -s 25075b92-fe8e-4952-9e9b-53360dacf369\n   INFO     2025-08-11 18:01:45,484 | [namespace] switched to namespace test, dev successfully\n</code></pre>"},{"location":"commands/babylon_commands/#apply-macro-command","title":"Apply Macro Command","text":"<p>Macro Apply</p> <pre><code> &gt; babylon apply project/\n</code></pre>"},{"location":"commands/babylon_commands/#apply-single-command","title":"Apply Single Command","text":"<p>Apply Organization</p> <pre><code> &gt; babylon apply --organization --var-file variables.yaml project/\n</code></pre> <p>Apply Solution</p> <pre><code> &gt; babylon apply --solution --var-file variables.yaml project/\n</code></pre> <p>Apply Web app</p> <pre><code> &gt; babylon apply --webapp --var-file variables.yaml project/\n</code></pre> <p>Apply Workspace</p> <pre><code> &gt; babylon apply --workspace --var-file variables.yaml project/\n</code></pre>"},{"location":"commands/babylon_commands/#destroy-macro-command","title":"Destroy Macro Command","text":"<p>Macro Destroy</p> <pre><code> &gt; babylon destroy --state-to-destro /path/to/&lt;state_id&gt;\n</code></pre>"},{"location":"commands/powerbi_deploy_workspace/","title":"Power BI Deploy Workspace","text":""},{"location":"commands/powerbi_deploy_workspace/#description","title":"Description","text":"<p>This macro command will deploy a PowerBI workspace and populate it with reports. If the given workspace name already exists, the reports will be published in the existing workspace.</p> <p>This includes:</p> <ul> <li>Creating a PowerBI workspace if it does not exists</li> <li>Add user to PowerBI workspace</li> <li>Uploading all reports from a folder</li> <li>Updating dataset parameters</li> <li>Updating dataset azure credentials</li> </ul>"},{"location":"commands/powerbi_deploy_workspace/#configuration","title":"Configuration","text":"<p>Requirements</p> <p>By default this macro command requires a folder called <code>powerbi</code> containing two sub-folders  both with your <code>.pbix</code> files in respectively directory.</p> <pre><code>\u251c\u2500\u2500 powerbi\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_1.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_2.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_3.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_4.pbix\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 scenario\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 scenario.pbix\n</code></pre> <p>Note</p> <p>You can setup your <code>email</code> and your <code>user principal id</code> (Azure Directory) in your config files to deploy powerbi workspace with your credentials.</p> <pre><code>babylon config set azure email &lt;CHANGEME&gt; -c &lt;context_id&gt; -p &lt;platform_id&gt; \n</code></pre> <pre><code>babylon config set azure user_principal_id &lt;USER_PRINCIPAL_ID&gt; -c &lt;context_id&gt; -p &lt;platform_id&gt; \n</code></pre> <p>Then, make sure you have the required rights. <pre><code>babylon azure adx permission set -c &lt;context_id&gt; -p &lt;platform_id&gt; --type User --role Admin %azure%user_principal_id \n</code></pre></p> <p>Finally, you have to retrieve your access token powerbi <pre><code>babylon azure token store -c &lt;context_id&gt; -p &lt;platform_id&gt; --scope powerbi \n</code></pre></p> <p>Important</p> <p>The last command will give you a secret. <pre><code>export BABYLON_ENCODING_KEY=&lt;your_secret&gt;\n</code></pre></p>"},{"location":"commands/powerbi_deploy_workspace/#macro-command","title":"Macro command","text":"<p>Macro</p> <pre><code>babylon powerbi workspace deploy &lt;WORKSPACE_NAME&gt; -c &lt;context_id&gt; -p &lt;platform_id&gt; \\\n    --folder &lt;FOLDER_NAME&gt;/&lt;scenario | dashboard&gt; \\\n    --type &lt;scenario_view | dashboard_view&gt; \n</code></pre> <p>Usage</p> <pre><code># Usage: babylon powerbi workspace deploy [OPTIONS] WORKSPACE_NAME \n# \n#   Macro command allowing full deployment of a powerBI workspace\n#   Requires a local folder named `powerbi` and will initialize a full workspace with the\n#   given reports. Won't run powerbi workspace creation if it's already existing\n# \n# Options:\n#   --folder DIRECTORY          Override folder containing your .pbix files\n#                                   [required]\n#   --parameter &lt;QUERYSTRING QUERYSTRING&gt;...\n#                                   Add a combination &lt;Key Value&gt; that will be\n#                                   sent as parameter to all your datasets\n#   --override                      override reports in case of name conflict ?\n#   --type [scenario_view|dashboard_view]\n#                                   [required]\n#   --help                          Show this message and exit.\n</code></pre>"},{"location":"guides/az_requirements/","title":"Az requirements","text":""},{"location":"guides/az_requirements/#azure-requirements","title":"Azure requirements","text":"<p>Requirements</p> <p>The following elements are required before you can use Babylon on an Azure subscription</p> <ul> <li> <p>Fully set up Cosmo Tech Platform installed on your Azure Tenant</p> </li> <li> <p>App registration for Babylon</p> </li> </ul> <p>Babylon uses a Service Principal to interact with the API and other resources. To do so, Babylon needs to be registered as an application in the Azure Active Directory.</p> <p>This App Registration will be used to authenticate and get the required tokens to connect to your Platform. Rights on the App Registration depends on the type of connection you want to make. </p> <p>We recommend defining this app registration as a mobile and desktop application in Azure configuration with redirection URL (mostly for authenticating against Azure services.</p> <p>See official documentation :</p> <pre><code>* https://learn.microsoft.com/en-us/entra/identity-platform/v2-oauth2-auth-code-flow\n* https://learn.microsoft.com/en-us/entra/identity-platform/msal-client-application-configuration\n* https://learn.microsoft.com/en-us/onedrive/developer/rest-api/getting-started/msa-oauth?view=odsp-graph-online\n</code></pre> <p>The App registration needs the following API permissions:</p> <p>API Permissions</p> <p>Microsoft Graph \ud83d\udd39 Application.ReadWrite.All (Application) \ud83d\udd39 Application.ReadWrite.OwnedBy (Application) \ud83d\udd39 Group.ReadWrite.All (Delegated) \ud83d\udd39 User.Read (Delegated) </p> <p>Platform API \ud83d\udd39 Platform.Admin (Application) </p> <p>For those concerned with specifics Azure policies, all Microsoft Graph's permissions can be deleted excepted User.Read (Delegated), but this implies that some operations would be handled manually. The platform API permission is mandatory.</p> <p>Important</p> <p>Babylon App registration needs at least Contributor role on Cosmo Tech Platform Resource Group.</p>"},{"location":"guides/resource_file/","title":"Resource file","text":"<p>If the state file does not exist, the first Babylon command you run will initialize a new state and persist it in Azure Storage and local file.</p> <p>Note</p> <p>To enable persistence in Azure Storage, you must set the parameter <code>remote: true</code>. (This will be explained in detail in the Deploy Workspace tutorial just keep it in mind for now)</p>"},{"location":"guides/resource_file/#babylon-state-structure","title":"Babylon State Structure","text":"<p>The Babylon state is a structured YAML file composed of multiple sections. At a high level, you will find three main entries: <pre><code>context:\nfiles: []\nid: 25075b92-fe8e-4952-9e9b-53360dacf369\nplatform:\n</code></pre> The last one contains following keys with some information already prefilled with data from vault:</p> <p>Azure Container Registry </p> <pre><code>services:\n  acr:\n    login_server: \n    simulator_repository: \n    simulator_version: \n</code></pre> <p>Azure Digital Twins </p> <pre><code>  adt:\n    built_owner_id: \n    built_reader_id: \n    digital_twin_url:  \n</code></pre> <p>Azure Explorer Database</p> <pre><code>  adx:\n    built_contributor_id: \n    built_owner_id: \n    cluster_name: \n    cluster_principal_id: \n    cluster_uri: \n    database_name: \n</code></pre> <p>Cosmotech API </p> <pre><code>  api:\n    connector.adt_id: \n    connector.adt_version: \n    connector.storage_id: \n    connector.storage_version: \n    connector.twin_id: \n    connector.twin_version: \n    dataset.adt_id: \n    dataset.storage_id: \n    dataset.twin_id: \n    organization_id: \n    organization_url: \n    run_templates: \n    scope: \n    send_scenario_metadata_to_event_hub: \n    solution_id: \n    url: \n    use_dedicated_event_hub_namespace: \n    workspace_id: \n    workspace_key: \n</code></pre> <p>Azure App Registration</p> <pre><code>  app:\n    app_id: \n    name: \n    object_id: \n    principal_id: \n</code></pre> <p>Azure </p> <pre><code>    azure:\n      cli_client_id:\n      email: \n      eventhub_built_contributor_id:\n      eventhub_built_data_receiver:\n      eventhub_built_data_sender:\n      function_artifact_url: \n      resource_group_name: \n      resource_location: \n      storage_account_name: \n      storage_blob_reader: \n      subscription_id:\n      team_id:\n      user_principal_id: \n</code></pre> <p>Azure Babylon App Registration </p> <pre><code>    babylon:\n      client_id: \n      principal_id: \n</code></pre> <p>Github </p> <pre><code>    github:\n      branch: \n      organization: \n      repository: \n      run_url: \n      workflow_path: \n</code></pre> <p>Cosmotech Platform </p> <pre><code>    platform:\n      app_id: \n      principal_id: \n      scope_id: \n</code></pre> <p>PowerBI</p> <pre><code>    powerbi:\n      dashboard_view: \n      scenario_view: \n      scope: \n      workspace.id:\n      workspace.name:\n</code></pre> <p>WebApp </p> <pre><code>    webapp:\n      deployment_name: \n      enable_insights: \n      hostname: \n      insights_instrumentation_key: \n      location: \n      static_domain: \n</code></pre>"},{"location":"guides/tfc_requirements/","title":"Terraform Cloud Requirements","text":"Requirements <p>The following elements are required before you can use Babylon on Terraform Cloud  - A Terraform Cloud organization token, for workspace creation or configuration  - A Terraform Cloud user token, for workspace configuration or execution</p>"},{"location":"guides/tfc_requirements/#allow-access-to-terraform-cloud","title":"Allow access to Terraform Cloud","text":"<p>Babylon uses the Terraform Cloud tokens to authenticate users and allow them to interact with the API. For operation on workspaces you will need to add a oauth token to terraform-cloud in the webapp. Once this oauth token you will add its id to your workspace configuration with babylon. - babylon terraform-cloud workspace create</p> <p>You can use the following commands to setup your token secrets in your <code>.secrets.yaml.encrypt</code> file for <code>Babylon</code> to use it directly !   - babylon terraform-cloud login   - babylon terraform-cloud logout </p>"},{"location":"guides/vault_requirements/","title":"Vault service","text":"<p>Requirements</p> <p>The following elements are required before you can use Babylon on an Azure subscription</p> Vault requirements <p>You need a Vault Service on your Azure Tenant.</p> <p>link to github for deployment</p>"},{"location":"partials/azure/az_aad_api_rights/","title":"Az aad api rights","text":"<p>To be able to connect to the API, a user requires to have rights to it in Azure Active Directory.</p> <p>To check the user rights for your API, you can access the Enterprise Application page for your API in the Azure Portal, and check the section <code>Users and groups</code></p> <p>On this page you will see all the authorizations for your users and will be able to give roles to Users, Services Principals and Groups.</p> <p>You just need to make sure that your user has permissions to access your API from here.</p> <p>The list of roles and their description can be found in the App Registration of your platform under the <code>App roles</code> section</p>"},{"location":"partials/azure/vault/","title":"Vault","text":"<p>You need a Vault Service on your Azure Tenant.</p> <p>link to github for deployment</p>"},{"location":"partials/installation/from_docker/","title":"From docker","text":""},{"location":"partials/installation/from_docker/#get-babylon-from-docker","title":"Get Babylon from docker","text":"Prerequisites Requirement Docker <p>Choosing the version of Babylon you want to use you can run the following command</p> Download docker image <pre><code>docker pull ghcr.io/cosmo-tech/babylon:latest\ndocker tag ghcr.io/cosmo-tech/babylon:latest babylon\n</code></pre> <p>It will download for you the required docker image, and rename it to <code>babylon</code></p> Start Babylon docker image <p>Using the following command you get in a working Babylon environment, allowing you to run any command you will like <pre><code>docker run -ti --rm babylon\n</code></pre></p> <p>Warning</p> <p>In this environment your changes to the files won't be persisted when you leave it. The following tips will help you set up persitance for your config, but will use knowledge of Babylon explained in future guides.</p> Persist configurations and use local content as a working dir Info <p>This tip concern some principle of Babylon explained is other guides, you can skip it for now if you want to understand those principles before running commands using them.</p> <p>To persist configuration we will use the <code>--mount</code> option of Docker to persist our data across runs</p> Persist configuration <pre><code>mkdir babylon_config\ndocker run -ti --rm --mount type=bind,source=\"$(pwd)\"/babylon_config,target=/opt/babylon babylon\n</code></pre> <p>This command will persist your Babylon configuration in a local <code>/babylon_config</code> folder allowing you to keep it across runs (in the same folder)</p> <p>Now if you want to use your local files as a working directory for your commands you can do the following</p> Use local folder as working dir <pre><code>docker run -ti --rm --mount type=bind,source=\"$(pwd)\",target=/etc/babylon/workingdir babylon\n</code></pre> <p>This command will use your current folder as a working directory for your babylon commands</p> <p>Combining both options allows for a persistent content and config across runs</p> Combine both for persitence <pre><code>docker run -ti --rm --mount type=bind,source=\"$(pwd)\"/babylon_config,target=/opt/babylon --mount type=bind,source=\"$(pwd)\",target=/etc/babylon/workingdir babylon\n</code></pre> Use aliases to make a babylon command using docker <p>Info</p> <ul> <li>Only work on system having the <code>alias</code> command</li> <li>Won't allow you to use auto-completion</li> </ul> <p>The following command will create a command <code>babylon</code> having the same use as the one you would get by installing the sources but by using docker.</p> <code>babylon</code> alias command <pre><code>alias babylon=\"docker run -ti --rm --mount type=bind,source=$(pwd)/babylon_config,target=/opt/babylon --mount type=bind,source=$(pwd),target=/etc/babylon/workingdir --entrypoint babylon babylon\"\n</code></pre>"},{"location":"partials/installation/from_git/","title":"From git","text":"<p>Get sources from git</p> <p>You can download the latest version of Babylon using git clone command</p> <p>Latest Version</p> <pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git babylon\ncd babylon\n</code></pre> <p>Get the specific version from git</p> <p>If you want a specific version of Babylon (e.g. 3.0.0)</p> <p>Specific Version</p> <pre><code>git clone -b 3.0.0 git@github.com:Cosmo-Tech/Babylon.git babylon\ncd babylon\n</code></pre>"},{"location":"partials/installation/from_source/","title":"From source","text":""},{"location":"partials/installation/from_source/#get-babylon-from-source","title":"Get Babylon from source","text":"<p>Requirements</p> <ul> <li>\ud83d\udc0d Python 3.10+ </li> <li>\ud83d\udce6 Pip 22.2+ </li> <li>\ud83c\udf31 Git (latest version) </li> </ul> <p>We will go through the process of getting a version of Babylon before the installation.</p> <p>Get sources from git</p> <p>You can download the latest version of Babylon using git clone command</p> <p>Latest Version</p> <pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git babylon\ncd babylon\n</code></pre> <p>Get the specific version from git</p> <p>If you want a specific version of Babylon (e.g. 3.0.0)</p> <p>Specific Version</p> <pre><code>git clone -b 3.0.0 git@github.com:Cosmo-Tech/Babylon.git babylon\ncd babylon\n</code></pre>"},{"location":"partials/installation/from_source/#install-babylon","title":"Install Babylon","text":"<p>You can install Babylon globally on your system:</p> <p>Example</p> <pre><code>python3 -m venv ~/babylonenv\nsource ~/babylonenv/bin/activate\npip install .\n</code></pre> <p>Alternatively, follow these steps if you want to install Babylon in development mode:</p> <p>Example</p> <pre><code>python3 -m venv ~/babylonenv\nsource ~/babylonenv/bin/activate\npip install -e .\n</code></pre>"},{"location":"partials/installation/prerequisites/","title":"Prerequisites","text":"<ul> <li>\ud83d\udc0d Python 3.10+ </li> <li>\ud83d\udce6 Pip 22.2+ </li> <li>\ud83c\udf31 Git (latest version) </li> </ul>"},{"location":"tutorial/","title":"Tutorials","text":"<p>A list of tutorials to start using Babylon v4 and v5.</p> <p> Populating Vault</p> <p>This guide shows how to install and configure Vault with initialization variables.</p> <p> Step 1</p> <p> Getting started with Babylon</p> <p>In this guide you'll learn how to install, run commands, and experiment with Babylon.</p> <p> Step 2</p> <p> Deploy a new Workspace</p> <p>This guide will help you deploy a new organization, solution, and workspace.</p> <p> Step 3</p> <p> Deploy a Workspace with an existing Organization and/or Solution)</p> <p>This guide will help you deploy a workspace with existing organization and solution resources.</p> <p> Step 4</p> <p> Destroy a Workspace</p> <p>This guide will show you how to destroy a workspace.</p> <p> Destroy</p> <p> Getting started with Babylon v5</p> <p>This guide you'll learn how to install, run commands, and experiment with Babylon 5.</p> <p> Babylon v5</p>"},{"location":"tutorial/Babylon_Vault_Init_Vars/","title":"Populating the Vault","text":"<p>Objective</p> <p>The Vault service must be properly configured to work with the Babylon CLI.  </p> <p>In particular, you need to set up the Terraform backend state inside Vault.  </p> <p>We provide a tool for this, you can find it here \ud83d\udd17Vault This needs an initial Terraform deployment as it uses the Terraform state to parse and populate the Vault.</p> <p>Useful information can be found in the README of this repository !</p> <p>Requirements</p> <p>Before running this script, ensure that:  </p> <ul> <li>Cosmo Tech Platform is fully installed on your Azure tenant </li> <li>A Terraform state named <code>platform-tenant-infra-0001</code> is present</li> </ul>"},{"location":"tutorial/Babylon_Vault_Init_Vars/#installation","title":"Installation","text":"<p>This tutorial starts from a clean installation</p>"},{"location":"tutorial/Babylon_Vault_Init_Vars/#get-the-script-from-source","title":"Get the Script from Source","text":"<p>Additional Requirements</p> <ul> <li>\ud83d\udc0d Python 3.10+ </li> <li>\ud83d\udce6 Pip 22.2+ </li> <li>\ud83c\udf31 Git (latest version) </li> </ul> <p>\ud83d\udcbb Setup Environment</p> <pre><code># \ud83d\udd3d Clone the repository\ngit clone git@github.com:Cosmo-Tech/backend-tf-state-to-vault.git\ncd backend-tf-state-to-vault\n\n# \ud83d\udee0\ufe0f Create and activate a virtual environment\npython3 -m venv ~/backend-tf-state-to-vault\nsource ~/backend-tf-state-to-vault/bin/activate\n\n# \ud83d\udce6 Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"tutorial/Babylon_Vault_Init_Vars/#usage","title":"Usage","text":""},{"location":"tutorial/Babylon_Vault_Init_Vars/#1-configure-environment-variables","title":"1. Configure Environment Variables","text":"<p>For best practices, create a file (e.g. <code>.env.platform_name-tenant_name</code>) and define all required environment variables:</p> <p>\u2699\ufe0f Configure Environment Variables</p> <pre><code># Vault configuration\nexport VAULT_ADDR=\"vault_url\"\nexport VAULT_TOKEN=\"vault_root_token\"\n\n# Platform &amp; Tenant identifiers\nexport TENANT_ID=\"azure_tenant_id\"\nexport ORGANIZATION_NAME=\"vault_org_name\"\nexport CLUSTER_NAME=\"kunernetes_cluster_name\"\nexport PLATFORM_NAME=\"ns_platform_id\"\nexport PLATFORM_ID=\"ns_platform_id\"\n\n# Terraform state storage\nexport TFSTATE_BLOB_NAME=\"terraform_state_tenant_infra-id\"\nexport STORAGE_ACCOUNT_NAME=\"storage_account_name\"\nexport STORAGE_ACCOUNT_KEY=\"storage_account_key_to_get_from_Azure\"\nexport STORAGE_CONTAINER=\"container_hosting_terraform_states\"\n</code></pre> <p>Fill in all values according to your environment</p> <p>important</p> <p>For VAULT_ADDR and VAULT_TOKEN, you can retrieve them from the cluster using one of the following methods</p> \ud83d\udda5\ufe0f Using k9s\ud83e\udde9 Using kubectl <p>Open <code>k9s</code>, navigate to the vault namespace, and retrieve the secret storing the root token. For the Vault URL, check the Ingress.</p> <pre><code># List all secrets in the 'vault' namespace\nkubectl -n vault get secrets\n\n# Get the detailed YAML of the vault token secret\nkubectl -n vault get secret vault-token-secret -o yaml\n\n# Describe the ingress resource to find the Vault URL\nkubectl -n vault describe ingress\n</code></pre>"},{"location":"tutorial/Babylon_Vault_Init_Vars/#2-run-the-script","title":"2. Run the Script","text":"<p>Once your environment is configured, you can start using the script </p> <p>\ud83d\udca1 Quick Run</p> <pre><code>source .env.platform_name-tenant_name\n\n# Enable secrets \"cosmotech\" (Vault engine v1)\npython main.py tenant enable --name cosmotech --engine v1\n\n# Write platform config into Vault (e.g. \"main\")\npython main.py config write --resource all --use-azure --engine v1 --platform-id main\n</code></pre>"},{"location":"tutorial/Deploy_CosmoTech_workspace/","title":"Deploy Cosmo Tech workspace","text":"<p>Remember</p> <p>This guide focuses on explaining each object individually. A complete deployment workflow is provided in the Examples section, where all components are combined in a practical scenario !</p> <p>Before proceeding, ensure that you have selected the correct <code>platform</code> and <code>project</code>. If unsure, contact your <code>Babylon administrator</code> for the available options.</p> <p>In this example, we will use the following identifiers:</p> <ul> <li><code>context_id</code>: <code>test</code> </li> <li><code>platform_id</code>: <code>dev</code> </li> <li><code>state_id</code>: <code>8db6069e-e05f-42e6-b6d6-56dde124516a</code></li> </ul> <p>To deploy a complete Cosmo Tech workspace, you can declare its configuration in yaml files corresponding to specific deployment type. </p> <p>Each file contains general information about the deployment:</p> <p>Important</p> <p>In this tutorial each Cosmo Tech object, values defined directly within the corresponding YAML file. However, in the Examples section, you will see that we use a centralized <code>variables.yaml</code> file, which defines all required variables and is then referenced across the YAML configurations !</p>"},{"location":"tutorial/Deploy_CosmoTech_workspace/#api-organization","title":"API Organization","text":"Organization.yaml <pre><code>kind: Organization\nnamespace:\n  remote: true   # false by default\n  state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\n  context: test\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\n</code></pre> <p>The deployment configuration must define the following keys:</p> <ul> <li> <p><code>kind</code>   Specifies the type of resource to deploy.   Accepted values: <code>Organization</code>, <code>Solution</code>, <code>Workspace</code>, <code>WebApp</code>.  </p> <p>\u26a0\ufe0f The resource type must always start with a capital letter.</p> </li> <li> <p><code>namespace</code>   Provides metadata that uniquely identifies the deployment, including:  </p> <ul> <li><code>state_id</code> </li> <li><code>context_id</code> </li> <li><code>platform_id</code></li> </ul> </li> <li> <p><code>remote</code>   A boolean flag indicating whether the state should be stored locally only (<code>false</code>, default) or both locally and in the cloud (<code>true</code>)</p> </li> <li> <p><code>spec</code>   Defines the resource configuration. The details are specified under the <code>payload</code> section.  </p> </li> </ul> <p>For example, in an Organization deployment file:</p> Organization.yaml <pre><code>kind: Organization\nnamespace:\n  remote: true   # false by default\n  state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\n  context: test\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nspec:\n  payload:\n    name: My new Organization\n    security: {{security}}\n</code></pre> <p>All keys in this file can be templated with <code>{{}}</code> syntax for objects and <code>\"{{}}\"</code> for strings, as <code>security</code> section of this file. Corresponding values must be stored in <code>_variables.yaml_</code> file at the same level that your project See \ud83d\udc49 Examples:</p> <pre><code>security:\n  default: viewer\n  accessControlList:\n    - id: user1@email.com\n      role: admin\n    - id: user2@email.com\n      role: editor\n    - id: user3@email.com\n      role: viewer\n</code></pre>"},{"location":"tutorial/Deploy_CosmoTech_workspace/#api-solution","title":"API Solution","text":"<p>This is how the solution deployment file is structured</p> Solution.yaml <pre><code>kind: Solution\nnamespace:\n  remote: true   # false by default\n  state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\n  context: test\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"Project1\"\n  selector:\n    organization_id: \"{{services['api.organization_id']}}\"\nspec:\n  payload:\n    key: \"demosolution\"\n    name: \"My Solution Name\"\n    description: \"My solution description\"\n    repository: brewery_for_continuous\n    version: latest\n    tags:\n      - brewery\n    runTemplates:\n      - id: \"run_id\"\n        name: \"Standard simulation\"\n        csmSimulation: AzureWebApp/AzureWebApp_Simulation\n        run: true\n        preRun: true\n    parameters:\n    parameterGroups:\n    security:\n      default: none\n      accessControlList:\n        - id: user1@email.com\n          role: admin\n        - id: user2@email.com\n          role: editor\n        - id: user3@email.com\n          role: viewer\n</code></pre> <p>The <code>metadata</code> section defines deployment specific attributes. It is required in the following resource files:  </p> <ul> <li><code>solution.yaml</code> </li> <li><code>workspace.yaml</code> </li> <li><code>webapp.yaml</code> </li> </ul> <p>The <code>workspace_key</code> parameter is a mandatory field within the <code>metadata</code> section  </p> <ul> <li>Purpose:   Identifies the target workspace   For example, when Babylon provisions resources such as a Dataset (ADX) or an Event Hub, the generated name follows the convention: <pre><code>&lt;organization_id&gt;-&lt;workspace_key&gt; # Ex : o-rv0h6dd492w8-testppdprojectwork\n</code></pre></li> <li> <p>Constraints:  </p> <ul> <li>Must always be defined.  </li> <li>Cannot be left empty.  </li> </ul> </li> <li> <p>\u26a0\ufe0f Failure Condition:     If <code>workspace_key</code> is omitted or empty, the deployment will fail.</p> </li> </ul> <p>The <code>selector</code> block is used to specify the target organization under which the resource will be deployed.  </p> <ul> <li> <p>Parameter: <code>organization_id</code> </p> <ul> <li>Purpose:   Defines the unique organization in which the solution (or other resource) will be created.  </li> </ul> </li> <li> <p>Behavior:  </p> <ul> <li>Babylon will associate the deployment (e.g., a solution, workspace) with the specified organization_id.  </li> <li>Typically, this value is injected dynamically from the Babylon state (<code>services['api.organization_id']</code>).  </li> </ul> </li> </ul>"},{"location":"tutorial/Deploy_CosmoTech_workspace/#api-workspace","title":"API Workspace","text":"<p>The Workspace configuration may include additional parameters required to provision external services such as:</p> <ul> <li>Power BI workspaces</li> <li>Azure Event Hubs</li> <li>Azure Data Explorer (ADX) databases</li> </ul> <p>These parameters are defined under the <code>sidecars</code> section, specifically within the <code>azure</code> key.</p> Workspace.yaml <pre><code>kind: Workspace\nnamespace:\n  remote: true   # false by default\n  state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\n  context: test\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"Project1\"\n  selector:\n    organization_id: \"{{services['api.organization_id']}}\"\n    solution_id: \"{{services['api.solution_id']}}\"\nspec:\n  sidecars:\n    azure:\n      powerbi: # &lt;--- powerbi section\n        workspace:\n          name: \"My workspace Powerbi Name\"\n          reports:\n            - name: Report Name A\n              type: dashboard\n              path: \"powerbi/myreportA.pbix\"\n              tag: \"myReportATag\"\n              parameters:\n                - id: \"ADX_Cluster\"\n                  value: \"https://{{services['adx.cluster_name']}}.westeurope.kusto.windows.net\"\n                - id: \"ADX_Database\"\n                  value: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n          permissions:\n            - identifier: \"user1@email.com\"\n              rights: Admin\n              type: User\n            - identifier: \"user2@email.com\"\n              rights: Contributor\n              type: User\n            - identifier: \"user3@email.com\"\n              rights: Viewer\n              type: User\n            - identifier: \"&lt;guid&gt;\"\n              description: \"Object Id of Service Principal WebApp\"\n              rights: Admin\n              type: App\n      adx:                   # &lt;--- adx section\n        database:\n          uri: \"https://{{services['adx.cluster_name']}}.{{location}}.kusto.windows.net\"  # URI Azure Data Explorer Cluster\n          create: true\n          retention: 365\n          permissions:\n            - type: User\n              email: \"user1@email.com\"\n              principal_id: \"412f3fad-3ce3-588s-994c-2a36bccaa0b2\"\n              role: Admin\n            - type: User\n              email: \"user2@email.com\"\n              principal_id: \"987d3fad-3ce3-588s-994c-2f5s4de8ddd5\"\n              role: User\n            - type: App\n              description: \"Cosmo Tech Platform &lt;platform_name&gt; For &lt;tenant_name&gt;\"\n              principal_id: \"{{services['platform.principal_id']}}\" # Object ID of Platform Enterprise Application\n              role: Admin\n          scripts:\n            - id: \"demoscript\"\n              name: Create.kql\n              path: \"adx/scripts\"\n      eventhub:                    # &lt;--- Eventhub section\n        consumers:\n          - displayName: adx\n            entity: ProbesMeasures\n          - displayName: adx\n            entity: ScenarioMetadata\n          - displayName: adx\n            entity: ScenarioRun\n          - displayName: adx\n            entity: ScenarioRunMetadata\n        connectors:\n          - table_name: ProbesMeasures\n            consumer_group: adx\n            connection_name: ProbesMeasures\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: JSON\n            compression: Gzip\n            mapping: ProbesMeasuresMapping\n          - table_name: ScenarioMetadata\n            consumer_group: adx\n            connection_name: ScenarioMetadata\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: CSV\n            compression: None\n            mapping: ScenarioMetadataMapping\n          - table_name: SimulationTotalFacts\n            consumer_group: adx\n            connection_name: ScenarioRun\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: JSON\n            compression: None\n            mapping: SimulationTotalFactsMapping\n          - table_name: ScenarioRunMetadata\n            consumer_group: adx\n            connection_name: ScenarioRunMetadata\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: CSV\n            compression: None\n            mapping: ScenarioRunMetadataMapping\n  payload:\n    key: \"Project1\"\n    name: \"My Workspace Name\"\n    description: \"Workspace for solution\"\n    solution:\n      solutionId: \"{{services['api.solution_id']}}\"\n    useDedicatedEventHubNamespace: true\n    sendScenarioMetadataToEventHub: true\n    sendInputToDataWarehouse: true\n    sendScenarioRunToEventHub: true\n    webApp:\n      url: \"https://{{services['webapp.static_domain']}}\"\n      options:\n        disableOutOfSyncWarningBanner: true\n        charts:\n          workspaceId: \"{{services['powerbi.workspace.id']}}\"\n          dashboardsViewIframeDisplayRatio: 1.8686131386861313\n          scenarioViewIframeDisplayRatio: 3.2\n          logInWithUserCredentials: false\n          dashboardsView:\n          scenarioView:\n        instanceView:\n          dataContent: null\n          dataSource: null\n        datasetManager:\n        menu:\n    security:\n      default: none\n      accessControlList:\n        - id: user1@email.com\n          role: admin\n        - id: user2@email.com\n          role: editor\n        - id: user3@email.com\n          role: viewer\n</code></pre> <p>The path to existing Power BI reports can be specified under the <code>sidecars \u2192 powerbi \u2192 workspace \u2192 reports</code> section.  </p> <p>Example</p> <pre><code>    reports:\n      - name: Report Name A\n        type: dashboard\n        path: \"powerbi/myreportA.pbix\" # &lt;--- \n        tag: \"myReportATag\"\n        parameters:\n</code></pre>"},{"location":"tutorial/Deploy_CosmoTech_workspace/#how-babylon-handles-power-bi-report-ids","title":"How Babylon Handles Power BI Report IDs","text":"<p>Automatic Power BI Report ID Retrieval</p> <p>Babylon can now automatically retrieve and manage Power BI report IDs during deployment. This eliminates the need for manual copy-paste of report IDs, as was required before.  </p> <p>How it works</p> <ul> <li>Each imported Power BI report must be assigned a unique identifier, called a <code>tag</code>.  </li> <li>Babylon uses this <code>tag</code> to map the report ID.  </li> <li>Once mapped, the report ID can be referenced in the following sections:<ul> <li><code>dashboardsView</code></li> <li><code>scenarioView</code></li> </ul> </li> <li>This referencing will be accomplished using a second variable called <code>reportTag</code> in dashboardsView and scenarioView sections, as illustrated in the example below. This variable should correspond to the Power BI report tag you intend to use. Therefore, Babylon will handle everything automatically.</li> </ul> Example <pre><code>    sidecars:\n      powerbi: \n        workspace:\n          reports:\n            - name: Report Name A\n              type: dashboard\n              path: \"powerbi/myreportA.pbix\"\n              tag: \"myReportATag\" # Here, you should add the tag corresponding to this Power BI report\n            - name: Report Name B\n              type: dashboard\n              path: \"powerbi/myreportB.pbix\"\n              tag: \"myReportBTag\"\n\n    dashboardsView:\n      - dynamicFilters:\n        title:\n          en: Report Name A\n          fr: Report Name A\n        report_tag: \"myReportATag\"\n\n    scenarioView:\n      - dynamicFilters:\n        title:\n          en: Report Name B\n          fr: Report Name B\n        report_tag: \"myReportBTag\"\n</code></pre> <p>With this configuration:</p> <ul> <li>The <code>tag</code> (e.g., <code>myReportATag</code>, <code>myReportBTag</code>) acts as a stable reference.  </li> <li>Babylon automatically resolves and injects the corresponding Power BI Report ID into the deployment files.  </li> <li>These IDs are also persisted in the Babylon state, ensuring consistency across environments.</li> </ul> <p>Auto-injected Report IDs in <code>workspace.yaml</code></p> <pre><code>    dashboardsView:\n      - dynamicFilters: []\n        reportTag: \"myReportATag\"\n        title:\n          en: \"Report Name A\"\n          fr: \"Report Name A\"\n        reportId: \"03729d49-c423-4bf5-bb85-681449b56710\"\n\n    scenarioView:\n      - dynamicFilters: []\n        reportTag: \"myReportBTag\"\n        title:\n          en: \"Report Name B\"\n          fr: \"Report Name B\"\n        reportId: \"9c275c7a-d390-40a0-bc75-b9c5c8093986\"\n</code></pre> <p>Stored in Babylon State</p> <pre><code>    powerbi:\n      dashboard_view:\n        myReportATag: 03729d49-c423-4bf5-bb85-681449b56710\n      scenario_view:\n        myReportBTag: 9c275c7a-d390-40a0-bc75-b9c5c8093986\n</code></pre> <p>All ADX scripts must be placed inside the <code>adx/</code> folder of your project structure See \ud83d\udc49 Examples</p> <p>Permissions Reminder</p> <p>Certain operations may fail if Babylon doesn't have the necessary Azure permissions.</p> <p>To automatically create Azure Data Explorer (ADX) databases, Azure Functions, or Event Hubs, Babylon must have at least the <code>Contributor</code> role on the target resource group.</p> <p>\ud83d\udee1\ufe0f Owner role is required if Babylon also needs to assign roles to Azure resources during the deployment.</p> <p>If you security policy doesn't grant such access to Babylon, these operations must be done manually.</p>"},{"location":"tutorial/Deploy_CosmoTech_workspace/#static-web-app","title":"Static Web App","text":"<p>To deploy a Static Web App, you can either:</p> <ol> <li>Create a new Azure App Registration handled automatically by Babylon.  </li> <li>Use an existing App Registration requires manual configuration.</li> </ol> <p>This behavior is controlled by the <code>create</code> key in the <code>sidecars.azure.app</code> section:</p> <ul> <li>If <code>create: true</code> \u2192 Babylon will create a new App Registration automatically.</li> <li>If <code>create: false</code> \u2192 You must manually provide:<ul> <li><code>client_id</code> \u2192 The Azure App Registration Client ID.</li> <li><code>displayName</code> \u2192 The name of your App Registration.</li> </ul> </li> </ul> <p>Example</p> <pre><code>    azure:\n      app:\n        create: false\n        use:\n          displayName: thisismyappforcontinuous\n          client_id: \"3d0531b1-d23b-4baf-98be-a764c0a42f00\"\n        principal_id: \"{{services['app.principal_id']}}\"\n        add_to_powerbi: true\n        payload:\n          displayName: thisismyappforcontinuous\n          signInAudience: AzureADMyOrg\n</code></pre> <p>Requirements</p> <p>Deploying a Static Web App also requires:</p> <ul> <li>A GitHub repository containing your application code.</li> <li>A destination branch that Babylon will use for deployment.</li> </ul> <p>Quick start:</p> <ol> <li>Create a new GitHub repository</li> <li>Configure your branch <code>&lt;BRANCH&gt;</code> with source code, for example: Azure sample webapp</li> </ol> <p>Commands to configure your branch</p> <pre><code>git init\n</code></pre> <pre><code>echo \"# empty_webapp\" &gt;&gt; README.md\n</code></pre> <pre><code>git add README.md\n</code></pre> <pre><code>git commit -m \"first commit\"\n</code></pre> <pre><code>git branch -M &lt;BRANCH&gt;   # e.g main \n</code></pre> <pre><code>git remote add origin git@github.com:&lt;YOUR_GITHUB_REPOSITORY&gt;.git\n</code></pre> <pre><code>git remote add upstream https://github.com/Cosmo-Tech/azure-sample-webapp.git\n</code></pre> <pre><code>git remote set-url upstream --push \"NO\"\n</code></pre> <pre><code>git fetch --all --tags --prune\n</code></pre> <pre><code>git checkout -B &lt;BRANCH&gt; &lt;SOURCE_TAG&gt;\n</code></pre> <pre><code>rm -r .github/ .git-hooks\n</code></pre> <pre><code>rm -r config.json   # \u26a0\ufe0f Remove if exists\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"first commit\"\n</code></pre> <pre><code>git push origin &lt;BRANCH&gt; -f\n</code></pre> <p>Now that your web app GitHub repository is configured, you can use this <code>webapp.yaml</code> file to deploy a new  static web app:</p> Webapp.yaml <pre><code>kind: WebApp\nnamespace:\n  remote: true   # false by default\n  state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\n  context: test\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"Project1\"\nspec:\n  sidecars:\n    github:\n      organization_name: Cosmo-Tech\n      repository_name: &lt;YOUR_GITHUB_REPOSITORY&gt;  # e.g azure-webapp-test-brewery-webapps\n      branch: &lt;BRANCH&gt;  # e.g main\n    powerbi:\n      group_id: &lt;changement&gt;\n      settings:\n        properties:\n          POWER_BI_SCOPE: \"https://analysis.windows.net/powerbi/api/.default\"\n          POWER_BI_AUTHORITY_URI: https://login.microsoftonline.com/common/v2.0\n          POWER_BI_WORKSPACE_ID: \"{{services['powerbi.workspace.id']}}\"\n          POWER_BI_CLIENT_ID: \"{{services['app.app_id']}}\"\n          POWER_BI_CLIENT_SECRET: \"{{secret_powerbi}}\"\n          POWER_BI_TENANT_ID: \"{{services['azure.tenant_id']}}\"\n    azure:\n      app:\n        create: false\n        use:\n          displayName: thisismyappforcontinuous\n          client_id: \"3d0531b1-d23b-4baf-98be-a764c0a42f00\"\n        principal_id: \"{{services['app.principal_id']}}\"\n        add_to_powerbi: true\n        payload:\n          displayName: thisismyappforcontinuous\n          signInAudience: AzureADMyOrg\n          spa:\n            redirectUris:\n              - http://localhost:3000/sign-in\n              - https://&lt;custome_domain_of_your_static_web_app&gt;/sign-in\n          requiredResourceAccess:\n            - resourceAppId: \"{{services['platform.app_id']}}\"\n              resourceAccess:\n                - id: \"{{services['platform.scope_id']}}\"\n                  type: Scope\n      function:\n        url_zip: \"https://github.com/Cosmo-Tech/supplychain-azure-function-dataset-download/releases/download/2.1.10/artifact.zip\"\n    config:\n      REACT_APP_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY: \"{{services['webapp.insights_instrumentation_key']}}\"\n      REACT_APP_ENABLE_APPLICATION_INSIGHTS: \"{{services['webapp.enable_insights']}}\"\n      REACT_APP_APP_REGISTRATION_CLIENT_ID: \"{{services['app.app_id']}}\"\n      REACT_APP_AZURE_TENANT_ID: \"{{services['azure.tenant_id']}}\"\n      REACT_APP_COSMOTECH_API_SCOPE: \"{{services['api.scope']}}\"\n      REACT_APP_DEFAULT_BASE_PATH: \"{{services['api.url']}}\"\n      REACT_APP_ORGANIZATION_ID: \"{{services['api.organization_id']}}\"\n      REACT_APP_WORKSPACES_IDS_FILTER: \"\"\n      REACT_APP_APP_VERSION: \"\"\n      REACT_APP_ORGANIZATION_URL: \"{{services['api.organization_url']}}\"\n      REACT_APP_DOCUMENTATION_URL: https://cosmotech.com\n      REACT_APP_SUPPORT_URL: https://support.cosmotech.com\n  payload:\n    name: \"my-webapp-for-continuous\"\n    location: westeurope\n    properties:\n      repositoryUrl: https://github.com/&lt;YOUR_GITHUB_REPOSITORY&gt; \n      branch: &lt;BRANCH&gt;  # e.g main\n      repositoryToken: \"{{github_secret}}\"\n      buildProperties:\n        appLocation: \"/\"\n        apiLocation: api\n        appArtifactLocation: build\n    sku:\n      name: Standard\n      tier: Standard\n</code></pre>"},{"location":"tutorial/Deploy_CosmoTech_workspace/#api-connector","title":"API Connector","text":"<p>Currently, to create a new connector, we use the API endpoint. Below is an example of how you can create it using a YAML configuration file.</p> connector_azure_storage.yaml <pre><code>key: connector_azure_storage\nname: Azure Storage Connector\ndescription: Connector for Azure Storage. Read all data in a container with a prefix\n  and write the data in CSV for a ScenarioRun\nversion: \"1.1.2\"\nrepository: cosmo-tech/azure-storage-simulator-connector\ntags:\n- Azure Storage\n- Babylon\nurl: https://github.com/Cosmo-Tech/azure-storage-simulator-connector\nioTypes:\n- read\nazureAuthenticationWithCustomerAppRegistration:\nazureManagedIdentity:\nparameterGroups:\n- id: parameters\n  label: Parameters\n  parameters:\n  - id: AZURE_STORAGE_CONNECTION_STRING\n    label: Azure Storage Connection String\n    valueType: string\n    default: \"%STORAGE_CONNECTION_STRING%\"\n    envVar: AZURE_STORAGE_CONNECTION_STRING\n  - id: AZURE_STORAGE_CONTAINER_BLOB_PREFIX\n    label: Azure Storage Path in the form container/path\n    valueType: string\n    envVar: AZURE_STORAGE_CONTAINER_BLOB_PREFIX\n</code></pre>"},{"location":"tutorial/Deploy_CosmoTech_workspace/#api-dataset","title":"API Dataset","text":"<p>To deploy one or multiple datasets, one yaml file is needed by dataset. Four sourceType of datasets are available:</p> <ul> <li>ADT - creates dataset from ADT</li> <li>AzureStorage - creates dataset with Azure Storage</li> <li>File - creates dataset from a local file</li> <li>None - creates an empty dataset</li> </ul> Dataset.yaml <pre><code>kind: Dataset\nnamespace:\n  remote: true   # false by default\n  state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\n  context: test\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nspec:\n  sidecars:\n    azure:\n      dataset:\n        storage:\n          local_path: # needed if you want to upload your local dataset to AzureStorage\n        file:\n          local_path: # needed for datasets with sourceType File\n  payload:\n    id: # mandatory if you want to launch an update, without id a new dataset will be created ; if you want a new dataset, leave this field empty\n    name: Apply dataset\n    description: Creating dataset with nothing but update\n    sourceType: None | AzureStorage | ADT | File\n    source:\n      path: # path to the folder in AzureStorage, mandatory if sourceType is AzureStorage\n        # and no local file is provided\n      location: # mandatory field if sourceType is ADT: path to dataset stored in ADT;\n        # if sourceType is AzureStorage, default value is set to organization\n        # container, you can edit this field if you want to use a dataset from\n        # another container\n      name: # field used for sourceType AzureStorage, by default is set to storage account\n        # name referenced in state; edit it if you want to use a dataset from another\n        # account\n    security:\n      default: viewer\n      accessControlList:\n        - id: user1@email.com\n          role: admin\n        - id: user2@email.com\n          role: editor\n        - id: user3@email.com\n          role: viewer\n</code></pre> <p>Note current usage</p> <ul> <li>To create a dataset, we currently use the API endpoint to register a new dataset.</li> <li>Connector ID (must be also created via API see API Connector section)</li> </ul> API INPUT <pre><code>  name: mydataset\n  description: Some description of your dataset\n  tags:\n    - dataset\n    - File Storage\n  connector:\n    id: c-q5qv7xcsqv64\n    parametersValues:\n      AZURE_STORAGE_CONTAINER_BLOB_PREFIX: \"%WORKSPACE_FILE%/default_parameters/&lt;mydataset&gt;/data.xlsx\"\n  security:\n    default: editor\n    accessControlList:\n      - id: user1@email.com\n        role: admin\n      - id: user2@email.com\n        role: editor\n      - id: user3@email.com\n        role: viewer\n</code></pre>"},{"location":"tutorial/Deploy_CosmoTech_workspace/#babylon-project-structure","title":"Babylon project structure","text":"<p>Project folder must have the following structure:</p> <p>Tree</p> <pre><code>\u251c\u2500\u2500 variables.yaml\n\u251c\u2500\u2500 project\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 adx\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 scripts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 Create.kql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 connector_azure_storage.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 organization.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 powerbi\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 report1.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 report2.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 report3.pbix\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 solution.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 webapp.yaml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 workspace.yaml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"tutorial/Deploy_CosmoTech_workspace/#launching-the-deployment-macro-command","title":"Launching the deployment Macro command","text":"<p>After filling all deployment files, you can launch the following command:</p> <p>Babylon Macro apply</p> <pre><code>babylon apply project/\n</code></pre> <p>Babylon will create and deploy all resources and save it in the state except for datasets.  Keeping this information in the state simplifies modification of the resources as you can edit one of the project deployment files and relaunch <code>babylon apply</code> command. It will update existing resources or create missing ones, for example, in case when Babylon was granted more rights between two <code>apply</code> commands.</p> <p>You can also specify different variable files when launching the <code>babylon apply</code> command. </p> <p>To do this, use the <code>--var-file</code> option.</p> <p>Example</p> <pre><code>babylon apply project/ --var-file variable_file_1.yaml --var-file variable_file_2.yaml\n</code></pre> <p>Remember</p> <p>If you don't specify a variable file, Babylon will use the default variable file <code>variables.yaml</code></p>"},{"location":"tutorial/Deploy_CosmoTech_workspace/#executing-babylon-apply-on-a-single-object-api","title":"Executing babylon apply on a Single Object API","text":"<p>Babylon now supports deploying or updating a single object API using the <code>apply</code> macro command. This enhancement makes it easier to maintain and update only the specific object that has changed, instead of running the macro for all objects following best practices for efficient deployments.</p> <p>Command syntax</p> <p><pre><code>&gt; babylon apply --OBJECT --var-file variable_file_1.yaml project/\n</code></pre> As objects, Babylon accepts the following:</p> <pre><code>--organization       Deploy or update an organization.\n--solution           Deploy or update a solution. \n--workspace          Deploy or update a workspace.\n--webapp             Deploy or update a webapp.\n--dataset            Deploy or update a dataset.\n</code></pre>"},{"location":"tutorial/Deploy_CosmoTech_workspace/#executing-babylon-with-payload-only-option","title":"Executing babylon with <code>--payload-only</code> option","text":"<p>The <code>--payload-only</code> option allows Babylon to deploy or update an object API without triggering the deployment of associated Azure services defined in the deployment file. This is particularly useful for incremental updates where you only need to modify lightweight parts, such as adding permissions in the Object ACL or updating the payload. Fully redeploying these parts can be time consuming.</p> <p>However, this option should not be used when there are new Power BI reports, ADX database permissions, or other changes related to azure section, as those require a full deployment.</p> <p>\ud83d\udca1 Best practice for using <code>--payload-only</code> </p> <p>Use this option only when you have changes limited to the payload itself, avoiding unnecessary redeployment of Azure section.</p> <p><pre><code>&gt; babylon apply --OBJECT --payload-only --var-file variable_file_1.yaml project/\n</code></pre> As objects now, Babylon accepts the following:</p> <pre><code>--solution           Deploy or update a solution pyload only. \n--workspace          Deploy or update a workspace pyload only.\n</code></pre>"},{"location":"tutorial/Deploy_workspace_with_existing_org_sol/","title":"Deploy Cosmo Tech workspace with an existing organization and solution","text":"<p>Remember</p> <p>This guide focuses on explaining who we can deploy a wokspace with an existing organization and solution. A complete deployment workflow is provided in the Examples section, where all components are combined in a practical scenario !</p> <p>Before proceeding, ensure that you have selected the correct <code>platform</code> and <code>project</code>. If unsure, contact your <code>Babylon administrator</code> for the available options. In this example, we will use</p> <ul> <li>context_id: <code>test</code></li> <li>platform_id: <code>dev</code></li> <li>state_id: <code>8db6069e-e05f-42e6-b6d6-56dde124516a</code></li> </ul> <p>Before going further, you should know that we have two concepts: deploying a solution object within an existing organization, and deploying a workspace object within an existing organization and solution. This is just to give you some quick context for the tutorial.</p>"},{"location":"tutorial/Deploy_workspace_with_existing_org_sol/#deploy-a-new-solution-within-an-existing-organization","title":"Deploy a new solution Within an existing organization","text":"<p>In this section, we will walk through deploying a Solution within an existing Organization. This setup assumes that:</p> <ul> <li>You already have at least one Organization deployed.</li> <li>A Solution can be deployed and linked to this existing organization.</li> </ul> <p>To deploy a new Solution within an existing Organization, you must declare its configuration in the YAML file. The main changes occur in the <code>solution.yaml</code> file, where you add the <code>metadata</code> section.</p>"},{"location":"tutorial/Deploy_workspace_with_existing_org_sol/#metadata-overview","title":"Metadata Overview","text":"<p>The <code>metadata</code> section contains deployment specific data and can appear in:</p> <ul> <li><code>solution.yaml</code></li> <li><code>workspace.yaml</code></li> <li><code>webapp.yaml</code></li> </ul> <p>Required Parameter</p> <p>The <code>workspace_key</code> parameter must be included in each <code>metadata</code> section. If <code>workspace_key</code> is empty, the deployment will fail.</p>"},{"location":"tutorial/Deploy_workspace_with_existing_org_sol/#selector-overview","title":"Selector Overview","text":"<p>Within <code>metadata</code>, there is a nested section called <code>selector</code> where you can set the <code>organization_id</code> field. This allows deployment of a solution within an existing organization.</p> <p>Important</p> <p>Add <code>organization_id</code> to the <code>variables.yaml</code> file.</p> <p>variables.yaml</p> <pre><code>state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\ncontext_id: test\nplatform_id: dev\nplatform:\n   id: dev\n   url: https://dev.api.cosmotech.com/phoenix/v3-0\n\nworkspace_key: Project1\n# API \norganization_id: o-rv0x8vd464kl\n</code></pre> <p>Below is an example of the solution manifest structure.</p> solution.yaml <pre><code>kind: Solution\nnamespace:\n  remote: true   # false by default\n  state_id: \"{{state_id}}\"\n  context: \"{{context_id}}\"\n  platform: {{platform}}\nmetadata:\n  workspace_key: \"{{workspace_key}}\"\n  selector:\n    organization_id: \"{{organization_id}}\" # &lt;---\nspec:\n  payload:\n    key: \"demosolution\"\n    name: \"My Solution Name\"\n    description: \"My solution description\"\n    repository: brewery_for_continuous\n    version: latest\n    tags:\n      - brewery\n    runTemplates:\n      - id: \"run_id\"\n        name: \"Standard simulation\"\n        csmSimulation: AzureWebApp/AzureWebApp_Simulation\n        run: true\n        preRun: true\n    parameters:\n    parameterGroups:\n    security:\n      default: none\n      accessControlList:\n        - id: user1@email.com\n          role: admin\n        - id: user2@email.com\n          role: editor\n        - id: user3@email.com\n          role: viewer\n</code></pre>"},{"location":"tutorial/Deploy_workspace_with_existing_org_sol/#deploy-a-new-workspace-withing-an-existing-solution-and-organization","title":"Deploy a new workspace withing an existing solution and organization","text":"<p>Similarly, you can deploy a new Workspace within an existing Organization and Solution.  </p> <p>To do this, add both <code>organization_id</code> and <code>solution_id</code> under <code>metadata.selector</code> in the workspace configuration file.</p> Workspace.yaml <pre><code>kind: Workspace\nnamespace:\n  remote: true   # false by default\n  state_id: \"{{state_id}}\"\n  context: \"{{context_id}}\"\n  platform: {{platform}}\nmetadata:\n  workspace_key: \"{{workspace_key}}\"\n  selector:\n    organization_id: \"{{organization_id}}\" # &lt;--- \n    solution_id: \"{{solution_id}}\"         # &lt;---\nspec:\n  sidecars:\n    azure:\n      powerbi: # &lt;--- powerbi section\n        workspace:\n          name: \"My workspace Powerbi Name\"\n          reports:\n            - name: Report Name A\n              type: dashboard\n              path: \"powerbi/myreportA.pbix\"\n              tag: \"myReportATag\"\n              parameters:\n                - id: \"ADX_Cluster\"\n                  value: \"https://{{services['adx.cluster_name']}}.westeurope.kusto.windows.net\"\n                - id: \"ADX_Database\"\n                  value: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n          permissions:\n            - identifier: \"user1@email.com\"\n              rights: Admin\n              type: User\n            - identifier: \"user2@email.com\"\n              rights: Contributor\n              type: User\n            - identifier: \"user3@email.com\"\n              rights: Viewer\n              type: User\n            - identifier: \"&lt;guid&gt;\"\n              description: \"Object Id of Service Principal WebApp\"\n              rights: Admin\n              type: App\n      adx:                   # &lt;--- adx section\n        database:\n          uri: \"https://{{services['adx.cluster_name']}}.{{location}}.kusto.windows.net\"  # URI Azure Data Explorer Cluster\n          create: true\n          retention: 365\n          permissions:\n            - type: User\n              email: \"user1@email.com\"\n              principal_id: \"412f3fad-3ce3-588s-994c-2a36bccaa0b2\"\n              role: Admin\n            - type: User\n              email: \"user2@email.com\"\n              principal_id: \"987d3fad-3ce3-588s-994c-2f5s4de8ddd5\"\n              role: User\n            - type: App\n              description: \"Cosmo Tech Platform &lt;platform_name&gt; For &lt;tenant_name&gt;\"\n              principal_id: \"{{services['platform.principal_id']}}\" # Object ID of Platform Enterprise Application\n              role: Admin\n          scripts:\n            - id: \"demoscript\"\n              name: Create.kql\n              path: \"adx/scripts\"\n      eventhub:                    # &lt;--- Eventhub section\n        consumers:\n          - displayName: adx\n            entity: ProbesMeasures\n          - displayName: adx\n            entity: ScenarioMetadata\n          - displayName: adx\n            entity: ScenarioRun\n          - displayName: adx\n            entity: ScenarioRunMetadata\n        connectors:\n          - table_name: ProbesMeasures\n            consumer_group: adx\n            connection_name: ProbesMeasures\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: JSON\n            compression: Gzip\n            mapping: ProbesMeasuresMapping\n          - table_name: ScenarioMetadata\n            consumer_group: adx\n            connection_name: ScenarioMetadata\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: CSV\n            compression: None\n            mapping: ScenarioMetadataMapping\n          - table_name: SimulationTotalFacts\n            consumer_group: adx\n            connection_name: ScenarioRun\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: JSON\n            compression: None\n            mapping: SimulationTotalFactsMapping\n          - table_name: ScenarioRunMetadata\n            consumer_group: adx\n            connection_name: ScenarioRunMetadata\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: CSV\n            compression: None\n            mapping: ScenarioRunMetadataMapping\n  payload:\n    key: \"Project1\"\n    name: \"My Workspace Name\"\n    description: \"Workspace for solution\"\n    solution:\n      solutionId: \"{{services['api.solution_id']}}\"\n    useDedicatedEventHubNamespace: true\n    sendScenarioMetadataToEventHub: true\n    sendInputToDataWarehouse: true\n    sendScenarioRunToEventHub: true\n    webApp:\n      url: \"https://{{services['webapp.static_domain']}}\"\n      options:\n        disableOutOfSyncWarningBanner: true\n        charts:\n          workspaceId: \"{{services['powerbi.workspace.id']}}\"\n          dashboardsViewIframeDisplayRatio: 1.8686131386861313\n          scenarioViewIframeDisplayRatio: 3.2\n          logInWithUserCredentials: false\n          dashboardsView:\n          scenarioView:\n        instanceView:\n          dataContent: null\n          dataSource: null\n        datasetManager:\n        menu:\n    security:\n      default: none\n      accessControlList:\n        - id: user1@email.com\n          role: admin\n        - id: user2@email.com\n          role: editor\n        - id: user3@email.com\n          role: viewer\n</code></pre> <p>Make sure to reference the corresponding <code>organization_id</code> and <code>solution_id</code> values declared in your <code>variables.yaml</code> file.</p> <p>variables.yaml</p> <pre><code>state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\ncontext_id: test\nplatform_id: dev\nplatform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\n\nworkspace_key: Project1\n# API \norganization_id: o-rv0x8vd464kl\nsolution_id: sol-wryolow98dsg\n</code></pre> <p>Now, with this Babylon feature, you can deploy multiple Workspaces that:</p> <ol> <li>Share the same Organization and Solution.</li> <li>Share the same Organization but use different Solutions.</li> </ol> <p>Important</p> <p>For each workspace deployment, you need a specific state file.</p> <p>e.g :  <code>state.&lt;context_id&gt;.&lt;platform_id&gt;.&lt;state_id&gt;.yaml</code></p>"},{"location":"tutorial/Destroy_workspace/","title":"Destroy a Cosmo Tech Workspace","text":"<p>Remember</p> <p>Keep in mind that the <code>destroy</code> command is a macro command that removes everything deployed.</p> <p>If you no longer need a Cosmo Tech workspace, you can remove it and all associated resources using the <code>babylon destroy</code> macro command. This will automatically delete the following resources:</p> <ul> <li>Scenarios and scenario runs</li> <li>Datasets</li> <li>ADX databases</li> <li>Event Hubs</li> <li>Azure Functions</li> <li>Static Web apps</li> <li>Power BI workspaces</li> <li>Workspaces</li> <li>Run templates</li> <li>Solutions</li> </ul> <p>By default, it destroys the resources referenced in the state saved in the namespace file.  </p> <p>Note</p> <p>The namespace file is stored at the following path on your host machine:</p> <p><pre><code>~/.config/cosmotech/babylon/namespace.yaml\n</code></pre> <pre><code>&gt; cat namespace.yaml          \ncontext: test\nplatform: dev\nstate_id: 25075b92-sx82-4952-9e9b-53360dacg45f\n</code></pre></p> <p>You can also specify a different state file using the <code>--state-to-destroy</code> option:</p> <p>Babylon Destroy</p> <pre><code>babylon destroy --state-to-destroy /path/to/&lt;state_id&gt;\n</code></pre>"},{"location":"tutorial/Getting_started/","title":"Getting started with Babylon","text":"<p>This is a guide to getting started with Babylon. You'll learn how to install, run, and experiment with the Babylon.</p>"},{"location":"tutorial/Getting_started/#azure-requirements","title":"Azure requirements","text":"<p>Requirements</p> <p>The following elements are required before you can use Babylon on an Azure subscription</p> <ul> <li> <p>Fully set up Cosmo Tech Platform installed on your Azure Tenant</p> </li> <li> <p>App registration for Babylon</p> </li> </ul> <p>Babylon uses a Service Principal to interact with the API and other resources. To do so, Babylon needs to be registered as an application in the Azure Active Directory.</p> <p>This App Registration will be used to authenticate and get the required tokens to connect to your Platform. Rights on the App Registration depends on the type of connection you want to make. </p> <p>We recommend defining this app registration as a mobile and desktop application in Azure configuration with redirection URL (mostly for authenticating against Azure services.</p> <p>See official documentation :</p> <pre><code>* https://learn.microsoft.com/en-us/entra/identity-platform/v2-oauth2-auth-code-flow\n* https://learn.microsoft.com/en-us/entra/identity-platform/msal-client-application-configuration\n* https://learn.microsoft.com/en-us/onedrive/developer/rest-api/getting-started/msa-oauth?view=odsp-graph-online\n</code></pre> <p>The App registration needs the following API permissions:</p> <p>API Permissions</p> <p>Microsoft Graph \ud83d\udd39 Application.ReadWrite.All (Application) \ud83d\udd39 Application.ReadWrite.OwnedBy (Application) \ud83d\udd39 Group.ReadWrite.All (Delegated) \ud83d\udd39 User.Read (Delegated) </p> <p>Platform API \ud83d\udd39 Platform.Admin (Application) </p> <p>For those concerned with specifics Azure policies, all Microsoft Graph's permissions can be deleted excepted User.Read (Delegated), but this implies that some operations would be handled manually. The platform API permission is mandatory.</p> <p>Important</p> <p>Babylon App registration needs at least Contributor role on Cosmo Tech Platform Resource Group.</p>"},{"location":"tutorial/Getting_started/#get-babylon-from-source","title":"Get Babylon from source","text":"<p>Requirements</p> <ul> <li>\ud83d\udc0d Python 3.10+ </li> <li>\ud83d\udce6 Pip 22.2+ </li> <li>\ud83c\udf31 Git (latest version) </li> </ul> <p>We will go through the process of getting a version of Babylon before the installation.</p> <p>Get sources from git</p> <p>You can download the latest version of Babylon using git clone command</p> <p>Latest Version</p> <pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git babylon\ncd babylon\n</code></pre> <p>Get the specific version from git</p> <p>If you want a specific version of Babylon (e.g. 3.0.0)</p> <p>Specific Version</p> <pre><code>git clone -b 3.0.0 git@github.com:Cosmo-Tech/Babylon.git babylon\ncd babylon\n</code></pre>"},{"location":"tutorial/Getting_started/#install-babylon","title":"Install Babylon","text":"<p>You can install Babylon globally on your system:</p> <p>Example</p> <pre><code>python3 -m venv ~/babylonenv\nsource ~/babylonenv/bin/activate\npip install .\n</code></pre> <p>Alternatively, follow these steps if you want to install Babylon in development mode:</p> <p>Example</p> <pre><code>python3 -m venv ~/babylonenv\nsource ~/babylonenv/bin/activate\npip install -e .\n</code></pre> <p>Now that you have a fully functional installation of Babylon, you can check the next steps to learn how to start running commands.</p>"},{"location":"tutorial/Getting_started/#setup-babylon","title":"Setup Babylon","text":"<p>Babylon use a Vault service and provides a group of commands that can be used.</p> <p>The first thing to do in order to check if Babylon is working properly: <pre><code>babylon --help\n</code></pre></p>"},{"location":"tutorial/Getting_started/#setup-environment-variables","title":"Setup Environment Variables","text":"<p>The Vault service is required some environment variables before interacting with Babylon CLI To do so,  Contact your Babylon admin to get service URI and token.  </p> <p>Important</p> <p>You can retrieve those values directly from the cluster See \ud83d\udc49 Retrieve Vault URL and Token.</p> <p>When you retrieve these values, you need to set the following environment variables</p> <p>Example</p> <pre><code>export BABYLON_ORG_NAME=\"vault_org_name\" # cosmotech\nexport BABYLON_TOKEN=\"vault_root_token\"  # hvs.CLxxxxxxxxxxxxxxx\nexport BABYLON_SERVICE=\"vault_url\"       # https://example.api.cosmotech.com\n</code></pre>"},{"location":"tutorial/Getting_started/#configuration","title":"Configuration","text":"<p>At this point, you need three variables to perform Babylon commands.</p> Variable Description Example <code>context_id</code> Project name (string of your choice, no special characters) <code>project1</code> <code>platform_id</code> Platform ID (e.g., dev, staging, prod) <code>dev</code> <code>state_id</code> State name (string of your choice, no special characters) <code>state1</code> <p>\u26a0\ufe0f Variable Constraints</p> <ul> <li> <p><code>context_id</code> and <code>state_id</code> can be any string of your choice, but they must not contain special characters.  </p> </li> <li> <p>If you are on Linux, you can generate a new UUID with <code>uuidgen</code>: <pre><code>sudo apt update\nsudo apt install uuid-runtime -y\n# run uuidgen command \nuuidgen\n# Example output:\n0475231d-3c7c-4505-af38-558041240d3d\n</code></pre></p> </li> <li> <p><code>platform_id</code> represents the platform identifier (e.g., <code>dev</code>, <code>staging</code>, ...).   \u26a0\ufe0f It must be the same <code>platform_id</code> you used when initializing the Vault configuration.</p> </li> <li> <p>Example Vault config command you can See \ud83d\udc49 Usage :   <pre><code>python main.py config write --resource all --use-azure --engine v1 --platform-id dev\n</code></pre></p> </li> </ul> <p>To initialize Babylon with these values, run:</p> <pre><code>babylon namespace use -c &lt;context_id&gt; -p &lt;platform_id&gt; -s &lt;state_id&gt;\n</code></pre> <p>Generated Configuration</p> <ul> <li>This command creates a file called namespace.yaml</li> <li>Location: ~/.config/cosmotech/babylon/namespace.yaml</li> <li>It contains the current context for your deployment</li> </ul> <p>You can now test Babylon by running a simple command:   <pre><code>babylon api organizations get-all\n</code></pre> If you have already created an organization, you should see its details in the output.</p> <p>Example List Organizations</p> <p><pre><code>&gt; babylon api organizations get-all\n</code></pre> <pre><code>[\n  {\n    \"id\": \"o-55dsz6e51n8y8j\",\n    \"name\": \"Organization name\",\n    \"ownerId\": \"e0035649-0f12-4221-9631-3519704816c1\",\n    \"services\": null,\n    \"security\": {\n      \"default\": \"none\",\n      \"accessControlList\": [\n        {\n          \"id\": \"example.test@cosmotech.com\",\n          \"role\": \"admin\"\n        }\n      ]\n    }\n  }\n]\n</code></pre></p> <p>The initial configuration is fetched from Vault and then persisted in two different backends to ensure consistency and recovery. This persisted configuration is referred to as the Babylon state.</p> <p>Where Babylon state is stored</p> <p>The state is saved in two places:</p> <ol> <li>Remote backend (Azure Storage Blob) \u2192 <code>babylon-states</code> </li> <li>Local backend (YAML file) \u2192 <code>~/.config/cosmotech/babylon/state.&lt;context_id&gt;.&lt;platform_id&gt;.&lt;state_id&gt;.yaml</code> </li> </ol>"},{"location":"tutorial/Getting_started/#state-file-specification","title":"State file specification","text":"<p>If the state file does not exist, the first Babylon command you run will initialize a new state and persist it in Azure Storage and local file.</p> <p>Note</p> <p>To enable persistence in Azure Storage, you must set the parameter <code>remote: true</code>. (This will be explained in detail in the Deploy Workspace tutorial just keep it in mind for now)</p>"},{"location":"tutorial/Getting_started/#babylon-state-structure","title":"Babylon State Structure","text":"<p>The Babylon state is a structured YAML file composed of multiple sections. At a high level, you will find three main entries: <pre><code>context:\nfiles: []\nid: 25075b92-fe8e-4952-9e9b-53360dacf369\nplatform:\n</code></pre> The last one contains following keys with some information already prefilled with data from vault:</p> <p>Azure Container Registry </p> <pre><code>services:\n  acr:\n    login_server: \n    simulator_repository: \n    simulator_version: \n</code></pre> <p>Azure Digital Twins </p> <pre><code>  adt:\n    built_owner_id: \n    built_reader_id: \n    digital_twin_url:  \n</code></pre> <p>Azure Explorer Database</p> <pre><code>  adx:\n    built_contributor_id: \n    built_owner_id: \n    cluster_name: \n    cluster_principal_id: \n    cluster_uri: \n    database_name: \n</code></pre> <p>Cosmotech API </p> <pre><code>  api:\n    connector.adt_id: \n    connector.adt_version: \n    connector.storage_id: \n    connector.storage_version: \n    connector.twin_id: \n    connector.twin_version: \n    dataset.adt_id: \n    dataset.storage_id: \n    dataset.twin_id: \n    organization_id: \n    organization_url: \n    run_templates: \n    scope: \n    send_scenario_metadata_to_event_hub: \n    solution_id: \n    url: \n    use_dedicated_event_hub_namespace: \n    workspace_id: \n    workspace_key: \n</code></pre> <p>Azure App Registration</p> <pre><code>  app:\n    app_id: \n    name: \n    object_id: \n    principal_id: \n</code></pre> <p>Azure </p> <pre><code>    azure:\n      cli_client_id:\n      email: \n      eventhub_built_contributor_id:\n      eventhub_built_data_receiver:\n      eventhub_built_data_sender:\n      function_artifact_url: \n      resource_group_name: \n      resource_location: \n      storage_account_name: \n      storage_blob_reader: \n      subscription_id:\n      team_id:\n      user_principal_id: \n</code></pre> <p>Azure Babylon App Registration </p> <pre><code>    babylon:\n      client_id: \n      principal_id: \n</code></pre> <p>Github </p> <pre><code>    github:\n      branch: \n      organization: \n      repository: \n      run_url: \n      workflow_path: \n</code></pre> <p>Cosmotech Platform </p> <pre><code>    platform:\n      app_id: \n      principal_id: \n      scope_id: \n</code></pre> <p>PowerBI</p> <pre><code>    powerbi:\n      dashboard_view: \n      scenario_view: \n      scope: \n      workspace.id:\n      workspace.name:\n</code></pre> <p>WebApp </p> <pre><code>    webapp:\n      deployment_name: \n      enable_insights: \n      hostname: \n      insights_instrumentation_key: \n      location: \n      static_domain: \n</code></pre>"},{"location":"tutorial/Getting_started_with_babylon_v5/","title":"Getting started with Babylon 5","text":"<p>In this guide you'll learn how to install Babylon 5, run Babylon commands, and experiment with the tool.</p>"},{"location":"tutorial/Getting_started_with_babylon_v5/#get-babylon-from-source","title":"Get Babylon from source","text":"<p>Requirements</p> <ul> <li>\ud83d\udc0d Python 3.10+ </li> <li>\ud83d\udce6 Pip 22.2+ </li> <li>\ud83c\udf31 Git (latest version) </li> </ul> <p>We will go through the process of getting a version of Babylon before the installation.</p> <p>Get sources from git</p> <p>You can download the latest version of Babylon using git clone command</p> <p>Latest Version</p> <pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git babylon\ncd babylon\n</code></pre> <p>Get the specific version from git</p> <p>If you want a specific version of Babylon (e.g. 3.0.0)</p> <p>Specific Version</p> <pre><code>git clone -b 3.0.0 git@github.com:Cosmo-Tech/Babylon.git babylon\ncd babylon\n</code></pre>"},{"location":"tutorial/Getting_started_with_babylon_v5/#install-babylon","title":"Install Babylon","text":"<p>You can install Babylon globally on your system:</p> <p>Example</p> <pre><code>python3 -m venv ~/babylonenv\nsource ~/babylonenv/bin/activate\npip install .\n</code></pre> <p>Alternatively, follow these steps if you want to install Babylon in development mode:</p> <p>Example</p> <pre><code>python3 -m venv ~/babylonenv\nsource ~/babylonenv/bin/activate\npip install -e .\n</code></pre> <p>Now that you have a fully functional installation of Babylon, you can check the next steps and learn how to start running commands.</p>"},{"location":"tutorial/Getting_started_with_babylon_v5/#setup-babylon","title":"Setup Babylon","text":"<p>Babylon use a Vault service as its source of configuration and provides a group of commands that can be used.</p> <p>The first thing to do in order to check if Babylon is working properly: <pre><code>babylon --help\n</code></pre></p>"},{"location":"tutorial/Getting_started_with_babylon_v5/#environment-variable","title":"Environment Variable","text":"<p>The Vault service requires multiple environment variables before interacting with Babylon CLI.  Contact your Babylon admin to get your service URI and token values.  </p> <p>Important</p> <p>You can retrieve those values directly from the cluster.  See \ud83d\udc49 Retrieve Vault URL and Token.</p> <p>Set the following environment variables with the proper values: </p> <p>Example</p> <pre><code>export BABYLON_ORG_NAME=\"vault_org_name\" # cosmotech\nexport BABYLON_TOKEN=\"vault_root_token\"  # hvs.CLxxxxxxxxxxxxxxx\nexport BABYLON_SERVICE=\"vault_url\"       # https://example.api.cosmotech.com\n</code></pre>"},{"location":"tutorial/Getting_started_with_babylon_v5/#configuration","title":"Configuration","text":"<p>At this point, you need to define three variables to run Babylon commands.</p> Variable Description Example <code>context_id</code> Project name (string of your choice, no special characters) <code>project1</code> <code>platform_id</code> Platform ID (e.g., dev, staging, prod) <code>dev</code> <code>state_id</code> State name (string of your choice, no special characters) <code>state1</code> <p>\u26a0\ufe0f Variable Constraints</p> <ul> <li> <p><code>context_id</code> and <code>state_id</code> can be any string of your choice, but they must contain no special characters.  </p> </li> <li> <p>If you are on Linux, you can generate a new UUID with <code>uuidgen</code>: <pre><code>sudo apt update\nsudo apt install uuid-runtime -y\n# run uuidgen command \nuuidgen | cut -c1-8\n# Example output:\n0475231d-3c7c-4505-af38-558041240d3d\n</code></pre></p> </li> <li> <p><code>platform_id</code> represents the platform identifier (e.g., <code>dev</code>, <code>staging</code>, ...).   \u26a0\ufe0f It must be the same <code>platform_id</code> you used when initializing the Vault configuration.</p> </li> </ul> <p>To initialize Babylon with these values, run:</p> <pre><code>babylon namespace use -c &lt;context_id&gt; -p &lt;platform_id&gt; -s &lt;state_id&gt;\n</code></pre> <p>Generated Configuration</p> <ul> <li>This command creates a file called namespace.yaml</li> <li>Location: ~/.config/cosmotech/babylon/namespace.yaml</li> <li>It contains the current context for your deployment.</li> </ul>"},{"location":"tutorial/Getting_started_with_babylon_v5/#whats-new-in-babylon-v5","title":"What\u2019s New in Babylon v5","text":""},{"location":"tutorial/Getting_started_with_babylon_v5/#new-namespace-commands","title":"New namespace commands","text":"<p>Running the following command displays the updated namespace commands:</p> <p>Example</p> <pre><code>&gt; babylon namespace --help\nUsage: babylon namespace [OPTIONS] COMMAND [ARGS]...\n\n  Babylon namespace\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  get-contexts  Display the currently active namespace\n  get-states    Display all states in your local machine\n  use           Switch to a specific namespace or create a new one\n</code></pre> <p>Using these commands, you can check the currently active namespace.  Additionally, with <code>get-states</code>, you can list all states available on our local machine. Here are some examples:</p> <p>Example</p> <pre><code>&gt; babylon namespace get-contexts  \nCURRENT  CONTEXT                            TENANT        STATE ID                              \n*        sphinx-dev  sphinx  1184d4e3-b9de-4c10-a8f0-db8101e4c1e0 \n\n# or use get-states\n\n&gt; babylon namespace get-states \nINFO   2025-10-23 22:27:31,230 |  state.dev.sphinx.c9b011db-93d9-42f2-a603-8766ffee5aee.yaml\nINFO   2025-10-23 22:27:31,232 |  state.prod.sphinx.d4ab0004-a10c-4b98-8fb0-f4176725e0db.yaml\nINFO   2025-10-23 22:27:31,233 |  state.staging.sphinx.9646a17d-4b87-445f-adee-980ac8fd912h.yaml\n</code></pre>"},{"location":"tutorial/Getting_started_with_babylon_v5/#keycloak-authentication","title":"Keycloak Authentication","text":"<p>Keycloak Auth</p> <ul> <li>Starting with vesion 5, Babylon uses Keycloak as the authentication system to authenticate with the API and execute commands to create a Cosmotech API object.</li> <li>A new client, <code>cosmotech-babylon-client</code>, is created in Keycloak for this purpose.</li> </ul>"},{"location":"tutorial/Getting_started_with_babylon_v5/#new-babylon-init-commnad","title":"New babylon init commnad","text":"<p>After setting the context with the <code>namespace use</code> command you can now easily initialize your project with a basic structure using the <code>babylon init</code> command. Here\u2019s an example:</p> <p>Examples</p> <p><pre><code>&gt; babylon init --help\nUsage: babylon init [OPTIONS]\n\nCreate a Babylon project structure using YAML templates.\n\nOptions:\n--project-folder TEXT  Name of the project folder to create (default:'project').\n--variables-file TEXT  Name of the variables file (default:'variables.yaml').\n--help  Show this message and exit.\n</code></pre> <pre><code> &gt; babylon init\n INFO     2025-10-24 09:54:53,853 | \n        [babylon] Project successfully initialized at: ~/CosmoTech/DevOps/babylon_v5_dir/test-babylon/project\n</code></pre> <pre><code>  .\n  \u251c\u2500\u2500 babylon.error\n  \u251c\u2500\u2500 babylon.log\n  \u251c\u2500\u2500 project\n  \u2502\u00a0\u00a0 \u251c\u2500\u2500 Dataset.yaml\n  \u2502\u00a0\u00a0 \u251c\u2500\u2500 Organization.yaml\n  \u2502\u00a0\u00a0 \u251c\u2500\u2500 Runner.yaml\n  \u2502\u00a0\u00a0 \u251c\u2500\u2500 Solution.yaml\n  \u2502\u00a0\u00a0 \u2514\u2500\u2500 Workspace.yaml\n  \u2514\u2500\u2500 variables.yaml\n</code></pre></p> <p>Now, you can get started with running Babylon commands. All the required YAML files for the resources you need to deploy in v5 are provided as templates. You can customize and modify them based on your specific needs.</p>"},{"location":"tutorial/Getting_started_with_babylon_v5/#new-group-for-handling-runner-and-run-objects","title":"New group for handling runner and run objects","text":"<p>Important</p> <p>In v5, there is no longer a Connector object, and Scenario / ScenarioRun have been replaced by Runner and Run. For more information refer to the Cosmo Tech platform release notes.</p>"},{"location":"tutorial/Getting_started_with_babylon_v5/#meta-about-endpoint","title":"Meta About Endpoint","text":"<p>You can now see which API version you are using with the following command:</p> <p>about</p> <p><pre><code>babylon api about\n</code></pre> <pre><code>{\n  \"version\": {\n    \"full\": \"5.0.0-beta5-7ebc87cb\",\n    \"release\": \"5.0.0-beta5\",\n    \"major\": 5,\n    \"minor\": 0,\n    \"patch\": 0,\n    \"label\": \"beta5\",\n    \"build\": \"7ebc87cb\"\n  }\n}\n</code></pre></p>"},{"location":"tutorial/Getting_started_with_babylon_v5/#commands-for-testing","title":"Commands for Testing","text":"<p>For more details on how to test, see \ud83d\udc49 Examples.</p> <p>Commands</p> <p><pre><code>babylon apply --organization project/  \n</code></pre> <pre><code>babylon apply --solution project/\n</code></pre> <pre><code>babylon apply --workspace project/ \n</code></pre> <pre><code>babylon apply --runner project/\n</code></pre></p> <p>Note</p> <p>You can use the <code>--var-file</code> option to specify a particular <code>variables.yaml</code> file.</p>"},{"location":"tutorial/API/Connector/","title":"Connector","text":"<p>Currently, to create a new connector, we use the API endpoint. Below is an example of how you can create it using a YAML configuration file.</p> connector_azure_storage.yaml <pre><code>key: connector_azure_storage\nname: Azure Storage Connector\ndescription: Connector for Azure Storage. Read all data in a container with a prefix\n  and write the data in CSV for a ScenarioRun\nversion: \"1.1.2\"\nrepository: cosmo-tech/azure-storage-simulator-connector\ntags:\n- Azure Storage\n- Babylon\nurl: https://github.com/Cosmo-Tech/azure-storage-simulator-connector\nioTypes:\n- read\nazureAuthenticationWithCustomerAppRegistration:\nazureManagedIdentity:\nparameterGroups:\n- id: parameters\n  label: Parameters\n  parameters:\n  - id: AZURE_STORAGE_CONNECTION_STRING\n    label: Azure Storage Connection String\n    valueType: string\n    default: \"%STORAGE_CONNECTION_STRING%\"\n    envVar: AZURE_STORAGE_CONNECTION_STRING\n  - id: AZURE_STORAGE_CONTAINER_BLOB_PREFIX\n    label: Azure Storage Path in the form container/path\n    valueType: string\n    envVar: AZURE_STORAGE_CONTAINER_BLOB_PREFIX\n</code></pre>"},{"location":"tutorial/API/Dataset/","title":"Dataset","text":"<p>To deploy one or multiple datasets, one yaml file is needed by dataset. Four sourceType of datasets are available:</p> <ul> <li>ADT - creates dataset from ADT</li> <li>AzureStorage - creates dataset with Azure Storage</li> <li>File - creates dataset from a local file</li> <li>None - creates an empty dataset</li> </ul> Dataset.yaml <pre><code>kind: Dataset\nnamespace:\n  remote: true   # false by default\n  state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\n  context: test\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nspec:\n  sidecars:\n    azure:\n      dataset:\n        storage:\n          local_path: # needed if you want to upload your local dataset to AzureStorage\n        file:\n          local_path: # needed for datasets with sourceType File\n  payload:\n    id: # mandatory if you want to launch an update, without id a new dataset will be created ; if you want a new dataset, leave this field empty\n    name: Apply dataset\n    description: Creating dataset with nothing but update\n    sourceType: None | AzureStorage | ADT | File\n    source:\n      path: # path to the folder in AzureStorage, mandatory if sourceType is AzureStorage\n        # and no local file is provided\n      location: # mandatory field if sourceType is ADT: path to dataset stored in ADT;\n        # if sourceType is AzureStorage, default value is set to organization\n        # container, you can edit this field if you want to use a dataset from\n        # another container\n      name: # field used for sourceType AzureStorage, by default is set to storage account\n        # name referenced in state; edit it if you want to use a dataset from another\n        # account\n    security:\n      default: viewer\n      accessControlList:\n        - id: user1@email.com\n          role: admin\n        - id: user2@email.com\n          role: editor\n        - id: user3@email.com\n          role: viewer\n</code></pre> <p>Note current usage</p> <ul> <li>To create a dataset, we currently use the API endpoint to register a new dataset.</li> <li>Connector ID (must be also created via API see API Connector section)</li> </ul> API INPUT <pre><code>  name: mydataset\n  description: Some description of your dataset\n  tags:\n    - dataset\n    - File Storage\n  connector:\n    id: c-q5qv7xcsqv64\n    parametersValues:\n      AZURE_STORAGE_CONTAINER_BLOB_PREFIX: \"%WORKSPACE_FILE%/default_parameters/&lt;mydataset&gt;/data.xlsx\"\n  security:\n    default: editor\n    accessControlList:\n      - id: user1@email.com\n        role: admin\n      - id: user2@email.com\n        role: editor\n      - id: user3@email.com\n        role: viewer\n</code></pre>"},{"location":"tutorial/API/Organization/","title":"Organization","text":"Organization.yaml <pre><code>kind: Organization\nnamespace:\n  remote: true   # false by default\n  state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\n  context: test\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\n</code></pre> <p>The deployment configuration must define the following keys:</p> <ul> <li> <p><code>kind</code>   Specifies the type of resource to deploy.   Accepted values: <code>Organization</code>, <code>Solution</code>, <code>Workspace</code>, <code>WebApp</code>.  </p> <p>\u26a0\ufe0f The resource type must always start with a capital letter.</p> </li> <li> <p><code>namespace</code>   Provides metadata that uniquely identifies the deployment, including:  </p> <ul> <li><code>state_id</code> </li> <li><code>context_id</code> </li> <li><code>platform_id</code></li> </ul> </li> <li> <p><code>remote</code>   A boolean flag indicating whether the state should be stored locally only (<code>false</code>, default) or both locally and in the cloud (<code>true</code>)</p> </li> <li> <p><code>spec</code>   Defines the resource configuration. The details are specified under the <code>payload</code> section.  </p> </li> </ul> <p>For example, in an Organization deployment file:</p> Organization.yaml <pre><code>kind: Organization\nnamespace:\n  remote: true   # false by default\n  state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\n  context: test\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nspec:\n  payload:\n    name: My new Organization\n    security: {{security}}\n</code></pre> <p>All keys in this file can be templated with <code>{{}}</code> syntax for objects and <code>\"{{}}\"</code> for strings, as <code>security</code> section of this file. Corresponding values must be stored in <code>_variables.yaml_</code> file at the same level that your project See \ud83d\udc49 Examples:</p> <pre><code>security:\n  default: viewer\n  accessControlList:\n    - id: user1@email.com\n      role: admin\n    - id: user2@email.com\n      role: editor\n    - id: user3@email.com\n      role: viewer\n</code></pre>"},{"location":"tutorial/API/Solution/","title":"Solution","text":"<p>This is how the solution deployment file is structured</p> Solution.yaml <pre><code>kind: Solution\nnamespace:\n  remote: true   # false by default\n  state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\n  context: test\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"Project1\"\n  selector:\n    organization_id: \"{{services['api.organization_id']}}\"\nspec:\n  payload:\n    key: \"demosolution\"\n    name: \"My Solution Name\"\n    description: \"My solution description\"\n    repository: brewery_for_continuous\n    version: latest\n    tags:\n      - brewery\n    runTemplates:\n      - id: \"run_id\"\n        name: \"Standard simulation\"\n        csmSimulation: AzureWebApp/AzureWebApp_Simulation\n        run: true\n        preRun: true\n    parameters:\n    parameterGroups:\n    security:\n      default: none\n      accessControlList:\n        - id: user1@email.com\n          role: admin\n        - id: user2@email.com\n          role: editor\n        - id: user3@email.com\n          role: viewer\n</code></pre> <p>The <code>metadata</code> section defines deployment specific attributes. It is required in the following resource files:  </p> <ul> <li><code>solution.yaml</code> </li> <li><code>workspace.yaml</code> </li> <li><code>webapp.yaml</code> </li> </ul> <p>The <code>workspace_key</code> parameter is a mandatory field within the <code>metadata</code> section  </p> <ul> <li>Purpose:   Identifies the target workspace   For example, when Babylon provisions resources such as a Dataset (ADX) or an Event Hub, the generated name follows the convention: <pre><code>&lt;organization_id&gt;-&lt;workspace_key&gt; # Ex : o-rv0h6dd492w8-testppdprojectwork\n</code></pre></li> <li> <p>Constraints:  </p> <ul> <li>Must always be defined.  </li> <li>Cannot be left empty.  </li> </ul> </li> <li> <p>\u26a0\ufe0f Failure Condition:     If <code>workspace_key</code> is omitted or empty, the deployment will fail.</p> </li> </ul> <p>The <code>selector</code> block is used to specify the target organization under which the resource will be deployed.  </p> <ul> <li> <p>Parameter: <code>organization_id</code> </p> <ul> <li>Purpose:   Defines the unique organization in which the solution (or other resource) will be created.  </li> </ul> </li> <li> <p>Behavior:  </p> <ul> <li>Babylon will associate the deployment (e.g., a solution, workspace) with the specified organization_id.  </li> <li>Typically, this value is injected dynamically from the Babylon state (<code>services['api.organization_id']</code>).  </li> </ul> </li> </ul>"},{"location":"tutorial/API/Webapp/","title":"Webapp","text":"<p>To deploy a Static Web App, you can either:</p> <ol> <li>Create a new Azure App Registration handled automatically by Babylon.  </li> <li>Use an existing App Registration requires manual configuration.</li> </ol> <p>This behavior is controlled by the <code>create</code> key in the <code>sidecars.azure.app</code> section:</p> <ul> <li>If <code>create: true</code> \u2192 Babylon will create a new App Registration automatically.</li> <li>If <code>create: false</code> \u2192 You must manually provide:<ul> <li><code>client_id</code> \u2192 The Azure App Registration Client ID.</li> <li><code>displayName</code> \u2192 The name of your App Registration.</li> </ul> </li> </ul> <p>Example</p> <pre><code>    azure:\n      app:\n        create: false\n        use:\n          displayName: thisismyappforcontinuous\n          client_id: \"3d0531b1-d23b-4baf-98be-a764c0a42f00\"\n        principal_id: \"{{services['app.principal_id']}}\"\n        add_to_powerbi: true\n        payload:\n          displayName: thisismyappforcontinuous\n          signInAudience: AzureADMyOrg\n</code></pre> <p>Requirements</p> <p>Deploying a Static Web App also requires:</p> <ul> <li>A GitHub repository containing your application code.</li> <li>A destination branch that Babylon will use for deployment.</li> </ul> <p>Quick start:</p> <ol> <li>Create a new GitHub repository</li> <li>Configure your branch <code>&lt;BRANCH&gt;</code> with source code, for example: Azure sample webapp</li> </ol> <p>Commands to configure your branch</p> <pre><code>git init\n</code></pre> <pre><code>echo \"# empty_webapp\" &gt;&gt; README.md\n</code></pre> <pre><code>git add README.md\n</code></pre> <pre><code>git commit -m \"first commit\"\n</code></pre> <pre><code>git branch -M &lt;BRANCH&gt;   # e.g main \n</code></pre> <pre><code>git remote add origin git@github.com:&lt;YOUR_GITHUB_REPOSITORY&gt;.git\n</code></pre> <pre><code>git remote add upstream https://github.com/Cosmo-Tech/azure-sample-webapp.git\n</code></pre> <pre><code>git remote set-url upstream --push \"NO\"\n</code></pre> <pre><code>git fetch --all --tags --prune\n</code></pre> <pre><code>git checkout -B &lt;BRANCH&gt; &lt;SOURCE_TAG&gt;\n</code></pre> <pre><code>rm -r .github/ .git-hooks\n</code></pre> <pre><code>rm -r config.json   # \u26a0\ufe0f Remove if exists\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"first commit\"\n</code></pre> <pre><code>git push origin &lt;BRANCH&gt; -f\n</code></pre> <p>Now that your web app GitHub repository is configured, you can use this <code>webapp.yaml</code> file to deploy a new  static web app:</p> Webapp.yaml <pre><code>kind: WebApp\nnamespace:\n  remote: true   # false by default\n  state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\n  context: test\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"Project1\"\nspec:\n  sidecars:\n    github:\n      organization_name: Cosmo-Tech\n      repository_name: &lt;YOUR_GITHUB_REPOSITORY&gt;  # e.g azure-webapp-test-brewery-webapps\n      branch: &lt;BRANCH&gt;  # e.g main\n    powerbi:\n      group_id: &lt;changement&gt;\n      settings:\n        properties:\n          POWER_BI_SCOPE: \"https://analysis.windows.net/powerbi/api/.default\"\n          POWER_BI_AUTHORITY_URI: https://login.microsoftonline.com/common/v2.0\n          POWER_BI_WORKSPACE_ID: \"{{services['powerbi.workspace.id']}}\"\n          POWER_BI_CLIENT_ID: \"{{services['app.app_id']}}\"\n          POWER_BI_CLIENT_SECRET: \"{{secret_powerbi}}\"\n          POWER_BI_TENANT_ID: \"{{services['azure.tenant_id']}}\"\n    azure:\n      app:\n        create: false\n        use:\n          displayName: thisismyappforcontinuous\n          client_id: \"3d0531b1-d23b-4baf-98be-a764c0a42f00\"\n        principal_id: \"{{services['app.principal_id']}}\"\n        add_to_powerbi: true\n        payload:\n          displayName: thisismyappforcontinuous\n          signInAudience: AzureADMyOrg\n          spa:\n            redirectUris:\n              - http://localhost:3000/sign-in\n              - https://&lt;custome_domain_of_your_static_web_app&gt;/sign-in\n          requiredResourceAccess:\n            - resourceAppId: \"{{services['platform.app_id']}}\"\n              resourceAccess:\n                - id: \"{{services['platform.scope_id']}}\"\n                  type: Scope\n      function:\n        url_zip: \"https://github.com/Cosmo-Tech/supplychain-azure-function-dataset-download/releases/download/2.1.10/artifact.zip\"\n    config:\n      REACT_APP_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY: \"{{services['webapp.insights_instrumentation_key']}}\"\n      REACT_APP_ENABLE_APPLICATION_INSIGHTS: \"{{services['webapp.enable_insights']}}\"\n      REACT_APP_APP_REGISTRATION_CLIENT_ID: \"{{services['app.app_id']}}\"\n      REACT_APP_AZURE_TENANT_ID: \"{{services['azure.tenant_id']}}\"\n      REACT_APP_COSMOTECH_API_SCOPE: \"{{services['api.scope']}}\"\n      REACT_APP_DEFAULT_BASE_PATH: \"{{services['api.url']}}\"\n      REACT_APP_ORGANIZATION_ID: \"{{services['api.organization_id']}}\"\n      REACT_APP_WORKSPACES_IDS_FILTER: \"\"\n      REACT_APP_APP_VERSION: \"\"\n      REACT_APP_ORGANIZATION_URL: \"{{services['api.organization_url']}}\"\n      REACT_APP_DOCUMENTATION_URL: https://cosmotech.com\n      REACT_APP_SUPPORT_URL: https://support.cosmotech.com\n  payload:\n    name: \"my-webapp-for-continuous\"\n    location: westeurope\n    properties:\n      repositoryUrl: https://github.com/&lt;YOUR_GITHUB_REPOSITORY&gt; \n      branch: &lt;BRANCH&gt;  # e.g main\n      repositoryToken: \"{{github_secret}}\"\n      buildProperties:\n        appLocation: \"/\"\n        apiLocation: api\n        appArtifactLocation: build\n    sku:\n      name: Standard\n      tier: Standard\n</code></pre>"},{"location":"tutorial/API/Workspace/","title":"Workspace","text":"<p>The Workspace configuration may include additional parameters required to provision external services such as:</p> <ul> <li>Power BI workspaces</li> <li>Azure Event Hubs</li> <li>Azure Data Explorer (ADX) databases</li> </ul> <p>These parameters are defined under the <code>sidecars</code> section, specifically within the <code>azure</code> key.</p> Workspace.yaml <pre><code>kind: Workspace\nnamespace:\n  remote: true   # false by default\n  state_id: 8db6069e-e05f-42e6-b6d6-56dde124516a\n  context: test\n  platform:\n    id: dev\n    url: https://dev.api.cosmotech.com/phoenix/v3-0\nmetadata:\n  workspace_key: \"Project1\"\n  selector:\n    organization_id: \"{{services['api.organization_id']}}\"\n    solution_id: \"{{services['api.solution_id']}}\"\nspec:\n  sidecars:\n    azure:\n      powerbi: # &lt;--- powerbi section\n        workspace:\n          name: \"My workspace Powerbi Name\"\n          reports:\n            - name: Report Name A\n              type: dashboard\n              path: \"powerbi/myreportA.pbix\"\n              tag: \"myReportATag\"\n              parameters:\n                - id: \"ADX_Cluster\"\n                  value: \"https://{{services['adx.cluster_name']}}.westeurope.kusto.windows.net\"\n                - id: \"ADX_Database\"\n                  value: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n          permissions:\n            - identifier: \"user1@email.com\"\n              rights: Admin\n              type: User\n            - identifier: \"user2@email.com\"\n              rights: Contributor\n              type: User\n            - identifier: \"user3@email.com\"\n              rights: Viewer\n              type: User\n            - identifier: \"&lt;guid&gt;\"\n              description: \"Object Id of Service Principal WebApp\"\n              rights: Admin\n              type: App\n      adx:                   # &lt;--- adx section\n        database:\n          uri: \"https://{{services['adx.cluster_name']}}.{{location}}.kusto.windows.net\"  # URI Azure Data Explorer Cluster\n          create: true\n          retention: 365\n          permissions:\n            - type: User\n              email: \"user1@email.com\"\n              principal_id: \"412f3fad-3ce3-588s-994c-2a36bccaa0b2\"\n              role: Admin\n            - type: User\n              email: \"user2@email.com\"\n              principal_id: \"987d3fad-3ce3-588s-994c-2f5s4de8ddd5\"\n              role: User\n            - type: App\n              description: \"Cosmo Tech Platform &lt;platform_name&gt; For &lt;tenant_name&gt;\"\n              principal_id: \"{{services['platform.principal_id']}}\" # Object ID of Platform Enterprise Application\n              role: Admin\n          scripts:\n            - id: \"demoscript\"\n              name: Create.kql\n              path: \"adx/scripts\"\n      eventhub:                    # &lt;--- Eventhub section\n        consumers:\n          - displayName: adx\n            entity: ProbesMeasures\n          - displayName: adx\n            entity: ScenarioMetadata\n          - displayName: adx\n            entity: ScenarioRun\n          - displayName: adx\n            entity: ScenarioRunMetadata\n        connectors:\n          - table_name: ProbesMeasures\n            consumer_group: adx\n            connection_name: ProbesMeasures\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: JSON\n            compression: Gzip\n            mapping: ProbesMeasuresMapping\n          - table_name: ScenarioMetadata\n            consumer_group: adx\n            connection_name: ScenarioMetadata\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: CSV\n            compression: None\n            mapping: ScenarioMetadataMapping\n          - table_name: SimulationTotalFacts\n            consumer_group: adx\n            connection_name: ScenarioRun\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: JSON\n            compression: None\n            mapping: SimulationTotalFactsMapping\n          - table_name: ScenarioRunMetadata\n            consumer_group: adx\n            connection_name: ScenarioRunMetadata\n            database_target: \"{{services['api.organization_id']}}-{{workspace_key}}\"\n            format: CSV\n            compression: None\n            mapping: ScenarioRunMetadataMapping\n  payload:\n    key: \"Project1\"\n    name: \"My Workspace Name\"\n    description: \"Workspace for solution\"\n    solution:\n      solutionId: \"{{services['api.solution_id']}}\"\n    useDedicatedEventHubNamespace: true\n    sendScenarioMetadataToEventHub: true\n    sendInputToDataWarehouse: true\n    sendScenarioRunToEventHub: true\n    webApp:\n      url: \"https://{{services['webapp.static_domain']}}\"\n      options:\n        disableOutOfSyncWarningBanner: true\n        charts:\n          workspaceId: \"{{services['powerbi.workspace.id']}}\"\n          dashboardsViewIframeDisplayRatio: 1.8686131386861313\n          scenarioViewIframeDisplayRatio: 3.2\n          logInWithUserCredentials: false\n          dashboardsView:\n          scenarioView:\n        instanceView:\n          dataContent: null\n          dataSource: null\n        datasetManager:\n        menu:\n    security:\n      default: none\n      accessControlList:\n        - id: user1@email.com\n          role: admin\n        - id: user2@email.com\n          role: editor\n        - id: user3@email.com\n          role: viewer\n</code></pre> <p>The path to existing Power BI reports can be specified under the <code>sidecars \u2192 powerbi \u2192 workspace \u2192 reports</code> section.  </p> <p>Example</p> <pre><code>    reports:\n      - name: Report Name A\n        type: dashboard\n        path: \"powerbi/myreportA.pbix\" # &lt;--- \n        tag: \"myReportATag\"\n        parameters:\n</code></pre>"},{"location":"tutorial/API/Workspace/#how-babylon-handles-power-bi-report-ids","title":"How Babylon Handles Power BI Report IDs","text":"<p>Automatic Power BI Report ID Retrieval</p> <p>Babylon can now automatically retrieve and manage Power BI report IDs during deployment. This eliminates the need for manual copy-paste of report IDs, as was required before.  </p> <p>How it works</p> <ul> <li>Each imported Power BI report must be assigned a unique identifier, called a <code>tag</code>.  </li> <li>Babylon uses this <code>tag</code> to map the report ID.  </li> <li>Once mapped, the report ID can be referenced in the following sections:<ul> <li><code>dashboardsView</code></li> <li><code>scenarioView</code></li> </ul> </li> <li>This referencing will be accomplished using a second variable called <code>reportTag</code> in dashboardsView and scenarioView sections, as illustrated in the example below. This variable should correspond to the Power BI report tag you intend to use. Therefore, Babylon will handle everything automatically.</li> </ul> Example <pre><code>    sidecars:\n      powerbi: \n        workspace:\n          reports:\n            - name: Report Name A\n              type: dashboard\n              path: \"powerbi/myreportA.pbix\"\n              tag: \"myReportATag\" # Here, you should add the tag corresponding to this Power BI report\n            - name: Report Name B\n              type: dashboard\n              path: \"powerbi/myreportB.pbix\"\n              tag: \"myReportBTag\"\n\n    dashboardsView:\n      - dynamicFilters:\n        title:\n          en: Report Name A\n          fr: Report Name A\n        report_tag: \"myReportATag\"\n\n    scenarioView:\n      - dynamicFilters:\n        title:\n          en: Report Name B\n          fr: Report Name B\n        report_tag: \"myReportBTag\"\n</code></pre> <p>With this configuration:</p> <ul> <li>The <code>tag</code> (e.g., <code>myReportATag</code>, <code>myReportBTag</code>) acts as a stable reference.  </li> <li>Babylon automatically resolves and injects the corresponding Power BI Report ID into the deployment files.  </li> <li>These IDs are also persisted in the Babylon state, ensuring consistency across environments.</li> </ul> <p>Auto-injected Report IDs in <code>workspace.yaml</code></p> <pre><code>    dashboardsView:\n      - dynamicFilters: []\n        reportTag: \"myReportATag\"\n        title:\n          en: \"Report Name A\"\n          fr: \"Report Name A\"\n        reportId: \"03729d49-c423-4bf5-bb85-681449b56710\"\n\n    scenarioView:\n      - dynamicFilters: []\n        reportTag: \"myReportBTag\"\n        title:\n          en: \"Report Name B\"\n          fr: \"Report Name B\"\n        reportId: \"9c275c7a-d390-40a0-bc75-b9c5c8093986\"\n</code></pre> <p>Stored in Babylon State</p> <pre><code>    powerbi:\n      dashboard_view:\n        myReportATag: 03729d49-c423-4bf5-bb85-681449b56710\n      scenario_view:\n        myReportBTag: 9c275c7a-d390-40a0-bc75-b9c5c8093986\n</code></pre> <p>All ADX scripts must be placed inside the <code>adx/</code> folder of your project structure See \ud83d\udc49 Examples</p> <p>Permissions Reminder</p> <p>Certain operations may fail if Babylon doesn't have the necessary Azure permissions.</p> <p>To automatically create Azure Data Explorer (ADX) databases, Azure Functions, or Event Hubs, Babylon must have at least the <code>Contributor</code> role on the target resource group.</p> <p>\ud83d\udee1\ufe0f Owner role is required if Babylon also needs to assign roles to Azure resources during the deployment.</p> <p>If you security policy doesn't grant such access to Babylon, these operations must be done manually.</p>"}]}