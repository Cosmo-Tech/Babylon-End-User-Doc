{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Discover Babylon","text":"<p>Welcome to the End User Documentation of Babylon</p> <p>This documentation will guide you on your learning adventure with Babylon.</p>"},{"location":"#what-is-babylon","title":"What is Babylon ?","text":"<p>Babylon is a CLI<sup>1</sup> principally targeted at Devops users of the Cosmo Tech Platform. It allows the user to interact with the multiple systems used in the platform, performing multiple operations in a simple and streamlined fashion.</p> <p>Instead of requiring the user to learn how to use numerous software to interact with the systems, Babylon allows you to learn a single format.</p>"},{"location":"#why-babylon","title":"Why Babylon ?","text":"<p>Babylon was developed to help users getting around the difficulty of juggling around with multiple softwares to interact with the multiple systems composing the Cosmo Tech Platform.</p> <p>By using Babylon you only need one single software to work on your multiple needs.</p> <p>The team behind Babylon is closely tied to the one working on the Cosmo Tech Platform, and new features of the platform can quickly be added to Babylon allowing users to get fast access to the newest content.</p>"},{"location":"#im-still-not-convinced","title":"I'm still not convinced","text":"<p>Well, Babylon comes as a full framework allowing its developers to make simpler commands for you. While you get access to low level commands that directly interact with a single system, you also get high level commands allowing you a full automation of processes and thus reducing the risk of errors between elements.</p> <p>Such commands are called <code>Macro Commands</code><sup>2</sup> and allow a full automation of possibly complex processes.</p> <ol> <li> <p>Command Line Interface: A software used in a terminal console, allowing to run commands.\u00a0\u21a9</p> </li> <li> <p>Macro Commands: A combination of low level commands allowing to do complex operation in a high level manner.\u00a0\u21a9</p> </li> </ol>"},{"location":"discover/","title":"Discover Babylon","text":""},{"location":"discover/#what-is-babylon","title":"What is Babylon ?","text":"<p>Babylon is a CLI<sup>1</sup> principally targeted at Devops users of the Cosmo Tech Platform. It allows the user to interact with the multiple systems used in the platform, performing multiple operations in a simple and streamlined fashion.</p> <p>Instead of requiring the user to learn how to use numerous software to interact with the systems, Babylon allows you to learn a single format.</p>"},{"location":"discover/#why-babylon","title":"Why Babylon ?","text":"<p>Babylon was developed to help users getting around the difficulty of juggling around with multiple softwares to interact with the multiple systems composing the Cosmo Tech Platform.</p> <p>By using Babylon you only need one single software to work on your multiple needs.</p> <p>The team behind Babylon is closely tied to the one working on the Cosmo Tech Platform, and new features of the platform can quickly be added to Babylon allowing users to get fast access to the newest content.</p>"},{"location":"discover/#im-still-not-convinced","title":"I'm still not convinced","text":"<p>Well, Babylon comes as a full framework allowing its developers to make simpler commands for you. While you get access to low level commands that directly interact with a single system, you also get high level commands allowing you a full automation of processes and thus reducing the risk of errors between elements.</p> <p>Such commands are called <code>Macro Commands</code><sup>2</sup> and allow a full automation of possibly complex processes.</p> <ol> <li> <p>Command Line Interface: A software used in a terminal console, allowing to run commands.\u00a0\u21a9</p> </li> <li> <p>Macro Commands: A combination of low level commands allowing to do complex operation in a high level manner.\u00a0\u21a9</p> </li> </ol>"},{"location":"commands/powerbi_deploy_workspace/","title":"Power BI Deploy Workspace","text":""},{"location":"commands/powerbi_deploy_workspace/#description","title":"Description","text":"<p>This macro command will deploy a PowerBI workspace and populate it with reports. If the given workspace name already exists, the reports will be published in the existing workspace.</p> <p>This includes:</p> <ul> <li>Creating a PowerBI workspace if it does not exists</li> <li>Add user to PowerBI workspace</li> <li>Uploading all reports from a folder</li> <li>Updating dataset parameters</li> <li>Updating dataset azure credentials</li> </ul>"},{"location":"commands/powerbi_deploy_workspace/#configuration","title":"Configuration","text":"<p>Requirements</p> <p>By default this macro command requires a folder called <code>powerbi</code> containing two sub-folders  both with your <code>.pbix</code> files in respectively directory.</p> <pre><code>\u251c\u2500\u2500 powerbi\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_1.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_2.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_3.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_4.pbix\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 scenario\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 scenario.pbix\n</code></pre> <p>Note</p> <p>You can setup your <code>email</code> and your <code>user principal id</code> (Azure Directory) in your config files to deploy powerbi workspace with your credentials.</p> <pre><code>babylon config set azure email &lt;CHANGEME&gt; -c &lt;context_id&gt; -p &lt;platform_id&gt; \n</code></pre> <pre><code>babylon config set azure user_principal_id &lt;USER_PRINCIPAL_ID&gt; -c &lt;context_id&gt; -p &lt;platform_id&gt; \n</code></pre> <p>Then, make sure you have the required rights. <pre><code>babylon azure adx permission set -c &lt;context_id&gt; -p &lt;platform_id&gt; --type User --role Admin %azure%user_principal_id \n</code></pre></p> <p>Finally, you have to retrieve your access token powerbi <pre><code>babylon azure token store -c &lt;context_id&gt; -p &lt;platform_id&gt; --scope powerbi \n</code></pre></p> <p>Important</p> <p>The last command will give you a secret. <pre><code>export BABYLON_ENCODING_KEY=&lt;your_secret&gt;\n</code></pre></p>"},{"location":"commands/powerbi_deploy_workspace/#macro-command","title":"Macro command","text":"<p>Macro</p> <pre><code>babylon powerbi workspace deploy &lt;WORKSPACE_NAME&gt; -c &lt;context_id&gt; -p &lt;platform_id&gt; \\\n    --folder &lt;FOLDER_NAME&gt;/&lt;scenario | dashboard&gt; \\\n    --type &lt;scenario_view | dashboard_view&gt; \n</code></pre> <p>Usage</p> <pre><code># Usage: babylon powerbi workspace deploy [OPTIONS] WORKSPACE_NAME \n# \n#   Macro command allowing full deployment of a powerBI workspace\n#   Requires a local folder named `powerbi` and will initialize a full workspace with the\n#   given reports. Won't run powerbi workspace creation if it's already existing\n# \n# Options:\n#   --folder DIRECTORY          Override folder containing your .pbix files\n#                                   [required]\n#   --parameter &lt;QUERYSTRING QUERYSTRING&gt;...\n#                                   Add a combination &lt;Key Value&gt; that will be\n#                                   sent as parameter to all your datasets\n#   --override                      override reports in case of name conflict ?\n#   --type [scenario_view|dashboard_view]\n#                                   [required]\n#   --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/webapp_deployment/","title":"WebApp deployment","text":""},{"location":"commands/webapp_deployment/#description","title":"Description","text":"<p>The macro command will create a static webapp and configure it with the webapp source code.</p> <p>This includes:</p> <ul> <li>Creating and configuring an Azure Static WebApp resource</li> <li>Creating and configuring an Azure Active Directory App Registration</li> <li>Configuring the WebApp source code</li> <li>Adding access to the PowerBI Workspace</li> </ul> <p>DNS Record</p> <p>DNS Record creation is intently not supported by Babylon.  </p>"},{"location":"commands/webapp_deployment/#configuration","title":"Configuration","text":"<p>Requirements</p> <p>This macro requires a github repository with the destination branch already created.</p> <ol> <li>create a new repository in Github</li> <li>configure your branch <code>&lt;BRANCH&gt;</code> with code source (e.g https://github.com/Cosmo-Tech/azure-sample-webapp.git)</li> </ol> <pre><code>git init\n</code></pre> <pre><code>echo \"# empty_webapp\" &gt;&gt; README.md\n</code></pre> <pre><code>git add README.md\n</code></pre> <pre><code>git commit -m \"first commit\"\n</code></pre> <pre><code>git branch -M &lt;BRANCH&gt;\n</code></pre> <pre><code>git remote add origin git@github.com:&lt;YOUR_GITHUB_REPOSITORY&gt;.git\n</code></pre> <pre><code>git remote add upstream https://github.com/Cosmo-Tech/azure-sample-webapp.git\n</code></pre> <pre><code>git remote set-url upstream --push \"NO\"\n</code></pre> <pre><code>git fetch --all --tags --prune\n</code></pre> <pre><code>git checkout -B &lt;BRANCH&gt; &lt;SOURCE_TAG&gt;\n</code></pre> <pre><code>rm -r .github/\n</code></pre> <pre><code>git add .; git commit -m 'first commit'\n</code></pre> <pre><code>git push origin &lt;BRANCH&gt; -f\n</code></pre>"},{"location":"commands/webapp_deployment/#macro-command","title":"Macro command","text":"<p>Macro</p> <pre><code>babylon webapp deploy -c &lt;context_id&gt; -p &lt;platfom_id&gt; \n</code></pre> <p>Usage</p> <pre><code>#\u00a0Usage: babylon webapp deploy [OPTIONS]\n#\n#  Macro command that deploys a new webapp\n\n# Options:\n#   -c, --context TEXT   Context Name  [required]\n#   -p, --platform TEXT  Platform Name  [required]\n#   --arm-path PATH      Your custom arm azure function description file yaml\n#   --with-azf           Deploy webapp with azure function\n#   --help               Show this message and exit.\n</code></pre>"},{"location":"guides/","title":"Guides","text":"<p> Getting started</p> <p>You'll learn how to install, run, and experiment with Babylon.</p> <p> Getting started</p> <p> Solution deployment</p> <p>This guide will help you to deploy a new solution.</p> <p> Solution deploy</p> <p> PowerBI deployment</p> <p>You will deploy a PowerBI workspace and populate it with reports.</p> <p> PowerBI deploy</p> <p> WebApp deployment</p> <p>This guide will help you to deploy a new WebApp.</p> <p> WebApp deploy</p>"},{"location":"guides/az_requirements/","title":"Az requirements","text":""},{"location":"guides/az_requirements/#azure-requirements","title":"Azure requirements","text":"<p>Requirements</p> <p>The following elements are required before you can use Babylon on an Azure subscription</p> <ul> <li> <p>Fully set up Cosmo Tech Platform installed on your Azure Tenant</p> </li> <li> <p>App registration for Babylon</p> </li> </ul> <p>Babylon uses a Service Principal to interact with the API and other resources. To do so, Babylon needs to be registered as an application in the Azure Active Directory.</p> <p>This App Registration will be used to authenticate and get the required tokens to connect to your Platform. Rights on the App Registration depends on the type of connection you want to make. We recommend defining this app registration as a mobile and desktop application in Azure configuration with redirection URL (mostly for authenticating against Azure services. See official documentation : - https://learn.microsoft.com/en-us/entra/identity-platform/v2-oauth2-auth-code-flow - https://learn.microsoft.com/en-us/entra/identity-platform/msal-client-application-configuration - https://learn.microsoft.com/en-us/onedrive/developer/rest-api/getting-started/msa-oauth?view=odsp-graph-online</p> <p>The App registration needs the following API permissions.</p> <ul> <li> <p>Microsoft Graph</p> <ul> <li>Application.ReadWrite.All (Application)</li> <li>Application.ReadWrite.OwnedBy (Application)</li> <li>Group.ReadWrite.All (Application)</li> <li>User.Read (Delegted)</li> <li>User.Read.All (Application)</li> </ul> </li> <li> <p>Platform Api</p> <ul> <li>Platform.Admin (Application)</li> </ul> </li> </ul> <p>Important</p> <p>Babylon App registration needs Owner role on Cosmo Tech Platform Resource Group to grants full access to manage all resources, including the ability to assign roles in Azure RBAC.</p>"},{"location":"guides/brewery/","title":"Brewery","text":"<p>You can perform the following commands to deploy a new solution</p> <p>Remember</p> <p>You have to choose the platform and project you want to work. Contact your babylon admin to know more about your options.</p> <p>In this example, we will use</p> <ul> <li>context_id: <code>brewery</code></li> <li>platform_id: <code>staging</code></li> </ul> <p></p> <ul> <li> <p>** Container Registry **  <pre><code># retrieve configuration to work with dev platform\nbabylon config -c brewery -p dev select\n# retrieve configuration to work with staging platform\nbabylon config -c brewery -p staging select\n\n#\u00a0tranfer image from `dev` to `staging` platform\nbabylon azure -c brewery -p dev     acr pull -i &lt;image_docker:tag&gt;\nbabylon azure -c brewery -p staging acr push -i &lt;image_docker:tag&gt;\n</code></pre></p> </li> <li> <p>** Setting variables **  <pre><code># set some required variables\nbabylon config -c brewery -p staging set azure email &lt;changeme&gt;\nbabylon config -c brewery -p staging set azure user_principal_id &lt;user_principal_id&gt; \nbabylon config -c brewery -p staging set api workspace_key &lt;workspace_key&gt; \nbabylon config -c brewery -p staging set adx cluster_uri &lt;uri_kusto_cluster&gt; \nbabylon config -c brewery -p staging set powerbi dashboard_view \nbabylon config -c brewery -p staging set powerbi scenario_view \nbabylon config -c brewery -p staging set azure team_id &lt;team_id&gt; \n</code></pre></p> </li> </ul> <p>In this point, you can create a new organization or retrieve an organization</p> <ul> <li> <p>** Create organization **  <pre><code>babylon config -c brewery -p staging set api workspace_key &lt;changeme&gt;\nbabylon api    -c brewery -p staging organizations payload create\nbabylon api    -c brewery -p staging organizations create &lt;organization_name&gt; -e &lt;email&gt; -r Admin\nbabylon azure  -c brewery -p staging storage container create &lt;organization_id&gt;\nbabylon azure  -c brewery -p staging iam set -rt Microsoft.Storage/storageAccounts \\\n    -ri %azure%storage_blob_reader \\\n    -pi %azure%team_id \\\n    -pt Group \\\n    -rn %azure%storage_account_name\n</code></pre></p> </li> <li> <p>** Retrieve organization **  <pre><code>babylon api   -c brewery -p staging organizations get &lt;organization_id&gt;\nbabylon azure -c brewery -p staging iam set -rt Microsoft.Storage/storageAccounts \\\n    -ri %azure%storage_blob_reader \\\n    -pi %azure%team_id \\\n    -pt Group \\\n    -rn %azure%storage_account_name\n</code></pre></p> </li> </ul> <p>In this point, you can create a new ADT Instance or retrieve an ADT Instance</p> <ul> <li> <p>** Create ADT instance ** <pre><code># by default the name is &lt;organization_id&gt;-&lt;workspace_key&gt;\nbabylon azure -c brewery -p staging adt instance create\n</code></pre></p> </li> <li> <p>** Retrieve ADT instance ** <pre><code>babylon config -c brewery -p staging set adt digital_twins_url &lt;digital_twins_url&gt;\nbabylon azure  -c brewery -p staging iam set \\\n    -rt Microsoft.DigitalTwins/digitalTwinsInstances \\\n    -ri %adt%built_owner_id\nbabylon azure  -c brewery -p staging iam set \\\n    -rt Microsoft.DigitalTwins/digitalTwinsInstances \\\n    -ri %adt%built_reader_id\nbabylon azure  -c brewery -p staging iam set \\\n    -pi %azure%team_id \\\n    -pt Group \\\n    -rt Microsoft.DigitalTwins/digitalTwinsInstances \\\n    -ri %adt%built_owner_id\nbabylon azure  -c brewery -p staging iam set \\\n    -pi %azure%team_id \\\n    -pt Group \\\n    -rt Microsoft.DigitalTwins/digitalTwinsInstances \\\n    -ri %adt%built_reader_id\nbabylon azure  -c brewery -p staging adt model upload dtdl/\n</code></pre></p> </li> <li> <p>** Azure Data Explorer database ** </p> <p>Configuration </p> <p>Requirements</p> <p>By default this command requires a folder called <code>adx</code> containing scripts *.kql </p> <pre><code>\u251c\u2500\u2500 adx\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 script.kql\n</code></pre> <pre><code>#\u00a0by default the name is &lt;organization_id&gt;-&lt;workspace_key&gt;\nbabylon azure -c brewery -p staging adx database create\nbabylon azure -c brewery -p staging adx permission set -t User -r Admin %azure%user_principal_id\nbabylon azure -c brewery -p staging adx permission set -t Group -r Admin %azure%team_id\nbabylon azure -c brewery -p staging adx permission set -t App -r Admin %platform%principal_id\nbabylon azure -c brewery -p staging adx script run-folder adx/\n</code></pre> </li> <li> <p>** Create Eventhub namespace**  <pre><code>babylon azure -c brewery -p staging arm run -f %templates%/arm/eventhub_deploy.json\nbabylon azure -c brewery -p staging iam set \\\n    -rt Microsoft.EventHub/Namespaces \\\n    -ri %azure%eventhub_built_data_receiver \\\n    -pi %adx%cluster_principal_id\n\nbabylon azure -c brewery -p staging iam set \\\n    -rt Microsoft.EventHub/Namespaces \\\n    -ri %azure%eventhub_built_data_sender \\\n    -pi %babylon%principal_id\n\nbabylon azure -c brewery -p staging iam set \\\n    -rt Microsoft.EventHub/Namespaces \\\n    -ri %azure%eventhub_built_data_sender \\\n    -pi %babylon%principal_id\n\nbabylon azure -c brewery -p staging iam set \\\n    -pi %azure%team_id \\\n    -pt Group \\\n    -rt Microsoft.EventHub/Namespaces \\\n    -ri %azure%eventhub_built_contributor_id\n</code></pre></p> </li> <li> <p>** Eventhub consumer group and connectors ADX database**  <pre><code>#\u00a0create consumer groups\nbabylon azure -c brewery -p staging adx consumer add \"adx\" \"ProbesMeasures\"\nbabylon azure -c brewery -p staging adx consumer add \"adx\" \"ScenarioMetaData\"\nbabylon azure -c brewery -p staging adx consumer add \"adx\" \"ScenarioRun\"\nbabylon azure -c brewery -p staging adx consumer add \"adx\" \"ScenarioRunMetaData\"\n\n#\u00a0create connections\nbabylon azure -c brewery -p staging adx connections create ProbesMeasures %adx%database_name \\\n    -df JSON \\\n    -tn ProbesMeasures \\\n    -cp GZip \\\n    -cg adx \\\n    -mp ProbesMeasuresMapping\nbabylon azure -c brewery -p staging adx connections create ScenarioMetaData %adx%database_name \\\n    -df CSV \\\n    -tn ScenarioMetadata \\\n    -cg adx \\\n    -mp ScenarioMetadataMapping\nbabylon azure -c brewery -p staging adx connections create ScenarioRun %adx%database_name \\\n    -df JSON \\\n    -tn SimulationTotalFacts \\\n    -cg adx \\\n    -mp SimulationTotalFactsMapping\n babylon azure -c brewery -p staging adx connections create ScenarioRunMetaData %adx%database_name \\\n    -df CSV \\\n    -tn ScenarioRunMetadata \\\n    -cg adx \\\n    -mp ScenarioRunMetadataMapping\n</code></pre></p> </li> <li> <p>** Retrieve eventhub key ** </p> <p>Requirements</p> <p>Azure CLI</p> <pre><code>eventkey=$(az eventhubs namespace authorization-rule keys list \\\n    -g &lt;your_resource_group&gt; \\\n    --namespace-name &lt;organization_id&gt;-&lt;workspace_key&gt; \\\n    --name RootManageSharedAccessKey \\\n    --query primaryKey)\n\nbabylon hvac -c &lt;context_id&gt; -p &lt;platfom_id&gt; set project eventhub $eventkey\n</code></pre> </li> <li> <p>** Deploy PowerBI ** </p> <p>Requirements</p> <p>By default this macro command requires a folder called <code>powerbi</code> containing two sub-folders (<code>dashboard</code> and <code>scenario</code>) with your <code>.pbix</code> files. </p> <pre><code>\u251c\u2500\u2500 powerbi\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_1.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 scenario\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 scenario.pbix\n</code></pre> <p>Note</p> <p>You can setup your <code>email</code> and your <code>user principal id</code> (Azure Directory) in azure section to deploy powerbi workspace with your credentials</p> <pre><code>babylon azure -c &lt;context_id&gt; -p &lt;platform_id&gt; config set azure email &lt;changeme&gt;\nbabylon azure -c &lt;context_id&gt; -p &lt;platform_id&gt; config set azure user_principal_id &lt;user_principal_id&gt;\nbabylon azure -c &lt;context_id&gt; -p &lt;platform_id&gt; adx permission set -t User -r Admin %azure%user_principal_id\nbabylon azure -c &lt;context_id&gt; -p &lt;platform_id&gt; token store --scope powerbi\n</code></pre> <p>Warning</p> <p>The last command <code>babylon azure -c &lt;context_id&gt; -p &lt;platform_id&gt; token store --scope powerbi</code> will give you a secret to set in your environment variables <pre><code>export BABYLON_ENCODING_KEY=&lt;your_secret&gt;\n</code></pre></p> <p>Macro</p> <pre><code>babylon powerbi -c &lt;context_id&gt; -p &lt;platform_id&gt; workspace deploy\n</code></pre> <p>Get additional information about command </p> </li> </ul> <p></p> <ul> <li> <p>** Deploy Webapp ** </p> <p>Requirements</p> <p>This macro requires a github access token set in vault service.</p> <p>Please generate github access token using classic tokens Github access Tokens and perform the following command: <pre><code>babylon hvac set global github token [github_pat_token]\n</code></pre></p> <p>This macro requires a github repository with the destination branch already created  </p> <ol> <li>create a new repository in Github  </li> <li>configure your branch <code>&lt;BRANCH&gt;</code> with the source code. (example: https://github.com/Cosmo-Tech/azure-sample-webapp.git) <pre><code>git init\necho \"# empty_webapp\" &gt;&gt; README.md\ngit add README.md\ngit commit -m \"add readme\"\ngit branch -M main\ngit remote add origin git@github.com:&lt;YOUR_GITHUB_REPOSITORY&gt;.git\ngit remote add upstream https://github.com/Cosmo-Tech/azure-sample-webapp.git\ngit remote set-url upstream --push \"NO\"\ngit fetch --all --prune\ngit checkout -B &lt;BRANCH&gt; &lt;SOURCE_TAG&gt;\nrm -r .github/\ngit add .; git commit -m 'first commit'\ngit push origin &lt;BRANCH&gt; -f\n</code></pre></li> </ol> <p>Now, setup the webapp configuration</p> <p><pre><code>babylon -c brewery -p staging config set azure function_artifact_url &lt;uri_artifact_zip&gt; \nbabylon -c brewery -p staging config set webapp deployment_name &lt;changeme&gt;\nbabylon -c brewery -p staging config set webapp location &lt;changeme&gt;\nbabylon -c brewery -p staging config set github branch &lt;changeme&gt;\nbabylon -c brewery -p staging config set github organization &lt;changeme&gt;\nbabylon -c brewery -p staging config set github repository &lt;changeme&gt;\nbabylon -c brewery -p staging webapp deploy\n\nbabylon -c brewery -p staging powerbi workspace user add %app%principal_id App Admin\n</code></pre> Get additional information about command </p> </li> </ul> <p></p> <ul> <li> <p>** Retrieve azure function key ** </p> <p>Requirements</p> <p>Azure CLI</p> <pre><code>azf_key=$(az functionapp keys list \\ \n    -g &lt;yout\u00e7resource_group&gt; \\\n    -n &lt;organization_id&gt;-&lt;workspace_key&gt; --query masterKey)\n\nbabylon hvac -c &lt;context_id&gt; -p &lt;platfom_id&gt; set project func $azf_key\n</code></pre> </li> </ul> <p>In this point, you can create a new solution or retrieve a solution already created</p> <ul> <li> <p>** Create solution **  <pre><code>babylon api -c brewery -p staging solutions payload create\nbabylon api -c brewery -p staging solutions create &lt;solution_name&gt;\n</code></pre></p> </li> <li> <p>** Retrieve solution **  <pre><code>babylon api -c brewery -p staging solutions get &lt;solution_id&gt;\n</code></pre></p> </li> <li> <p>** Create new Workspace **  <pre><code>babylon config -c brewery -p staging set api run_templates \\\n    -i \"1\" \\\n    -i \"2\" \\\n    -i \"3\"\n\nbabylon api -c brewery -p staging workspaces payload create\nbabylon api -c brewery -p staging workspaces create &lt;changeme&gt;\n\n\n# register the key into workspace \nbabylon api -c brewery -p staging workspaces send-key\n</code></pre></p> </li> </ul>"},{"location":"guides/getting_started/","title":"Getting started with Babylon","text":"<p>This is a guide to getting started with Babylon. You'll learn how to install, run, and experiment with the Babylon.</p>"},{"location":"guides/getting_started/#azure-requirements","title":"Azure requirements","text":"<p>Requirements</p> <p>The following elements are required before you can use Babylon on an Azure subscription</p> <ul> <li> <p>Fully set up Cosmo Tech Platform installed on your Azure Tenant</p> </li> <li> <p>App registration for Babylon</p> </li> </ul> <p>Babylon uses a Service Principal to interact with the API and other resources. To do so, Babylon needs to be registered as an application in the Azure Active Directory.</p> <p>This App Registration will be used to authenticate and get the required tokens to connect to your Platform. Rights on the App Registration depends on the type of connection you want to make. We recommend defining this app registration as a mobile and desktop application in Azure configuration with redirection URL (mostly for authenticating against Azure services. See official documentation : - https://learn.microsoft.com/en-us/entra/identity-platform/v2-oauth2-auth-code-flow - https://learn.microsoft.com/en-us/entra/identity-platform/msal-client-application-configuration - https://learn.microsoft.com/en-us/onedrive/developer/rest-api/getting-started/msa-oauth?view=odsp-graph-online</p> <p>The App registration needs the following API permissions.</p> <ul> <li> <p>Microsoft Graph</p> <ul> <li>Application.ReadWrite.All (Application)</li> <li>Application.ReadWrite.OwnedBy (Application)</li> <li>Group.ReadWrite.All (Application)</li> <li>User.Read (Delegted)</li> <li>User.Read.All (Application)</li> </ul> </li> <li> <p>Platform Api</p> <ul> <li>Platform.Admin (Application)</li> </ul> </li> </ul> <p>Important</p> <p>Babylon App registration needs Owner role on Cosmo Tech Platform Resource Group to grants full access to manage all resources, including the ability to assign roles in Azure RBAC.</p>"},{"location":"guides/getting_started/#get-babylon-from-source","title":"Get Babylon from source","text":"<p>Requirements</p> <ul> <li>Python 3.9+</li> <li>Pip 22.2+</li> <li>Git (latest version)</li> </ul> <p>We will go through the process of getting a version of Babylon before the installation.</p> <p>Get sources from git</p> <p>You can download the latest version of Babylon using git clone command</p> <p><pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git babylon\n</code></pre> <pre><code>cd babylon\n</code></pre></p> <p>Get the specific version from git</p> <p>If you want a specific version of Babylon (3.0.0 for example)</p> <pre><code>git clone -b 3.0.0 git@github.com:Cosmo-Tech/Babylon.git babylon\n</code></pre> <pre><code>cd babylon\n</code></pre>"},{"location":"guides/getting_started/#install-babylon","title":"Install Babylon","text":"<p>You can install babylon globally in your system</p> <pre><code>pip install .\n</code></pre> <p>but, if you want you can set up a virtual environment in python using the library <code>pvenv</code> to keep your Babylon dependencies in a single location. See the guide below:</p> <ul> <li> <p>Setup a <code>pyenv</code></p> <p>Automatic installer</p> <pre><code>curl https://pyenv.run | bash\n</code></pre> <p>Setup your shell environment for pyenv</p> <pre><code>echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bashrc\necho 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> <p>Now you can create a venv with <code>pyenv</code> <pre><code>pyenv virtualenv &lt;babylon_env_name&gt;\n</code></pre></p> <p>Activate your new venv <pre><code>pyenv activate &lt;babylon_env_name&gt;\n</code></pre></p> </li> <li> <p>Install Babylon in your environment <code>&lt;babylon_env_name&gt;</code> <pre><code>pyenv activate &lt;babylon_env_name&gt;\npip install .\n</code></pre></p> </li> </ul> Enable autocompletion <p>On some systems autocompletion can be enabled for Babylon, more information on autocompletion can be found on the click documentation (since Babylon is based on <code>click</code>)</p> Example of click autocompletion command for <code>bash</code> <pre><code>echo 'eval \"$(_BABYLON_COMPLETE=bash_source babylon)\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> <p>Now that you have a fully functional installation of Babylon, you can check the next steps to learn how to start running commands.</p> <p></p>"},{"location":"guides/getting_started/#setup-babylon","title":"Setup Babylon","text":"<p>Babylon use a Vault service and provides a group of commands that can be used.</p> <p>The first thing to do in order to check if Babylon is working properly: <pre><code>babylon --help\n</code></pre></p>"},{"location":"guides/getting_started/#setup-environment-variables","title":"Setup environment variables","text":"<p>The vault service is required to work with babylon cli. Contact your babylon admin to get your URI service and your userpass.</p> <ul> <li>Set URI vault service.   <pre><code>export BABYLON_SERVICE=&lt;uri_babylon_vault_server&gt;\n</code></pre></li> </ul> <p>Now, you will need set some environment variables before interacting with Babylon cli.   To do so, perform the login command.</p> <ul> <li> <p>Login and get an access token. <pre><code>babylon hvac login\n</code></pre>   questions:    <pre><code>[?] Username: &lt;username&gt;\n[?] Password: ****\n[?] Organization: &lt;organization_name&gt;\n</code></pre>   Copy the response and paste it in your environment.</p> </li> <li> <p>If entries does not exist, you may need to create it (e.g for a newly deployed platform):   We provide a tool for this, you can find it here   This needs an initial Terraform depoyment as it uses the Terraform state to parse and populate the Vault.   Usefull informations can be found in the Readme of this repository !</p> </li> </ul>"},{"location":"guides/getting_started/#configuration","title":"Configuration","text":"<p>At this point, you will need two variables to perform Babylon commands.</p> <ul> <li><code>context_id</code> : project name</li> <li><code>platform_id</code> : platform name</li> </ul> <p>For example, you can try this command,</p> <p><pre><code>babylon config display -c brewery -p dev\n</code></pre> You will see the current configuration. For now, this configuration is empty.</p> <p>To retrieve <code>dev</code> configuration, you need perform this command.</p> <pre><code>babylon config init -c brewery -p dev\n</code></pre> <p>Try again the display command and verify the current configuration.</p>"},{"location":"guides/getting_started/#explore-babylon","title":"Explore babylon","text":"<p>You will explore some basics commands. </p>"},{"location":"guides/getting_started/#configuration-files","title":"Configuration files","text":"<p><pre><code># set email in azure config\nbabylon config set azure email example@test.com -c &lt;context_id&gt; -p dev\n</code></pre> <pre><code># get email in azure config\nbabylon config get azure email -c &lt;context_id&gt; -p dev\n</code></pre></p>"},{"location":"guides/getting_started/#azure-container-registry-and-images","title":"Azure container registry and images","text":"<ul> <li>** Interact with Azure Container Registry ** </li> </ul> <p>Requirements</p> <ul> <li>Docker instance</li> <li>Vault service with <code>dev</code> and <code>staging</code> platform already configured </li> </ul> <ol> <li> <p>Retrieve <code>dev</code> platform configuration <pre><code>babylon config init -c &lt;context_id&gt; -p dev \n</code></pre></p> </li> <li> <p>Retrieve <code>staging</code> platform configuration <pre><code>babylon config init -c &lt;context_id&gt; -p staging \n</code></pre></p> </li> <li> <p>List images from <code>dev</code> registry <pre><code>babylon azure acr list -c &lt;context_id&gt; -p dev \n</code></pre></p> </li> <li> <p>Pull image from source : <code>dev</code> registry <pre><code>babylon azure acr pull -c &lt;context_id&gt; -p dev --image &lt;IMAGE:VERSION&gt; \n</code></pre></p> </li> <li> <p>Push image to target : <code>staging</code> registry <pre><code>babylon azure acr push -c &lt;context_id&gt; -p staging --image &lt;IMAGE:VERSION&gt;\n</code></pre></p> </li> </ol>"},{"location":"guides/getting_started/#config-files-specification","title":"Config files specification","text":"<p>The <code>babylon config init -c &lt;context_id&gt; -p &lt;platfom_id&gt;</code> command will create all config files for you.</p> <p>You will find,</p> <p>** Azure Container Registry **</p> <ul> <li>acr.yaml <pre><code>&lt;context_id&gt;:\n  login_server: \n  simulator_repository: \n  simulator_version: \n</code></pre></li> </ul> <p>** Azure Digital Twins **</p> <ul> <li>adt.yaml <pre><code>&lt;context_id&gt;:\n  built_owner_id: \n  built_reader_id: \n  digital_twin_url: \n</code></pre></li> </ul> <p>** Azure Explorer Database **</p> <ul> <li>adx.yaml <pre><code>&lt;context_id&gt;:\n  built_contributor_id: \n  built_owner_id: \n  cluster_name: \n  cluster_principal_id: \n  cluster_uri: \n  database_name: \n</code></pre></li> </ul> <p>** Cosmotech API **</p> <ul> <li>api.yaml <pre><code>&lt;context_id&gt;:\n  connector:\n    adt_id: \n    adt_version: \n    storage_id: \n    storage_version: \n    twin_id: \n    twin_version: \n  dataset:\n    adt_id: \n    storage_id: \n    twin_id: \n  organization_id: \n  organization_url: \n  run_templates: \n  scope: \n  send_scenario_metadata_to_event_hub: \n  solution_id: \n  url: \n  use_dedicated_event_hub_namespace: \n  workspace_id: \n  workspace_key: \n</code></pre></li> </ul> <p>** Azure App Registration **</p> <ul> <li>app.yaml <pre><code>&lt;context_id&gt;:\n  app_id: \n  name: \n  object_id: \n  principal_id: \n</code></pre></li> </ul> <p>** Azure Babylon App Registration **</p> <ul> <li>babylon.yaml <pre><code>&lt;context_id&gt;:\n  client_id: \n  principal_id: \n</code></pre></li> </ul> <p>** Github **</p> <ul> <li>github.yaml <pre><code>&lt;context_id&gt;:\n  branch: \n  organization: \n  repository: \n  run_url: \n  workflow_path: \n</code></pre></li> </ul> <p>** Cosmotech Platform **</p> <ul> <li>platform.yaml <pre><code>&lt;context_id&gt;:\n  app_id: \n  principal_id: \n  scope_id: \n</code></pre></li> </ul> <p>** PowerBI **</p> <ul> <li>powerbi.yaml <pre><code>&lt;context_id&gt;:\n  dashboard_view: \n  group_id: \n  scenario_view: \n  scope: \n  workspace:\n    id: \n    name: \n</code></pre></li> </ul> <p>** WebApp **</p> <ul> <li>webapp.yaml <pre><code>&lt;context_id&gt;:\n  deployment_name: \n  enable_insights: \n  hostname: \n  insights_instrumentation_key: \n  location: \n  static_domain: \n</code></pre></li> </ul> <p>** Azure **</p> <ul> <li>azure.yaml <pre><code>&lt;context_id&gt;:\n  function_artifact_url: \n  resource_group_name: \n  resource_location: \n  storage_account_name: \n  team_id: \n  subscription_id: \n  email: \n  eventhub_built_contributor_id: \n  eventhub_built_data_receiver: \n  eventhub_built_data_sender:  \n  cli_client_id: \n  storage_blob_reader: \n  user_principal_id: \n</code></pre></li> </ul>"},{"location":"guides/powerbi_report_config/","title":"Configuring PowerBI reports","text":"<p>Info</p> <p>To follow this guide you should be familiar with PowerBI</p> <p>In order to facilitate the creation of Power BI reports and the migration of reports between environments, a few guidelines should be followed.</p> <p>This guidelines will also ensure that your PowerBI report is compatible with Babylon.</p> <p>The whole process is automated along with PowerBI workspace creation in PowerBI deploy-workspace</p>"},{"location":"guides/powerbi_report_config/#create-power-bi-reports-in-power-bi-desktop","title":"Create Power BI reports in Power BI desktop","text":"<p>Within PowerBI Desktop</p> <ol> <li>Create a new Power BI report</li> <li>Go to section Transform Data for managing data sources. </li> <li>Create parameters in the report <ol> <li>Create parameter ADX_cluster: URL of the ADX cluster (e.g.: phoenixdev.westeurope.kusto.windows.net)</li> <li>Create parameter ADX_database: Name of the ADX database (e.g.: o-xxxxxxxx-brewerydemo) </li> </ol> </li> <li>Create a new Data Source of type Azure &gt; Azure Data Explorer (Kusto). </li> <li>Enter the exact value for ADX Cluster, ADX Database and ADX Table (e.g. ScenarioMetadata).</li> <li>Select DirectQuery as the Data Connectivity Mode. </li> <li>In the query formula, replace ADX cluster and database with the parameter value. </li> <li>Rename the Query (in the query list on the left) after the table name.</li> <li>Perform data transformation as needed.</li> <li>Create and tune your Power BI Dashboards.</li> </ol>"},{"location":"guides/powerbi_report_config/#publish-report-to-power-bi-web-portal","title":"Publish report to Power BI web portal","text":"<p>Once your Power BI report is ready, publish it to the Power BI Web Portal.</p> With Babylon <ol> <li>Get your workspace id babylon powerbi workspace get-all -c <code>&lt;project_id&gt;</code> -p <code>&lt;platform_id&gt;</code></li> <li>Upload your report <code>babylon powerbi report upload -c &lt;project_id&gt; -p &lt;platform_id&gt; --workspace [workspace_id] [myfile.pbix]</code> babylon powerbi report upload -c <code>&lt;project_id&gt;</code> -p <code>&lt;platform_id&gt;</code> </li> </ol> With PowerBI Web Portal <p></p>"},{"location":"guides/powerbi_report_config/#move-report-to-a-new-environment","title":"Move report to a new environment","text":"<p>If you want to plug your Power BI report to a new environment you can do it easily by changing its parameters in the PowerBI Web Portal (app.powerbi.com) or with Babylon.</p> With Babylon <ol> <li>Get your workspace id babylon powerbi workspace get-all -c <code>&lt;project_id&gt;</code> -p <code>&lt;platform_id&gt;</code> </li> <li>Get your dataset id babylon powerbi dataset get-all -c <code>&lt;project_id&gt;</code> -p <code>&lt;platform_id&gt;</code> </li> <li>Update parameters babylon powerbi dataset parameters update -c <code>&lt;project_id&gt;</code> -p <code>&lt;platform_id&gt;</code> </li> <li>Update dataset credentials babylon powerbi dataset update-credentials -c  -p  --workspace workspace_id <li>The data sources will automatically be updated to read the new environment's data. </li> With PowerBI web portal <ol> <li>Go to the Power BI workspace and access the settings of your report\u2019s Dataset. </li> <li>Update the parameters values (ADX_cluster and ADX_database) with your target environment data.  </li> <li>The data sources will automatically be updated to read the new environment's data. </li> </ol>"},{"location":"guides/resource_file/","title":"Resource file","text":"<p>The <code>babylon config init -c &lt;context_id&gt; -p &lt;platfom_id&gt;</code> command will create all config files for you.</p> <p>You will find,</p> <p>** Azure Container Registry **</p> <ul> <li>acr.yaml <pre><code>&lt;context_id&gt;:\n  login_server: \n  simulator_repository: \n  simulator_version: \n</code></pre></li> </ul> <p>** Azure Digital Twins **</p> <ul> <li>adt.yaml <pre><code>&lt;context_id&gt;:\n  built_owner_id: \n  built_reader_id: \n  digital_twin_url: \n</code></pre></li> </ul> <p>** Azure Explorer Database **</p> <ul> <li>adx.yaml <pre><code>&lt;context_id&gt;:\n  built_contributor_id: \n  built_owner_id: \n  cluster_name: \n  cluster_principal_id: \n  cluster_uri: \n  database_name: \n</code></pre></li> </ul> <p>** Cosmotech API **</p> <ul> <li>api.yaml <pre><code>&lt;context_id&gt;:\n  connector:\n    adt_id: \n    adt_version: \n    storage_id: \n    storage_version: \n    twin_id: \n    twin_version: \n  dataset:\n    adt_id: \n    storage_id: \n    twin_id: \n  organization_id: \n  organization_url: \n  run_templates: \n  scope: \n  send_scenario_metadata_to_event_hub: \n  solution_id: \n  url: \n  use_dedicated_event_hub_namespace: \n  workspace_id: \n  workspace_key: \n</code></pre></li> </ul> <p>** Azure App Registration **</p> <ul> <li>app.yaml <pre><code>&lt;context_id&gt;:\n  app_id: \n  name: \n  object_id: \n  principal_id: \n</code></pre></li> </ul> <p>** Azure Babylon App Registration **</p> <ul> <li>babylon.yaml <pre><code>&lt;context_id&gt;:\n  client_id: \n  principal_id: \n</code></pre></li> </ul> <p>** Github **</p> <ul> <li>github.yaml <pre><code>&lt;context_id&gt;:\n  branch: \n  organization: \n  repository: \n  run_url: \n  workflow_path: \n</code></pre></li> </ul> <p>** Cosmotech Platform **</p> <ul> <li>platform.yaml <pre><code>&lt;context_id&gt;:\n  app_id: \n  principal_id: \n  scope_id: \n</code></pre></li> </ul> <p>** PowerBI **</p> <ul> <li>powerbi.yaml <pre><code>&lt;context_id&gt;:\n  dashboard_view: \n  group_id: \n  scenario_view: \n  scope: \n  workspace:\n    id: \n    name: \n</code></pre></li> </ul> <p>** WebApp **</p> <ul> <li>webapp.yaml <pre><code>&lt;context_id&gt;:\n  deployment_name: \n  enable_insights: \n  hostname: \n  insights_instrumentation_key: \n  location: \n  static_domain: \n</code></pre></li> </ul> <p>** Azure **</p> <ul> <li>azure.yaml <pre><code>&lt;context_id&gt;:\n  function_artifact_url: \n  resource_group_name: \n  resource_location: \n  storage_account_name: \n  team_id: \n  subscription_id: \n  email: \n  eventhub_built_contributor_id: \n  eventhub_built_data_receiver: \n  eventhub_built_data_sender:  \n  cli_client_id: \n  storage_blob_reader: \n  user_principal_id: \n</code></pre></li> </ul>"},{"location":"guides/solution_deployment/","title":"Solution deployment","text":"<p>You can perform the following commands to deploy a new solution</p> <p>Remember</p> <p>You have to choose the platform and project you want to work. Contact your babylon admin to know more about your options.</p> <p>In this example, we will use</p> <ul> <li>context_id: <code>brewery</code></li> <li>platform_id: <code>perf</code></li> </ul> <p></p>"},{"location":"guides/solution_deployment/#container-registry","title":"Container Registry","text":"<pre><code># retrieve configuration to work with dev platform\nbabylon config init -c brewery -p dev\n</code></pre> <pre><code># retrieve configuration to work with perf platform\nbabylon config init -c brewery -p perf\n</code></pre> <pre><code># listing images\nbabylon azure acr list -c brewery -p perf\n</code></pre> <pre><code># pull image from `dev` platform\nbabylon azure acr pull -i &lt;image_docker:version&gt; -c brewery -p dev\n</code></pre> <pre><code># push image to `perf` platform\nbabylon azure acr push -i &lt;image_docker:version&gt; -c brewery -p perf\n</code></pre>"},{"location":"guides/solution_deployment/#setup-basic-configuration","title":"Setup basic configuration","text":"<pre><code>babylon config set azure email &lt;CHANGEME&gt; -c brewery -p perf\n</code></pre> <p><pre><code>babylon config set azure user_principal_id &lt;user_principal_id&gt; -c brewery -p perf\n</code></pre> <pre><code>babylon config set api workspace_key &lt;workspace_key&gt; -c brewery -p perf\n</code></pre></p> <pre><code>babylon config set powerbi dashboard_view -c brewery -p perf \n</code></pre> <pre><code>babylon config set powerbi scenario_view -c brewery -p perf \n</code></pre> <pre><code>babylon config set azure team_id &lt;team_id&gt; -c brewery -p perf\n</code></pre> <pre><code>babylon config set acr simulator_repository &lt;image_docker&gt; -c brewery -p perf\n</code></pre> <pre><code>babylon config set acr simulator_version &lt;version&gt; -c brewery -p perf\n</code></pre> <p>At this point, you can create or retrieve an organization</p>"},{"location":"guides/solution_deployment/#create-organization","title":"Create organization","text":"<pre><code>babylon api organizations payload create -c brewery -p perf\n</code></pre> <pre><code>babylon api organizations create &lt;organization_name&gt; -c brewery -p perf \\\n    --output .payload/brewery.perf.organization.yaml\n</code></pre> <pre><code>babylon api organizations security add -c brewery -p perf --email email@domain.com --role admin\n</code></pre> <pre><code>babylon azure storage container create &lt;organization_id&gt; -c brewery -p perf \n</code></pre> <pre><code>babylon azure iam set -c brewery -p perf \\\n    --resource-type \"Microsoft.Storage/storageAccounts\" \\\n    --role-id %azure%storage_blob_reader \\\n    --principal-id %azure%team_id \\\n    --principal-type Group \\\n    --resource-name %azure%storage_account_name\n</code></pre> <pre><code>babylon azure iam set -c brewery -p perf \\\n    --resource-type \"Microsoft.Storage/storageAccounts\" \\\n    --role-id %azure%storage_blob_reader \\\n    --principal-id %platform%principal_id \\\n    --resource-name %azure%storage_account_name\n</code></pre>"},{"location":"guides/solution_deployment/#retrieve-an-organization","title":"Retrieve an organization","text":"<pre><code>babylon api organizations get &lt;organization_id&gt; -c brewery -p perf \n</code></pre> <pre><code># Optional\nbabylon api organizations get &lt;organization_id&gt; -c brewery -p perf \\\n    --output .payload/brewery.perf.organization.yaml\n</code></pre> <pre><code>babylon azure iam set -c brewery -p perf \\\n    --resource-type \"Microsoft.Storage/storageAccounts\" \\\n    --role-id %azure%storage_blob_reader \\\n    --principal-id %azure%team_id \\\n    --principal-type Group \\\n    --resource-name %azure%storage_account_name\n</code></pre> <pre><code>babylon azure iam set -c brewery -p perf \\\n    --resource-type \"Microsoft.Storage/storageAccounts\" \\\n    --role-id %azure%storage_blob_reader \\\n    --principal-id %platform%principal_id \\\n    --resource-name %azure%storage_account_name\n</code></pre>"},{"location":"guides/solution_deployment/#azure-data-explorer-database","title":"Azure Data Explorer database","text":"<p>Configuration </p> <p>Requirements</p> <p>By default this command requires a folder called <code>adx</code> containing scripts *.kql </p> <pre><code>\u251c\u2500\u2500 adx\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 script.kql\n</code></pre> <pre><code>#\u00a0by default the name is &lt;organization_id&gt;-&lt;workspace_key&gt;\nbabylon azure adx database create -c brewery -p perf \n</code></pre> <pre><code>babylon azure adx permission set -c brewery -p perf --principal-type User --role Admin %azure%user_principal_id  \n</code></pre> <pre><code>babylon azure adx permission set -c brewery -p perf --principal-type Group --role Admin %azure%team_id\n</code></pre> <pre><code>babylon azure adx permission set -c brewery -p perf --principal-type App --role Admin %platform%principal_id \n</code></pre> <pre><code>babylon azure adx script run-folder adx/ -c brewery -p perf\n</code></pre>"},{"location":"guides/solution_deployment/#create-eventhub-namespace","title":"Create Eventhub namespace","text":"<pre><code>babylon azure arm run -c brewery -p perf --file %templates%/arm/eventhub_deploy.json &lt;NAME&gt;\n</code></pre> <p>Make sure you have all rights.</p> <pre><code>babylon azure iam set -c brewery -p perf \\\n    --resource-type Microsoft.EventHub/Namespaces \\\n    --role-id %azure%eventhub_built_data_receiver \\\n    --principal-id %adx%cluster_principal_id\n</code></pre> <pre><code>babylon azure iam set -c brewery -p perf \\\n    --resource-type Microsoft.EventHub/Namespaces \\\n    --role-id %azure%eventhub_built_data_sender \\\n    --principal-id %platform%principal_id \n</code></pre> <pre><code>babylon azure iam set -c brewery -p perf \\\n    --resource-type Microsoft.EventHub/Namespaces \\\n    --role-id %azure%eventhub_built_data_sender \\\n    --principal-id %babylon%principal_id\n</code></pre> <pre><code>babylon azure iam set -c brewery -p perf \\\n    --principal-id %azure%team_id \\\n    --principal-type Group \\\n    --resource-type Microsoft.EventHub/Namespaces \\\n    --role-id %azure%eventhub_built_contributor_id \n</code></pre>"},{"location":"guides/solution_deployment/#eventhub-consumer-group-and-connectors-adx","title":"Eventhub consumer group and connectors ADX","text":"<pre><code>babylon azure adx consumer add \"adx\" \"ProbesMeasures\" -c brewery -p perf \n</code></pre> <pre><code>babylon azure adx consumer add \"adx\" \"ScenarioMetaData\" -c brewery -p perf \n</code></pre> <pre><code>babylon azure adx consumer add \"adx\" \"ScenarioRun\" -c brewery -p perf \n</code></pre> <pre><code>babylon azure adx consumer add \"adx\" \"ScenarioRunMetaData\" -c brewery -p perf \n</code></pre>"},{"location":"guides/solution_deployment/#create-connections","title":"Create connections","text":"<pre><code>babylon azure adx connections create -c brewery -p perf ProbesMeasures %adx%database_name \\\n    --data-format JSON \\\n    --table-name ProbesMeasures \\\n    --compression GZip \\\n    --consumer-group adx \\\n    --mapping ProbesMeasuresMapping\n</code></pre> <pre><code>babylon azure adx connections create -c brewery -p perf ScenarioMetaData %adx%database_name \\\n    --data-format CSV \\\n    --table-name ScenarioMetadata \\\n    --consumer-group adx \\\n    --mapping ScenarioMetadataMapping\n</code></pre> <pre><code>babylon azure adx connections create -c brewery -p perf ScenarioRun %adx%database_name \\\n    --data-format JSON \\\n    --table-name SimulationTotalFacts \\\n    --consumer-group adx \\\n    --mapping SimulationTotalFactsMapping\n</code></pre> <pre><code>babylon azure adx connections create -c brewery -p perf ScenarioRunMetaData %adx%database_name \\\n    --data-format CSV \\\n    --table-name ScenarioRunMetadata \\\n    --consumer-group adx \\\n    --mapping ScenarioRunMetadataMapping\n</code></pre>"},{"location":"guides/solution_deployment/#authentication-eventhub-configuration","title":"Authentication Eventhub configuration","text":"<p>There are two options:</p> <ul> <li> <p>Tenant Client Credential: </p> <p>Platform app registration should be Event Hub Data Sender on Event Hub resource</p> <p><code>azure.eventbus.authentication.strategy = \u201cTENANT_CLIENT_CREDENTIALS\u201d</code></p> </li> <li> <p>Shared Access Key</p> <p><code>dedicatedEventHubAuthenticationStrategy = \u201cSHARED_ACCESS_POLICY\u201d</code></p> <p><code>name: dedicatedEventHubSasKeyName</code></p> <p><code>key</code>: Retrieve eventhub share access key</p> <p>Requirements</p> <p>Azure CLI</p> <pre><code>eventkey=$(az eventhubs namespace authorization-rule keys list \\\n    -g &lt;RESOURCE_GROUP&gt; \\\n    --namespace-name &lt;ORGANIZATION_ID&gt;-&lt;WORKSPACE_KEY&gt; \\\n    --name RootManageSharedAccessKey \\\n    --query primaryKey)\n</code></pre> <pre><code># save this secret\nbabylon hvac set project eventhub $eventkey -c brewery -p perf\n</code></pre> </li> </ul>"},{"location":"guides/solution_deployment/#powerbi-deploy","title":"PowerBI deploy","text":"<p>Requirements</p> <p>By default this macro command requires a folder called <code>powerbi</code> containing two sub-folders (<code>dashboard</code> and <code>scenario</code>) with your <code>.pbix</code> files. </p> <pre><code>\u251c\u2500\u2500 powerbi\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboard_1.pbix\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 scenario\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 scenario.pbix\n</code></pre> <p>Note</p> <p>You can setup your <code>email</code> and your <code>user principal id</code> (Azure Directory) in azure section to deploy powerbi workspace with your credentials</p> <pre><code>babylon config set azure email example@domain.com -c brewery -p perf \n</code></pre> <pre><code>babylon config set azure user_principal_id &lt;user_principal_id&gt; -c brewery -p perf  \n</code></pre> <pre><code>babylon azure token store -c brewery -p perf --scope powerbi  \n</code></pre> <p>Warning</p> <p>The last command <code>babylon azure token store -c brewery -p perf --scope powerbi</code> will give you a secret <pre><code>export BABYLON_ENCODING_KEY=&lt;your_secret&gt;\n</code></pre></p> <p>Macro</p> <pre><code>babylon powerbi workspace deploy &lt;WORKSPACE_NAME&gt; -c brewery -p perf --type dashboard_view --folder powerbi/dashboard/ --override \n</code></pre> <pre><code>babylon powerbi workspace deploy &lt;WORKSPACE_NAME&gt; -c brewery -p perf --type scenario_view --folder powerbi/scenario/ --override \n</code></pre> <p>Get additional information about command </p> <p></p>"},{"location":"guides/solution_deployment/#webapp-deploy","title":"Webapp deploy","text":"<p>Requirements</p> <p>This macro requires a github access token set in vault service.</p> <p>Please generate github access token using classic tokens Github access Tokens with <code>repo and workflow</code> permissions and perform the following command:</p> <pre><code>babylon hvac set global github token [github_token]\n</code></pre> <p>This macro requires a github repository with the destination branch already created.</p> <ol> <li>create a new repository in Github  </li> <li>configure your branch <code>&lt;BRANCH&gt;</code> with the source code. (example: https://github.com/Cosmo-Tech/azure-sample-webapp.git)</li> </ol> <pre><code>git init\n</code></pre> <pre><code>echo \"# empty_webapp\" &gt;&gt; README.md\n</code></pre> <pre><code>git add README.md\n</code></pre> <pre><code>git commit -m \"add readme\"\n</code></pre> <pre><code>git branch -M &lt;BRANCH&gt;\n</code></pre> <pre><code>git remote add origin git@github.com:&lt;YOUR_GITHUB_REPOSITORY&gt;.git\n</code></pre> <pre><code>git remote add upstream https://github.com/Cosmo-Tech/azure-sample-webapp.git\n</code></pre> <pre><code>git remote set-url upstream --push \"NO\"\n</code></pre> <pre><code>git fetch --all --tags --prune\n</code></pre> <pre><code>git checkout -B &lt;BRANCH&gt; &lt;SOURCE_TAG&gt;\n</code></pre> <pre><code>rm -r .github/\n</code></pre> <pre><code>git add .; git commit -m 'first commit'\n</code></pre> <pre><code>git push origin &lt;BRANCH&gt; -f\n</code></pre> <p>Setup the webapp configuration.</p> <p><pre><code>babylon config set azure function_artifact_url &lt;uri_artifact_zip&gt; -c brewery -p perf  \n</code></pre> <pre><code>babylon config set webapp deployment_name &lt;CHANGEME&gt; -c brewery -p perf \n</code></pre> <pre><code>babylon config set webapp location &lt;CHANGEME&gt; -c brewery -p perf \n</code></pre> <pre><code>babylon config set github branch &lt;CHANGEME&gt; -c brewery -p perf \n</code></pre> <pre><code>babylon config set github organization &lt;CHANGEME&gt; -c brewery -p perf \n</code></pre> <pre><code>babylon config set github repository &lt;CHANGEME&gt; -c brewery -p perf \n</code></pre> <pre><code>babylon webapp deploy -c brewery -p perf \n</code></pre> <pre><code>babylon powerbi workspace user add -c brewery -p perf %app%principal_id App Admin\n</code></pre></p> <pre><code>babylon azure iam set -c brewery -p perf \\\n    --resource-type Microsoft.EventHub/Namespaces \\\n    --role-id %azure%eventhub_built_data_sender \\\n    --principal-id %app%principal_id \n</code></pre> <p>Get additional information about command </p> <p>After deployment, make sure to perform an admin consent on API permission of app registration.</p> <p></p>"},{"location":"guides/solution_deployment/#retrieve-azure-function-key","title":"Retrieve azure function key","text":"<p>Requirements</p> <p>Azure CLI</p> <pre><code>azf_key=$(az functionapp keys list \\ \n    -g &lt;RESOURCE_GROUP&gt; \\\n    -n &lt;ORGANIZATION_ID&gt;-&lt;WORKSPACE_KEY&gt; --query masterKey)\n</code></pre> <pre><code># save this secret\nbabylon hvac set project func $azf_key -c brewery -p perf \n</code></pre> <p>At this point, you can create or retrieve a solution.</p>"},{"location":"guides/solution_deployment/#create-solution","title":"Create Solution","text":"<pre><code>babylon api solutions payload create -c brewery -p perf \n</code></pre> <p>Info</p> <p>You will find a new file in <code>.payload</code> directory.</p> <ul> <li>Make changes in solution description file <code>.payload/brewery.perf.solution.yaml</code></li> </ul> <pre><code>babylon api solutions create &lt;solution_name&gt; -c brewery -p perf --output .payload/brewery.perf.solution.yaml\n</code></pre>"},{"location":"guides/solution_deployment/#create-workspace","title":"Create Workspace","text":"<pre><code># setup run_templates\nbabylon config set api run_templates -c brewery -p perf \\\n    --item \"1\" \\\n    --item \"2\" \\\n    --item \"3\" \n</code></pre> <pre><code>babylon api workspaces payload create -c brewery -p perf \n</code></pre> <p>Info</p> <p>You will find a new file in <code>.payload</code> directory.</p> <ul> <li>Make changes in workspace description file <code>.payload/brewery.perf.workspace.yaml</code></li> </ul> <pre><code>babylon api workspaces create &lt;workspace_name&gt; -c brewery -p perf \\\n    --output .payload/brewery.perf.workspace.yaml \n</code></pre>"},{"location":"guides/solution_deployment/#register-the-eventhub-key-in-workspace","title":"Register the eventhub key in workspace","text":"<pre><code>babylon api workspaces send-key -c brewery -p perf \n</code></pre>"},{"location":"guides/tfc_requirements/","title":"Terraform Cloud Requirements","text":"Requirements <p>The following elements are required before you can use Babylon on Terraform Cloud  - A Terraform Cloud organization token, for workspace creation or configuration  - A Terraform Cloud user token, for workspace configuration or execution</p>"},{"location":"guides/tfc_requirements/#allow-access-to-terraform-cloud","title":"Allow access to Terraform Cloud","text":"<p>Babylon uses the Terraform Cloud tokens to authenticate users and allow them to interact with the API. For operation on workspaces you will need to add a oauth token to terraform-cloud in the webapp. Once this oauth token you will add its id to your workspace configuration with babylon. - babylon terraform-cloud workspace create</p> <p>You can use the following commands to setup your token secrets in your <code>.secrets.yaml.encrypt</code> file for <code>Babylon</code> to use it directly !   - babylon terraform-cloud login   - babylon terraform-cloud logout </p>"},{"location":"guides/vault_requirements/","title":"Vault service","text":"<p>Requirements</p> <p>The following elements are required before you can use Babylon on an Azure subscription</p> Vault requirements <p>You need a Vault Service on your Azure Tenant.</p> <p>link to github for deployment</p>"},{"location":"partials/azure/az_aad_api_rights/","title":"Az aad api rights","text":"<p>To be able to connect to the API, a user requires to have rights to it in Azure Active Directory.</p> <p>To check the user rights for your API, you can access the Enterprise Application page for your API in the Azure Portal, and check the section <code>Users and groups</code></p> <p>On this page you will see all the authorizations for your users and will be able to give roles to Users, Services Principals and Groups.</p> <p>You just need to make sure that your user has permissions to access your API from here.</p> <p>The list of roles and their description can be found in the App Registration of your platform under the <code>App roles</code> section</p>"},{"location":"partials/azure/az_api_registration/","title":"Az api registration","text":"<p>AZ CLI being a Microsoft software comes with its own Application ID</p> <ul> <li>List of commonly used Microsoft applications ID</li> </ul> <p>So in this case we can easily find the required id and add it to our API  </p> Azure CLI application ID <pre><code>04b07795-8ddb-461a-bbee-02f9e1bf7b46\n</code></pre> <p>You can then go to the App Registration of your API on your Azure Tenant and go on the <code>Expose an API</code> page.</p> <p>There you can see a button <code>Add a client application</code> which will allow you to add the AZ CLI application ID as an authorized client for your api</p> Correctly set up App Registration <p></p> <p>Now the API will allow connections from the AZ CLI</p>"},{"location":"partials/azure/vault/","title":"Vault","text":"<p>You need a Vault Service on your Azure Tenant.</p> <p>link to github for deployment</p>"},{"location":"partials/installation/from_docker/","title":"From docker","text":""},{"location":"partials/installation/from_docker/#get-babylon-from-docker","title":"Get Babylon from docker","text":"Prerequisites Requirement Docker <p>Choosing the version of Babylon you want to use you can run the following command</p> Download docker image <pre><code>docker pull ghcr.io/cosmo-tech/babylon:latest\ndocker tag ghcr.io/cosmo-tech/babylon:latest babylon\n</code></pre> <p>It will download for you the required docker image, and rename it to <code>babylon</code></p> Start Babylon docker image <p>Using the following command you get in a working Babylon environment, allowing you to run any command you will like <pre><code>docker run -ti --rm babylon\n</code></pre></p> <p>Warning</p> <p>In this environment your changes to the files won't be persisted when you leave it. The following tips will help you set up persitance for your config, but will use knowledge of Babylon explained in future guides.</p> Persist configurations and use local content as a working dir Info <p>This tip concern some principle of Babylon explained is other guides, you can skip it for now if you want to understand those principles before running commands using them.</p> <p>To persist configuration we will use the <code>--mount</code> option of Docker to persist our data across runs</p> Persist configuration <pre><code>mkdir babylon_config\ndocker run -ti --rm --mount type=bind,source=\"$(pwd)\"/babylon_config,target=/opt/babylon babylon\n</code></pre> <p>This command will persist your Babylon configuration in a local <code>/babylon_config</code> folder allowing you to keep it across runs (in the same folder)</p> <p>Now if you want to use your local files as a working directory for your commands you can do the following</p> Use local folder as working dir <pre><code>docker run -ti --rm --mount type=bind,source=\"$(pwd)\",target=/etc/babylon/workingdir babylon\n</code></pre> <p>This command will use your current folder as a working directory for your babylon commands</p> <p>Combining both options allows for a persistent content and config across runs</p> Combine both for persitence <pre><code>docker run -ti --rm --mount type=bind,source=\"$(pwd)\"/babylon_config,target=/opt/babylon --mount type=bind,source=\"$(pwd)\",target=/etc/babylon/workingdir babylon\n</code></pre> Use aliases to make a babylon command using docker <p>Info</p> <ul> <li>Only work on system having the <code>alias</code> command</li> <li>Won't allow you to use auto-completion</li> </ul> <p>The following command will create a command <code>babylon</code> having the same use as the one you would get by installing the sources but by using docker.</p> <code>babylon</code> alias command <pre><code>alias babylon=\"docker run -ti --rm --mount type=bind,source=$(pwd)/babylon_config,target=/opt/babylon --mount type=bind,source=$(pwd),target=/etc/babylon/workingdir --entrypoint babylon babylon\"\n</code></pre>"},{"location":"partials/installation/from_git/","title":"From git","text":"<p>Get sources from git</p> <p>You can download the latest version of Babylon using git clone command</p> <p><pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git babylon\n</code></pre> <pre><code>cd babylon\n</code></pre></p> <p>Get the specific version from git</p> <p>If you want a specific version of Babylon (3.0.0 for example)</p> <pre><code>git clone -b 3.0.0 git@github.com:Cosmo-Tech/Babylon.git babylon\n</code></pre> <pre><code>cd babylon\n</code></pre>"},{"location":"partials/installation/from_source/","title":"From source","text":""},{"location":"partials/installation/from_source/#get-babylon-from-source","title":"Get Babylon from source","text":"<p>Requirements</p> <ul> <li>Python 3.9+</li> <li>Pip 22.2+</li> <li>Git (latest version)</li> </ul> <p>We will go through the process of getting a version of Babylon before the installation.</p> <p>Get sources from git</p> <p>You can download the latest version of Babylon using git clone command</p> <p><pre><code>git clone git@github.com:Cosmo-Tech/Babylon.git babylon\n</code></pre> <pre><code>cd babylon\n</code></pre></p> <p>Get the specific version from git</p> <p>If you want a specific version of Babylon (3.0.0 for example)</p> <pre><code>git clone -b 3.0.0 git@github.com:Cosmo-Tech/Babylon.git babylon\n</code></pre> <pre><code>cd babylon\n</code></pre>"},{"location":"partials/installation/from_source/#install-babylon","title":"Install Babylon","text":"<p>You can install babylon globally in your system</p> <pre><code>pip install .\n</code></pre> <p>but, if you want you can set up a virtual environment in python using the library <code>pvenv</code> to keep your Babylon dependencies in a single location. See the guide below:</p> <ul> <li> <p>Setup a <code>pyenv</code></p> <p>Automatic installer</p> <pre><code>curl https://pyenv.run | bash\n</code></pre> <p>Setup your shell environment for pyenv</p> <pre><code>echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bashrc\necho 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> <p>Now you can create a venv with <code>pyenv</code> <pre><code>pyenv virtualenv &lt;babylon_env_name&gt;\n</code></pre></p> <p>Activate your new venv <pre><code>pyenv activate &lt;babylon_env_name&gt;\n</code></pre></p> </li> <li> <p>Install Babylon in your environment <code>&lt;babylon_env_name&gt;</code> <pre><code>pyenv activate &lt;babylon_env_name&gt;\npip install .\n</code></pre></p> </li> </ul> Enable autocompletion <p>On some systems autocompletion can be enabled for Babylon, more information on autocompletion can be found on the click documentation (since Babylon is based on <code>click</code>)</p> Example of click autocompletion command for <code>bash</code> <pre><code>echo 'eval \"$(_BABYLON_COMPLETE=bash_source babylon)\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"partials/installation/prerequisites/","title":"Prerequisites","text":"<ul> <li>Python 3.9+</li> <li>Pip 22.2+</li> <li>Git (latest version)</li> </ul>"},{"location":"partials/installation/pyenv_setup/","title":"Pyenv setup","text":"<ul> <li> <p>Setup a <code>pyenv</code></p> <p>Automatic installer</p> <pre><code>curl https://pyenv.run | bash\n</code></pre> <p>Setup your shell environment for pyenv</p> <pre><code>echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bashrc\necho 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> <p>Now you can create a venv with <code>pyenv</code> <pre><code>pyenv virtualenv &lt;babylon_env_name&gt;\n</code></pre></p> <p>Activate your new venv <pre><code>pyenv activate &lt;babylon_env_name&gt;\n</code></pre></p> </li> </ul>"},{"location":"partials/installation/release/","title":"Release","text":"<p>If you choose to use releases, get one of the releases on the following page: </p> <p>Then select the type of compressed folder you want (<code>.zip</code> or <code>.tar.gz</code>) and download the file.</p> Download a release <p></p> <p>Decompress the file you downloaded.</p> Decompress a file ziptar.gz <pre><code>unzip Babylon-2.1.0.zip\n</code></pre> <pre><code>tar -xf Babylon-2.1.0.tar.gz\n</code></pre> <p>After run you now have a new folder named <code>Babylon-2.1.0</code> which we will refer to as \"Babylon Installation Folder\" for the rest of the guide</p>"}]}